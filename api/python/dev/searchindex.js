Search.setIndex({"alltitles": {"ABS": [[1341, "abs"]], "ACOS": [[1344, "acos"]], "ACOSD": [[1344, "acosd"]], "ARRAY_AGG": [[1337, "array-agg"]], "ARRAY_CONTAINS": [[1337, "array-contains"]], "ARRAY_GET": [[1337, "array-get"]], "ARRAY_LENGTH": [[1337, "array-length"]], "ARRAY_LOWER": [[1337, "array-lower"]], "ARRAY_MEAN": [[1337, "array-mean"]], "ARRAY_REVERSE": [[1337, "array-reverse"]], "ARRAY_SUM": [[1337, "array-sum"]], "ARRAY_TO_STRING": [[1337, "array-to-string"]], "ARRAY_UNIQUE": [[1337, "array-unique"]], "ARRAY_UPPER": [[1337, "array-upper"]], "ASIN": [[1344, "asin"]], "ASIND": [[1344, "asind"]], "ATAN": [[1344, "atan"]], "ATAN2": [[1344, "atan2"]], "ATAN2D": [[1344, "atan2d"]], "ATAND": [[1344, "atand"]], "AVG": [[1336, "avg"]], "Aggregate": [[1336, null]], "Aggregation": [[176, null], [328, null], [824, null], [931, null]], "Aliases": [[1336, null], [1336, null], [1341, null], [1341, null], [1342, null], [1342, null]], "Array": [[802, null], [1311, null], [1337, null]], "Asserts": [[1350, "asserts"]], "Attributes": [[316, null], [919, null], [1312, null]], "Available registrations": [[1, "available-registrations"]], "Avro": [[823, "avro"]], "BIT_AND": [[1338, "bit-and"]], "BIT_COUNT": [[1338, "bit-count"]], "BIT_LENGTH": [[1342, "bit-length"]], "BIT_OR": [[1338, "bit-or"]], "BIT_XOR": [[1338, "bit-xor"]], "Binary": [[803, null], [816, "binary"], [1313, null]], "Boolean": [[804, null], [1314, null]], "CAST": [[1345, "cast"]], "CBRT": [[1341, "cbrt"]], "CEIL": [[1341, "ceil"]], "COALESCE": [[1339, "coalesce"]], "CONCAT": [[1342, "concat"]], "CONCAT_WS": [[1342, "concat-ws"]], "COS": [[1344, "cos"]], "COSD": [[1344, "cosd"]], "COT": [[1344, "cot"]], "COTD": [[1344, "cotd"]], "COUNT": [[1336, "count"]], "CREATE TABLE": [[1349, "create-table"]], "CSV": [[823, "csv"]], "Categories": [[805, null], [1315, null]], "Clipboard": [[823, "clipboard"]], "Cloud Credentials": [[823, "cloud-credentials"]], "Columns / names": [[807, null]], "Comparison": [[816, "comparison"], [1323, "comparison"]], "Computation": [[317, null], [808, null], [1316, null]], "Conditional": [[1339, null]], "Config": [[175, null]], "Config load, save, state": [[175, "config-load-save-state"]], "Config options": [[175, "config-options"]], "Conjunction": [[816, "conjunction"]], "Conversion": [[821, "conversion"]], "DATE": [[1342, "date"]], "DATE_PART": [[1343, "date-part"]], "DEGREES": [[1344, "degrees"]], "DISTINCT": [[1335, "distinct"]], "DIV": [[1341, "div"]], "DROP TABLES": [[1349, "drop-tables"]], "Data types": [[326, null]], "DataFrame": [[321, null]], "DataType": [[326, "datatype"]], "Database": [[823, "database"]], "Delta Lake": [[823, "delta-lake"]], "Descriptive": [[318, null], [920, null], [1317, null]], "Documentation": [[1347, null], [1347, null], [1347, null]], "ENDS_WITH": [[1342, "ends-with"]], "EXCEPT": [[1348, "except"]], "EXP": [[1341, "exp"]], "EXPLAIN": [[1349, "explain"]], "EXTRACT": [[1343, "extract"]], "Errors": [[327, "errors"]], "Examples": [[1, "examples"], [930, "examples"], [1350, "examples"]], "Excel / ODS": [[823, "excel-ods"]], "Exceptions": [[327, null]], "Export": [[319, null], [1318, null]], "Expression SQL": [[1347, "expression-sql"]], "Expressions": [[810, null]], "Extending the API": [[1, null]], "FIRST": [[1336, "first"]], "FLOOR": [[1341, "floor"]], "FROM": [[1335, "from"]], "Feather / IPC": [[823, "feather-ipc"]], "Frame SQL": [[1347, "frame-sql"]], "Functions": [[809, null], [821, null], [930, "functions"]], "GPUEngine": [[921, null]], "GREATEST": [[1339, "greatest"]], "GROUP BY": [[1335, "group-by"]], "Global SQL": [[1347, "global-sql"]], "GroupBy": [[320, null], [922, null]], "HAVING": [[1335, "having"]], "IF": [[1339, "if"]], "IFNULL": [[1339, "ifnull"]], "INITCAP": [[1342, "initcap"]], "INTERSECT": [[1348, "intersect"]], "Iceberg": [[823, "iceberg"]], "Importing": [[930, "importing"]], "InProcessQuery": [[923, null]], "Index": [[0, null]], "Input/output": [[823, null]], "Introduction": [[1347, "introduction"]], "JOIN": [[1335, "join"]], "JSON": [[823, "json"]], "LAST": [[1336, "last"]], "LEAST": [[1339, "least"]], "LEFT": [[1342, "left"]], "LENGTH": [[1342, "length"]], "LIMIT": [[1335, "limit"]], "LN": [[1341, "ln"]], "LOG": [[1341, "log"]], "LOG10": [[1341, "log10"]], "LOG1P": [[1341, "log1p"]], "LOG2": [[1341, "log2"]], "LOWER": [[1342, "lower"]], "LTRIM": [[1342, "ltrim"]], "LazyFrame": [[924, null]], "List": [[811, null], [1320, null]], "MAX": [[1336, "max"]], "MEDIAN": [[1336, "median"]], "MIN": [[1336, "min"]], "MOD": [[1341, "mod"]], "Manipulation/selection": [[323, null], [814, null], [926, null], [1322, null]], "Math": [[1341, null]], "Meta": [[812, null]], "Metadata": [[927, null]], "Methods": [[1347, "methods"]], "Miscellaneous": [[322, null], [813, null], [821, "miscellaneous"], [925, null], [1321, null]], "Multiple Config instances": [[175, "multiple-config-instances"]], "NULLIF": [[1339, "nullif"]], "Name": [[815, null]], "Nested": [[326, "nested"]], "Numeric": [[326, "numeric"], [816, "numeric"], [1323, "numeric"]], "OCTET_LENGTH": [[1342, "octet-length"]], "OFFSET": [[1335, "offset"]], "ORDER BY": [[1335, "order-by"]], "Operators": [[816, null], [1323, null]], "Other": [[326, "other"]], "PI": [[1341, "pi"]], "POW": [[1341, "pow"]], "Panic": [[327, "panic"]], "Parallelization": [[821, "parallelization"]], "Parametric testing": [[1350, "parametric-testing"]], "Parquet": [[823, "parquet"]], "Plot": [[324, null], [1324, null]], "Plugins": [[928, null]], "Polars strategies": [[1350, "polars-strategies"]], "Profiles": [[1350, "profiles"]], "Providing new functionality": [[1, "providing-new-functionality"]], "PyArrow Datasets": [[823, "pyarrow-datasets"]], "Python API": [[1347, null]], "Python API reference": [[822, null]], "QUANTILE_CONT": [[1336, "quantile-cont"]], "QUANTILE_DISC": [[1336, "quantile-disc"]], "Querying": [[1347, "querying"]], "RADIANS": [[1344, "radians"]], "REGEXP_LIKE": [[1342, "regexp-like"]], "REPLACE": [[1342, "replace"]], "REVERSE": [[1342, "reverse"]], "RIGHT": [[1342, "right"]], "ROUND": [[1341, "round"]], "RTRIM": [[1342, "rtrim"]], "Random": [[821, "random"]], "SELECT": [[1335, "select"]], "SHOW TABLES": [[1349, "show-tables"]], "SIGN": [[1341, "sign"]], "SIN": [[1344, "sin"]], "SIND": [[1344, "sind"]], "SQL Clauses": [[1335, null]], "SQL Functions": [[1340, null]], "SQL Interface": [[1346, null]], "SQLContext": [[1347, "sqlcontext"]], "SQRT": [[1341, "sqrt"]], "STARTS_WITH": [[1342, "starts-with"]], "STDDEV": [[1336, "stddev"]], "STRFTIME": [[1343, "strftime"]], "STRPOS": [[1342, "strpos"]], "STRPTIME": [[1342, "strptime"]], "SUBSTR": [[1342, "substr"]], "SUM": [[1336, "sum"]], "Schema": [[929, null]], "Selectors": [[930, null]], "Serialization": [[322, "serialization"], [925, "serialization"]], "Series": [[1319, null]], "Set Operations": [[1348, null]], "Set operations": [[930, "set-operations"]], "Strategy helpers": [[1350, "strategy-helpers"]], "String": [[326, "string"], [817, null], [1325, null], [1342, null]], "StringCache": [[821, "stringcache"]], "Struct": [[818, null], [1326, null]], "Style": [[325, null]], "TAN": [[1344, "tan"]], "TAND": [[1344, "tand"]], "TIMESTAMP": [[1342, "timestamp"]], "TRUNCATE": [[1349, "truncate"]], "TRY_CAST": [[1345, "try-cast"]], "Table Operations": [[1349, null]], "Temporal": [[326, "temporal"], [819, null], [1327, null], [1338, null], [1343, null]], "Testing": [[1350, null]], "Trigonometry": [[1344, null]], "Types": [[1345, null]], "UNION": [[1348, "union"]], "UNION ALL": [[1348, "union-all"]], "UNION BY NAME": [[1348, "union-by-name"]], "UNNEST": [[1337, "unnest"], [1349, "unnest"]], "UPPER": [[1342, "upper"]], "Use as a context manager": [[175, "use-as-a-context-manager"]], "Use as a decorator": [[175, "use-as-a-decorator"]], "VARIANCE": [[1336, "variance"]], "WHERE": [[1335, "where"]], "Warnings": [[327, "warnings"]], "Window": [[820, null]], "polars.Config.load": [[2, null]], "polars.Config.load_from_file": [[3, null]], "polars.Config.restore_defaults": [[4, null]], "polars.Config.save": [[5, null]], "polars.Config.save_to_file": [[6, null]], "polars.Config.set_ascii_tables": [[7, null]], "polars.Config.set_auto_structify": [[8, null]], "polars.Config.set_decimal_separator": [[9, null]], "polars.Config.set_float_precision": [[10, null]], "polars.Config.set_fmt_float": [[11, null]], "polars.Config.set_fmt_str_lengths": [[12, null]], "polars.Config.set_fmt_table_cell_list_len": [[13, null]], "polars.Config.set_streaming_chunk_size": [[14, null]], "polars.Config.set_tbl_cell_alignment": [[15, null]], "polars.Config.set_tbl_cell_numeric_alignment": [[16, null]], "polars.Config.set_tbl_cols": [[17, null]], "polars.Config.set_tbl_column_data_type_inline": [[18, null]], "polars.Config.set_tbl_dataframe_shape_below": [[19, null]], "polars.Config.set_tbl_formatting": [[20, null]], "polars.Config.set_tbl_hide_column_data_types": [[21, null]], "polars.Config.set_tbl_hide_column_names": [[22, null]], "polars.Config.set_tbl_hide_dataframe_shape": [[23, null]], "polars.Config.set_tbl_hide_dtype_separator": [[24, null]], "polars.Config.set_tbl_rows": [[25, null]], "polars.Config.set_tbl_width_chars": [[26, null]], "polars.Config.set_thousands_separator": [[27, null]], "polars.Config.set_trim_decimal_zeros": [[28, null]], "polars.Config.set_verbose": [[29, null]], "polars.Config.state": [[30, null]], "polars.CredentialProvider": [[31, null]], "polars.CredentialProviderAWS": [[32, null]], "polars.CredentialProviderAzure": [[33, null]], "polars.CredentialProviderGCP": [[34, null]], "polars.DataFrame.__array__": [[177, null]], "polars.DataFrame.__arrow_c_stream__": [[178, null]], "polars.DataFrame.__dataframe__": [[179, null]], "polars.DataFrame.__getitem__": [[180, null]], "polars.DataFrame.approx_n_unique": [[181, null]], "polars.DataFrame.bottom_k": [[182, null]], "polars.DataFrame.cast": [[183, null]], "polars.DataFrame.clear": [[184, null]], "polars.DataFrame.clone": [[185, null]], "polars.DataFrame.collect_schema": [[186, null]], "polars.DataFrame.columns": [[187, null]], "polars.DataFrame.corr": [[188, null]], "polars.DataFrame.count": [[189, null]], "polars.DataFrame.describe": [[190, null]], "polars.DataFrame.deserialize": [[191, null]], "polars.DataFrame.drop": [[192, null]], "polars.DataFrame.drop_in_place": [[193, null]], "polars.DataFrame.drop_nans": [[194, null]], "polars.DataFrame.drop_nulls": [[195, null]], "polars.DataFrame.dtypes": [[196, null]], "polars.DataFrame.equals": [[197, null]], "polars.DataFrame.estimated_size": [[198, null]], "polars.DataFrame.explode": [[199, null]], "polars.DataFrame.extend": [[200, null]], "polars.DataFrame.fill_nan": [[201, null]], "polars.DataFrame.fill_null": [[202, null]], "polars.DataFrame.filter": [[203, null]], "polars.DataFrame.flags": [[204, null]], "polars.DataFrame.fold": [[205, null]], "polars.DataFrame.gather_every": [[206, null]], "polars.DataFrame.get_column": [[207, null]], "polars.DataFrame.get_column_index": [[208, null]], "polars.DataFrame.get_columns": [[209, null]], "polars.DataFrame.glimpse": [[210, null]], "polars.DataFrame.group_by": [[211, null]], "polars.DataFrame.group_by_dynamic": [[212, null]], "polars.DataFrame.hash_rows": [[213, null]], "polars.DataFrame.head": [[214, null]], "polars.DataFrame.height": [[215, null]], "polars.DataFrame.hstack": [[216, null]], "polars.DataFrame.insert_column": [[217, null]], "polars.DataFrame.interpolate": [[218, null]], "polars.DataFrame.is_duplicated": [[219, null]], "polars.DataFrame.is_empty": [[220, null]], "polars.DataFrame.is_unique": [[221, null]], "polars.DataFrame.item": [[222, null]], "polars.DataFrame.iter_columns": [[223, null]], "polars.DataFrame.iter_rows": [[224, null]], "polars.DataFrame.iter_slices": [[225, null]], "polars.DataFrame.join": [[226, null]], "polars.DataFrame.join_asof": [[227, null]], "polars.DataFrame.join_where": [[228, null]], "polars.DataFrame.lazy": [[229, null]], "polars.DataFrame.limit": [[230, null]], "polars.DataFrame.map_rows": [[231, null]], "polars.DataFrame.max": [[232, null]], "polars.DataFrame.max_horizontal": [[233, null]], "polars.DataFrame.mean": [[234, null]], "polars.DataFrame.mean_horizontal": [[235, null]], "polars.DataFrame.median": [[236, null]], "polars.DataFrame.melt": [[237, null]], "polars.DataFrame.merge_sorted": [[238, null]], "polars.DataFrame.min": [[239, null]], "polars.DataFrame.min_horizontal": [[240, null]], "polars.DataFrame.n_chunks": [[241, null]], "polars.DataFrame.n_unique": [[242, null]], "polars.DataFrame.null_count": [[243, null]], "polars.DataFrame.partition_by": [[244, null]], "polars.DataFrame.pipe": [[245, null]], "polars.DataFrame.pivot": [[246, null]], "polars.DataFrame.product": [[247, null]], "polars.DataFrame.quantile": [[248, null]], "polars.DataFrame.rechunk": [[249, null]], "polars.DataFrame.rename": [[250, null]], "polars.DataFrame.replace_column": [[251, null]], "polars.DataFrame.reverse": [[252, null]], "polars.DataFrame.rolling": [[253, null]], "polars.DataFrame.row": [[254, null]], "polars.DataFrame.rows": [[255, null]], "polars.DataFrame.rows_by_key": [[256, null]], "polars.DataFrame.sample": [[257, null]], "polars.DataFrame.schema": [[258, null]], "polars.DataFrame.select": [[259, null]], "polars.DataFrame.select_seq": [[260, null]], "polars.DataFrame.serialize": [[261, null]], "polars.DataFrame.set_sorted": [[262, null]], "polars.DataFrame.shape": [[263, null]], "polars.DataFrame.shift": [[264, null]], "polars.DataFrame.shrink_to_fit": [[265, null]], "polars.DataFrame.slice": [[266, null]], "polars.DataFrame.sort": [[267, null]], "polars.DataFrame.sql": [[268, null]], "polars.DataFrame.std": [[269, null]], "polars.DataFrame.sum": [[270, null]], "polars.DataFrame.sum_horizontal": [[271, null]], "polars.DataFrame.tail": [[272, null]], "polars.DataFrame.to_arrow": [[273, null]], "polars.DataFrame.to_dict": [[274, null]], "polars.DataFrame.to_dicts": [[275, null]], "polars.DataFrame.to_dummies": [[276, null]], "polars.DataFrame.to_init_repr": [[277, null]], "polars.DataFrame.to_jax": [[278, null]], "polars.DataFrame.to_numpy": [[279, null]], "polars.DataFrame.to_pandas": [[280, null]], "polars.DataFrame.to_series": [[281, null]], "polars.DataFrame.to_struct": [[282, null]], "polars.DataFrame.to_torch": [[283, null]], "polars.DataFrame.top_k": [[284, null]], "polars.DataFrame.transpose": [[285, null]], "polars.DataFrame.unique": [[286, null]], "polars.DataFrame.unnest": [[287, null]], "polars.DataFrame.unpivot": [[288, null]], "polars.DataFrame.unstack": [[289, null]], "polars.DataFrame.update": [[290, null]], "polars.DataFrame.upsample": [[291, null]], "polars.DataFrame.var": [[292, null]], "polars.DataFrame.vstack": [[293, null]], "polars.DataFrame.width": [[294, null]], "polars.DataFrame.with_columns": [[295, null]], "polars.DataFrame.with_columns_seq": [[296, null]], "polars.DataFrame.with_row_count": [[297, null]], "polars.DataFrame.with_row_index": [[298, null]], "polars.DataFrame.write_avro": [[35, null]], "polars.DataFrame.write_clipboard": [[36, null]], "polars.DataFrame.write_csv": [[37, null]], "polars.DataFrame.write_database": [[38, null]], "polars.DataFrame.write_delta": [[39, null]], "polars.DataFrame.write_excel": [[40, null]], "polars.DataFrame.write_ipc": [[41, null]], "polars.DataFrame.write_ipc_stream": [[42, null]], "polars.DataFrame.write_json": [[43, null]], "polars.DataFrame.write_ndjson": [[44, null]], "polars.DataFrame.write_parquet": [[45, null]], "polars.Expr.abs": [[329, null]], "polars.Expr.add": [[330, null]], "polars.Expr.agg_groups": [[331, null]], "polars.Expr.alias": [[332, null]], "polars.Expr.all": [[333, null]], "polars.Expr.and_": [[334, null]], "polars.Expr.any": [[335, null]], "polars.Expr.append": [[336, null]], "polars.Expr.approx_n_unique": [[337, null]], "polars.Expr.arccos": [[338, null]], "polars.Expr.arccosh": [[339, null]], "polars.Expr.arcsin": [[340, null]], "polars.Expr.arcsinh": [[341, null]], "polars.Expr.arctan": [[342, null]], "polars.Expr.arctanh": [[343, null]], "polars.Expr.arg_max": [[344, null]], "polars.Expr.arg_min": [[345, null]], "polars.Expr.arg_sort": [[346, null]], "polars.Expr.arg_true": [[347, null]], "polars.Expr.arg_unique": [[348, null]], "polars.Expr.arr.all": [[349, null]], "polars.Expr.arr.any": [[350, null]], "polars.Expr.arr.arg_max": [[351, null]], "polars.Expr.arr.arg_min": [[352, null]], "polars.Expr.arr.contains": [[353, null]], "polars.Expr.arr.count_matches": [[354, null]], "polars.Expr.arr.explode": [[355, null]], "polars.Expr.arr.first": [[356, null]], "polars.Expr.arr.get": [[357, null]], "polars.Expr.arr.join": [[358, null]], "polars.Expr.arr.last": [[359, null]], "polars.Expr.arr.max": [[360, null]], "polars.Expr.arr.median": [[361, null]], "polars.Expr.arr.min": [[362, null]], "polars.Expr.arr.n_unique": [[363, null]], "polars.Expr.arr.reverse": [[364, null]], "polars.Expr.arr.shift": [[365, null]], "polars.Expr.arr.sort": [[366, null]], "polars.Expr.arr.std": [[367, null]], "polars.Expr.arr.sum": [[368, null]], "polars.Expr.arr.to_list": [[369, null]], "polars.Expr.arr.to_struct": [[370, null]], "polars.Expr.arr.unique": [[371, null]], "polars.Expr.arr.var": [[372, null]], "polars.Expr.backward_fill": [[373, null]], "polars.Expr.bin.contains": [[374, null]], "polars.Expr.bin.decode": [[375, null]], "polars.Expr.bin.encode": [[376, null]], "polars.Expr.bin.ends_with": [[377, null]], "polars.Expr.bin.reinterpret": [[378, null]], "polars.Expr.bin.size": [[379, null]], "polars.Expr.bin.starts_with": [[380, null]], "polars.Expr.bitwise_and": [[381, null]], "polars.Expr.bitwise_count_ones": [[382, null]], "polars.Expr.bitwise_count_zeros": [[383, null]], "polars.Expr.bitwise_leading_ones": [[384, null]], "polars.Expr.bitwise_leading_zeros": [[385, null]], "polars.Expr.bitwise_or": [[386, null]], "polars.Expr.bitwise_trailing_ones": [[387, null]], "polars.Expr.bitwise_trailing_zeros": [[388, null]], "polars.Expr.bitwise_xor": [[389, null]], "polars.Expr.bottom_k": [[390, null]], "polars.Expr.bottom_k_by": [[391, null]], "polars.Expr.cast": [[392, null]], "polars.Expr.cat.ends_with": [[393, null]], "polars.Expr.cat.get_categories": [[394, null]], "polars.Expr.cat.len_bytes": [[395, null]], "polars.Expr.cat.len_chars": [[396, null]], "polars.Expr.cat.starts_with": [[397, null]], "polars.Expr.cbrt": [[398, null]], "polars.Expr.ceil": [[399, null]], "polars.Expr.clip": [[400, null]], "polars.Expr.cos": [[401, null]], "polars.Expr.cosh": [[402, null]], "polars.Expr.cot": [[403, null]], "polars.Expr.count": [[404, null]], "polars.Expr.cum_count": [[405, null]], "polars.Expr.cum_max": [[406, null]], "polars.Expr.cum_min": [[407, null]], "polars.Expr.cum_prod": [[408, null]], "polars.Expr.cum_sum": [[409, null]], "polars.Expr.cumulative_eval": [[410, null]], "polars.Expr.cut": [[411, null]], "polars.Expr.degrees": [[412, null]], "polars.Expr.deserialize": [[413, null]], "polars.Expr.diff": [[414, null]], "polars.Expr.dot": [[415, null]], "polars.Expr.drop_nans": [[416, null]], "polars.Expr.drop_nulls": [[417, null]], "polars.Expr.dt.add_business_days": [[418, null]], "polars.Expr.dt.base_utc_offset": [[419, null]], "polars.Expr.dt.cast_time_unit": [[420, null]], "polars.Expr.dt.century": [[421, null]], "polars.Expr.dt.combine": [[422, null]], "polars.Expr.dt.convert_time_zone": [[423, null]], "polars.Expr.dt.date": [[424, null]], "polars.Expr.dt.datetime": [[425, null]], "polars.Expr.dt.day": [[426, null]], "polars.Expr.dt.dst_offset": [[427, null]], "polars.Expr.dt.epoch": [[428, null]], "polars.Expr.dt.hour": [[429, null]], "polars.Expr.dt.is_leap_year": [[430, null]], "polars.Expr.dt.iso_year": [[431, null]], "polars.Expr.dt.microsecond": [[432, null]], "polars.Expr.dt.millennium": [[433, null]], "polars.Expr.dt.millisecond": [[434, null]], "polars.Expr.dt.minute": [[435, null]], "polars.Expr.dt.month": [[436, null]], "polars.Expr.dt.month_end": [[437, null]], "polars.Expr.dt.month_start": [[438, null]], "polars.Expr.dt.nanosecond": [[439, null]], "polars.Expr.dt.offset_by": [[440, null]], "polars.Expr.dt.ordinal_day": [[441, null]], "polars.Expr.dt.quarter": [[442, null]], "polars.Expr.dt.replace": [[443, null]], "polars.Expr.dt.replace_time_zone": [[444, null]], "polars.Expr.dt.round": [[445, null]], "polars.Expr.dt.second": [[446, null]], "polars.Expr.dt.strftime": [[447, null]], "polars.Expr.dt.time": [[448, null]], "polars.Expr.dt.timestamp": [[449, null]], "polars.Expr.dt.to_string": [[450, null]], "polars.Expr.dt.total_days": [[451, null]], "polars.Expr.dt.total_hours": [[452, null]], "polars.Expr.dt.total_microseconds": [[453, null]], "polars.Expr.dt.total_milliseconds": [[454, null]], "polars.Expr.dt.total_minutes": [[455, null]], "polars.Expr.dt.total_nanoseconds": [[456, null]], "polars.Expr.dt.total_seconds": [[457, null]], "polars.Expr.dt.truncate": [[458, null]], "polars.Expr.dt.week": [[459, null]], "polars.Expr.dt.weekday": [[460, null]], "polars.Expr.dt.with_time_unit": [[461, null]], "polars.Expr.dt.year": [[462, null]], "polars.Expr.entropy": [[463, null]], "polars.Expr.eq": [[464, null]], "polars.Expr.eq_missing": [[465, null]], "polars.Expr.ewm_mean": [[466, null]], "polars.Expr.ewm_mean_by": [[467, null]], "polars.Expr.ewm_std": [[468, null]], "polars.Expr.ewm_var": [[469, null]], "polars.Expr.exclude": [[470, null]], "polars.Expr.exp": [[471, null]], "polars.Expr.explode": [[472, null]], "polars.Expr.extend_constant": [[473, null]], "polars.Expr.fill_nan": [[474, null]], "polars.Expr.fill_null": [[475, null]], "polars.Expr.filter": [[476, null]], "polars.Expr.first": [[477, null]], "polars.Expr.flatten": [[478, null]], "polars.Expr.floor": [[479, null]], "polars.Expr.floordiv": [[480, null]], "polars.Expr.forward_fill": [[481, null]], "polars.Expr.from_json": [[482, null]], "polars.Expr.gather": [[483, null]], "polars.Expr.gather_every": [[484, null]], "polars.Expr.ge": [[485, null]], "polars.Expr.get": [[486, null]], "polars.Expr.gt": [[487, null]], "polars.Expr.has_nulls": [[488, null]], "polars.Expr.hash": [[489, null]], "polars.Expr.head": [[490, null]], "polars.Expr.hist": [[491, null]], "polars.Expr.implode": [[492, null]], "polars.Expr.index_of": [[493, null]], "polars.Expr.inspect": [[494, null]], "polars.Expr.interpolate": [[495, null]], "polars.Expr.interpolate_by": [[496, null]], "polars.Expr.is_between": [[497, null]], "polars.Expr.is_duplicated": [[498, null]], "polars.Expr.is_finite": [[499, null]], "polars.Expr.is_first_distinct": [[500, null]], "polars.Expr.is_in": [[501, null]], "polars.Expr.is_infinite": [[502, null]], "polars.Expr.is_last_distinct": [[503, null]], "polars.Expr.is_nan": [[504, null]], "polars.Expr.is_not_nan": [[505, null]], "polars.Expr.is_not_null": [[506, null]], "polars.Expr.is_null": [[507, null]], "polars.Expr.is_unique": [[508, null]], "polars.Expr.kurtosis": [[509, null]], "polars.Expr.last": [[510, null]], "polars.Expr.le": [[511, null]], "polars.Expr.len": [[512, null]], "polars.Expr.limit": [[513, null]], "polars.Expr.list.all": [[514, null]], "polars.Expr.list.any": [[515, null]], "polars.Expr.list.arg_max": [[516, null]], "polars.Expr.list.arg_min": [[517, null]], "polars.Expr.list.concat": [[518, null]], "polars.Expr.list.contains": [[519, null]], "polars.Expr.list.count_matches": [[520, null]], "polars.Expr.list.diff": [[521, null]], "polars.Expr.list.drop_nulls": [[522, null]], "polars.Expr.list.eval": [[523, null]], "polars.Expr.list.explode": [[524, null]], "polars.Expr.list.first": [[525, null]], "polars.Expr.list.gather": [[526, null]], "polars.Expr.list.gather_every": [[527, null]], "polars.Expr.list.get": [[528, null]], "polars.Expr.list.head": [[529, null]], "polars.Expr.list.join": [[530, null]], "polars.Expr.list.last": [[531, null]], "polars.Expr.list.len": [[532, null]], "polars.Expr.list.max": [[533, null]], "polars.Expr.list.mean": [[534, null]], "polars.Expr.list.median": [[535, null]], "polars.Expr.list.min": [[536, null]], "polars.Expr.list.n_unique": [[537, null]], "polars.Expr.list.reverse": [[538, null]], "polars.Expr.list.sample": [[539, null]], "polars.Expr.list.set_difference": [[540, null]], "polars.Expr.list.set_intersection": [[541, null]], "polars.Expr.list.set_symmetric_difference": [[542, null]], "polars.Expr.list.set_union": [[543, null]], "polars.Expr.list.shift": [[544, null]], "polars.Expr.list.slice": [[545, null]], "polars.Expr.list.sort": [[546, null]], "polars.Expr.list.std": [[547, null]], "polars.Expr.list.sum": [[548, null]], "polars.Expr.list.tail": [[549, null]], "polars.Expr.list.to_array": [[550, null]], "polars.Expr.list.to_struct": [[551, null]], "polars.Expr.list.unique": [[552, null]], "polars.Expr.list.var": [[553, null]], "polars.Expr.log": [[554, null]], "polars.Expr.log10": [[555, null]], "polars.Expr.log1p": [[556, null]], "polars.Expr.lower_bound": [[557, null]], "polars.Expr.lt": [[558, null]], "polars.Expr.map_batches": [[559, null]], "polars.Expr.map_elements": [[560, null]], "polars.Expr.max": [[561, null]], "polars.Expr.mean": [[562, null]], "polars.Expr.median": [[563, null]], "polars.Expr.meta.eq": [[564, null]], "polars.Expr.meta.has_multiple_outputs": [[565, null]], "polars.Expr.meta.is_column": [[566, null]], "polars.Expr.meta.is_column_selection": [[567, null]], "polars.Expr.meta.is_literal": [[568, null]], "polars.Expr.meta.is_regex_projection": [[569, null]], "polars.Expr.meta.ne": [[570, null]], "polars.Expr.meta.output_name": [[571, null]], "polars.Expr.meta.pop": [[572, null]], "polars.Expr.meta.root_names": [[573, null]], "polars.Expr.meta.serialize": [[574, null]], "polars.Expr.meta.show_graph": [[575, null]], "polars.Expr.meta.tree_format": [[576, null]], "polars.Expr.meta.undo_aliases": [[577, null]], "polars.Expr.meta.write_json": [[578, null]], "polars.Expr.min": [[579, null]], "polars.Expr.mod": [[580, null]], "polars.Expr.mode": [[581, null]], "polars.Expr.mul": [[582, null]], "polars.Expr.n_unique": [[583, null]], "polars.Expr.name.keep": [[584, null]], "polars.Expr.name.map": [[585, null]], "polars.Expr.name.map_fields": [[586, null]], "polars.Expr.name.prefix": [[587, null]], "polars.Expr.name.prefix_fields": [[588, null]], "polars.Expr.name.suffix": [[589, null]], "polars.Expr.name.suffix_fields": [[590, null]], "polars.Expr.name.to_lowercase": [[591, null]], "polars.Expr.name.to_uppercase": [[592, null]], "polars.Expr.nan_max": [[593, null]], "polars.Expr.nan_min": [[594, null]], "polars.Expr.ne": [[595, null]], "polars.Expr.ne_missing": [[596, null]], "polars.Expr.neg": [[597, null]], "polars.Expr.not_": [[598, null]], "polars.Expr.null_count": [[599, null]], "polars.Expr.or_": [[600, null]], "polars.Expr.over": [[601, null]], "polars.Expr.pct_change": [[602, null]], "polars.Expr.peak_max": [[603, null]], "polars.Expr.peak_min": [[604, null]], "polars.Expr.pipe": [[605, null]], "polars.Expr.pow": [[606, null]], "polars.Expr.product": [[607, null]], "polars.Expr.qcut": [[608, null]], "polars.Expr.quantile": [[609, null]], "polars.Expr.radians": [[610, null]], "polars.Expr.rank": [[611, null]], "polars.Expr.rechunk": [[612, null]], "polars.Expr.reinterpret": [[613, null]], "polars.Expr.repeat_by": [[614, null]], "polars.Expr.replace": [[615, null]], "polars.Expr.replace_strict": [[616, null]], "polars.Expr.reshape": [[617, null]], "polars.Expr.reverse": [[618, null]], "polars.Expr.rle": [[619, null]], "polars.Expr.rle_id": [[620, null]], "polars.Expr.rolling": [[621, null]], "polars.Expr.rolling_map": [[622, null]], "polars.Expr.rolling_max": [[623, null]], "polars.Expr.rolling_max_by": [[624, null]], "polars.Expr.rolling_mean": [[625, null]], "polars.Expr.rolling_mean_by": [[626, null]], "polars.Expr.rolling_median": [[627, null]], "polars.Expr.rolling_median_by": [[628, null]], "polars.Expr.rolling_min": [[629, null]], "polars.Expr.rolling_min_by": [[630, null]], "polars.Expr.rolling_quantile": [[631, null]], "polars.Expr.rolling_quantile_by": [[632, null]], "polars.Expr.rolling_skew": [[633, null]], "polars.Expr.rolling_std": [[634, null]], "polars.Expr.rolling_std_by": [[635, null]], "polars.Expr.rolling_sum": [[636, null]], "polars.Expr.rolling_sum_by": [[637, null]], "polars.Expr.rolling_var": [[638, null]], "polars.Expr.rolling_var_by": [[639, null]], "polars.Expr.round": [[640, null]], "polars.Expr.round_sig_figs": [[641, null]], "polars.Expr.sample": [[642, null]], "polars.Expr.search_sorted": [[643, null]], "polars.Expr.set_sorted": [[644, null]], "polars.Expr.shift": [[645, null]], "polars.Expr.shrink_dtype": [[646, null]], "polars.Expr.shuffle": [[647, null]], "polars.Expr.sign": [[648, null]], "polars.Expr.sin": [[649, null]], "polars.Expr.sinh": [[650, null]], "polars.Expr.skew": [[651, null]], "polars.Expr.slice": [[652, null]], "polars.Expr.sort": [[653, null]], "polars.Expr.sort_by": [[654, null]], "polars.Expr.sqrt": [[655, null]], "polars.Expr.std": [[656, null]], "polars.Expr.str.concat": [[657, null]], "polars.Expr.str.contains": [[658, null]], "polars.Expr.str.contains_any": [[659, null]], "polars.Expr.str.count_matches": [[660, null]], "polars.Expr.str.decode": [[661, null]], "polars.Expr.str.encode": [[662, null]], "polars.Expr.str.ends_with": [[663, null]], "polars.Expr.str.escape_regex": [[664, null]], "polars.Expr.str.explode": [[665, null]], "polars.Expr.str.extract": [[666, null]], "polars.Expr.str.extract_all": [[667, null]], "polars.Expr.str.extract_groups": [[668, null]], "polars.Expr.str.extract_many": [[669, null]], "polars.Expr.str.find": [[670, null]], "polars.Expr.str.find_many": [[671, null]], "polars.Expr.str.head": [[672, null]], "polars.Expr.str.join": [[673, null]], "polars.Expr.str.json_decode": [[674, null]], "polars.Expr.str.json_path_match": [[675, null]], "polars.Expr.str.len_bytes": [[676, null]], "polars.Expr.str.len_chars": [[677, null]], "polars.Expr.str.normalize": [[678, null]], "polars.Expr.str.pad_end": [[679, null]], "polars.Expr.str.pad_start": [[680, null]], "polars.Expr.str.replace": [[681, null]], "polars.Expr.str.replace_all": [[682, null]], "polars.Expr.str.replace_many": [[683, null]], "polars.Expr.str.reverse": [[684, null]], "polars.Expr.str.slice": [[685, null]], "polars.Expr.str.split": [[686, null]], "polars.Expr.str.split_exact": [[687, null]], "polars.Expr.str.splitn": [[688, null]], "polars.Expr.str.starts_with": [[689, null]], "polars.Expr.str.strip_chars": [[690, null]], "polars.Expr.str.strip_chars_end": [[691, null]], "polars.Expr.str.strip_chars_start": [[692, null]], "polars.Expr.str.strip_prefix": [[693, null]], "polars.Expr.str.strip_suffix": [[694, null]], "polars.Expr.str.strptime": [[695, null]], "polars.Expr.str.tail": [[696, null]], "polars.Expr.str.to_date": [[697, null]], "polars.Expr.str.to_datetime": [[698, null]], "polars.Expr.str.to_decimal": [[699, null]], "polars.Expr.str.to_integer": [[700, null]], "polars.Expr.str.to_lowercase": [[701, null]], "polars.Expr.str.to_time": [[702, null]], "polars.Expr.str.to_titlecase": [[703, null]], "polars.Expr.str.to_uppercase": [[704, null]], "polars.Expr.str.zfill": [[705, null]], "polars.Expr.struct.field": [[706, null]], "polars.Expr.struct.json_encode": [[707, null]], "polars.Expr.struct.rename_fields": [[708, null]], "polars.Expr.struct.unnest": [[709, null]], "polars.Expr.struct.with_fields": [[710, null]], "polars.Expr.sub": [[711, null]], "polars.Expr.sum": [[712, null]], "polars.Expr.tail": [[713, null]], "polars.Expr.tan": [[714, null]], "polars.Expr.tanh": [[715, null]], "polars.Expr.to_physical": [[716, null]], "polars.Expr.top_k": [[717, null]], "polars.Expr.top_k_by": [[718, null]], "polars.Expr.truediv": [[719, null]], "polars.Expr.unique": [[720, null]], "polars.Expr.unique_counts": [[721, null]], "polars.Expr.upper_bound": [[722, null]], "polars.Expr.value_counts": [[723, null]], "polars.Expr.var": [[724, null]], "polars.Expr.where": [[725, null]], "polars.Expr.xor": [[726, null]], "polars.LazyFrame.approx_n_unique": [[825, null]], "polars.LazyFrame.bottom_k": [[826, null]], "polars.LazyFrame.cache": [[827, null]], "polars.LazyFrame.cast": [[828, null]], "polars.LazyFrame.clear": [[829, null]], "polars.LazyFrame.clone": [[830, null]], "polars.LazyFrame.collect": [[831, null]], "polars.LazyFrame.collect_async": [[832, null]], "polars.LazyFrame.collect_schema": [[833, null]], "polars.LazyFrame.columns": [[834, null]], "polars.LazyFrame.count": [[835, null]], "polars.LazyFrame.describe": [[836, null]], "polars.LazyFrame.deserialize": [[837, null]], "polars.LazyFrame.drop": [[838, null]], "polars.LazyFrame.drop_nans": [[839, null]], "polars.LazyFrame.drop_nulls": [[840, null]], "polars.LazyFrame.dtypes": [[841, null]], "polars.LazyFrame.explain": [[842, null]], "polars.LazyFrame.explode": [[843, null]], "polars.LazyFrame.fill_nan": [[844, null]], "polars.LazyFrame.fill_null": [[845, null]], "polars.LazyFrame.filter": [[846, null]], "polars.LazyFrame.first": [[847, null]], "polars.LazyFrame.gather_every": [[848, null]], "polars.LazyFrame.group_by": [[849, null]], "polars.LazyFrame.group_by_dynamic": [[850, null]], "polars.LazyFrame.head": [[851, null]], "polars.LazyFrame.inspect": [[852, null]], "polars.LazyFrame.interpolate": [[853, null]], "polars.LazyFrame.join": [[854, null]], "polars.LazyFrame.join_asof": [[855, null]], "polars.LazyFrame.join_where": [[856, null]], "polars.LazyFrame.last": [[857, null]], "polars.LazyFrame.lazy": [[858, null]], "polars.LazyFrame.limit": [[859, null]], "polars.LazyFrame.map_batches": [[860, null]], "polars.LazyFrame.max": [[861, null]], "polars.LazyFrame.mean": [[862, null]], "polars.LazyFrame.median": [[863, null]], "polars.LazyFrame.melt": [[864, null]], "polars.LazyFrame.merge_sorted": [[865, null]], "polars.LazyFrame.min": [[866, null]], "polars.LazyFrame.null_count": [[867, null]], "polars.LazyFrame.pipe": [[868, null]], "polars.LazyFrame.profile": [[869, null]], "polars.LazyFrame.quantile": [[870, null]], "polars.LazyFrame.rename": [[871, null]], "polars.LazyFrame.reverse": [[872, null]], "polars.LazyFrame.rolling": [[873, null]], "polars.LazyFrame.schema": [[874, null]], "polars.LazyFrame.select": [[875, null]], "polars.LazyFrame.select_seq": [[876, null]], "polars.LazyFrame.serialize": [[877, null]], "polars.LazyFrame.set_sorted": [[878, null]], "polars.LazyFrame.shift": [[879, null]], "polars.LazyFrame.show_graph": [[880, null]], "polars.LazyFrame.sink_csv": [[46, null]], "polars.LazyFrame.sink_ipc": [[47, null]], "polars.LazyFrame.sink_ndjson": [[48, null]], "polars.LazyFrame.sink_parquet": [[49, null]], "polars.LazyFrame.slice": [[881, null]], "polars.LazyFrame.sort": [[882, null]], "polars.LazyFrame.sql": [[883, null]], "polars.LazyFrame.std": [[884, null]], "polars.LazyFrame.sum": [[885, null]], "polars.LazyFrame.tail": [[886, null]], "polars.LazyFrame.top_k": [[887, null]], "polars.LazyFrame.unique": [[888, null]], "polars.LazyFrame.unnest": [[889, null]], "polars.LazyFrame.unpivot": [[890, null]], "polars.LazyFrame.update": [[891, null]], "polars.LazyFrame.var": [[892, null]], "polars.LazyFrame.width": [[893, null]], "polars.LazyFrame.with_columns": [[894, null]], "polars.LazyFrame.with_columns_seq": [[895, null]], "polars.LazyFrame.with_context": [[896, null]], "polars.LazyFrame.with_row_count": [[897, null]], "polars.LazyFrame.with_row_index": [[898, null]], "polars.SQLContext.execute": [[1328, null]], "polars.SQLContext.execute_global": [[1329, null]], "polars.SQLContext.register": [[1330, null]], "polars.SQLContext.register_globals": [[1331, null]], "polars.SQLContext.register_many": [[1332, null]], "polars.SQLContext.tables": [[1333, null]], "polars.SQLContext.unregister": [[1334, null]], "polars.Series.__array__": [[932, null]], "polars.Series.__arrow_c_stream__": [[933, null]], "polars.Series.__getitem__": [[934, null]], "polars.Series.abs": [[935, null]], "polars.Series.alias": [[936, null]], "polars.Series.all": [[937, null]], "polars.Series.any": [[938, null]], "polars.Series.append": [[939, null]], "polars.Series.approx_n_unique": [[940, null]], "polars.Series.arccos": [[941, null]], "polars.Series.arccosh": [[942, null]], "polars.Series.arcsin": [[943, null]], "polars.Series.arcsinh": [[944, null]], "polars.Series.arctan": [[945, null]], "polars.Series.arctanh": [[946, null]], "polars.Series.arg_max": [[947, null]], "polars.Series.arg_min": [[948, null]], "polars.Series.arg_sort": [[949, null]], "polars.Series.arg_true": [[950, null]], "polars.Series.arg_unique": [[951, null]], "polars.Series.arr.all": [[952, null]], "polars.Series.arr.any": [[953, null]], "polars.Series.arr.arg_max": [[954, null]], "polars.Series.arr.arg_min": [[955, null]], "polars.Series.arr.contains": [[956, null]], "polars.Series.arr.count_matches": [[957, null]], "polars.Series.arr.explode": [[958, null]], "polars.Series.arr.first": [[959, null]], "polars.Series.arr.get": [[960, null]], "polars.Series.arr.join": [[961, null]], "polars.Series.arr.last": [[962, null]], "polars.Series.arr.max": [[963, null]], "polars.Series.arr.median": [[964, null]], "polars.Series.arr.min": [[965, null]], "polars.Series.arr.n_unique": [[966, null]], "polars.Series.arr.reverse": [[967, null]], "polars.Series.arr.shift": [[968, null]], "polars.Series.arr.sort": [[969, null]], "polars.Series.arr.std": [[970, null]], "polars.Series.arr.sum": [[971, null]], "polars.Series.arr.to_list": [[972, null]], "polars.Series.arr.to_struct": [[973, null]], "polars.Series.arr.unique": [[974, null]], "polars.Series.arr.var": [[975, null]], "polars.Series.bin.contains": [[976, null]], "polars.Series.bin.decode": [[977, null]], "polars.Series.bin.encode": [[978, null]], "polars.Series.bin.ends_with": [[979, null]], "polars.Series.bin.reinterpret": [[980, null]], "polars.Series.bin.size": [[981, null]], "polars.Series.bin.starts_with": [[982, null]], "polars.Series.bitwise_and": [[983, null]], "polars.Series.bitwise_count_ones": [[984, null]], "polars.Series.bitwise_count_zeros": [[985, null]], "polars.Series.bitwise_leading_ones": [[986, null]], "polars.Series.bitwise_leading_zeros": [[987, null]], "polars.Series.bitwise_or": [[988, null]], "polars.Series.bitwise_trailing_ones": [[989, null]], "polars.Series.bitwise_trailing_zeros": [[990, null]], "polars.Series.bitwise_xor": [[991, null]], "polars.Series.bottom_k": [[992, null]], "polars.Series.cast": [[993, null]], "polars.Series.cat.ends_with": [[994, null]], "polars.Series.cat.get_categories": [[995, null]], "polars.Series.cat.is_local": [[996, null]], "polars.Series.cat.len_bytes": [[997, null]], "polars.Series.cat.len_chars": [[998, null]], "polars.Series.cat.starts_with": [[999, null]], "polars.Series.cat.to_local": [[1000, null]], "polars.Series.cat.uses_lexical_ordering": [[1001, null]], "polars.Series.cbrt": [[1002, null]], "polars.Series.ceil": [[1003, null]], "polars.Series.chunk_lengths": [[1004, null]], "polars.Series.clear": [[1005, null]], "polars.Series.clip": [[1006, null]], "polars.Series.clone": [[1007, null]], "polars.Series.cos": [[1008, null]], "polars.Series.cosh": [[1009, null]], "polars.Series.cot": [[1010, null]], "polars.Series.count": [[1011, null]], "polars.Series.cum_count": [[1012, null]], "polars.Series.cum_max": [[1013, null]], "polars.Series.cum_min": [[1014, null]], "polars.Series.cum_prod": [[1015, null]], "polars.Series.cum_sum": [[1016, null]], "polars.Series.cumulative_eval": [[1017, null]], "polars.Series.cut": [[1018, null]], "polars.Series.describe": [[1019, null]], "polars.Series.diff": [[1020, null]], "polars.Series.dot": [[1021, null]], "polars.Series.drop_nans": [[1022, null]], "polars.Series.drop_nulls": [[1023, null]], "polars.Series.dt.add_business_days": [[1024, null]], "polars.Series.dt.base_utc_offset": [[1025, null]], "polars.Series.dt.cast_time_unit": [[1026, null]], "polars.Series.dt.century": [[1027, null]], "polars.Series.dt.combine": [[1028, null]], "polars.Series.dt.convert_time_zone": [[1029, null]], "polars.Series.dt.date": [[1030, null]], "polars.Series.dt.datetime": [[1031, null]], "polars.Series.dt.day": [[1032, null]], "polars.Series.dt.dst_offset": [[1033, null]], "polars.Series.dt.epoch": [[1034, null]], "polars.Series.dt.hour": [[1035, null]], "polars.Series.dt.is_leap_year": [[1036, null]], "polars.Series.dt.iso_year": [[1037, null]], "polars.Series.dt.max": [[1038, null]], "polars.Series.dt.mean": [[1039, null]], "polars.Series.dt.median": [[1040, null]], "polars.Series.dt.microsecond": [[1041, null]], "polars.Series.dt.millennium": [[1042, null]], "polars.Series.dt.millisecond": [[1043, null]], "polars.Series.dt.min": [[1044, null]], "polars.Series.dt.minute": [[1045, null]], "polars.Series.dt.month": [[1046, null]], "polars.Series.dt.month_end": [[1047, null]], "polars.Series.dt.month_start": [[1048, null]], "polars.Series.dt.nanosecond": [[1049, null]], "polars.Series.dt.offset_by": [[1050, null]], "polars.Series.dt.ordinal_day": [[1051, null]], "polars.Series.dt.quarter": [[1052, null]], "polars.Series.dt.replace": [[1053, null]], "polars.Series.dt.replace_time_zone": [[1054, null]], "polars.Series.dt.round": [[1055, null]], "polars.Series.dt.second": [[1056, null]], "polars.Series.dt.strftime": [[1057, null]], "polars.Series.dt.time": [[1058, null]], "polars.Series.dt.timestamp": [[1059, null]], "polars.Series.dt.to_string": [[1060, null]], "polars.Series.dt.total_days": [[1061, null]], "polars.Series.dt.total_hours": [[1062, null]], "polars.Series.dt.total_microseconds": [[1063, null]], "polars.Series.dt.total_milliseconds": [[1064, null]], "polars.Series.dt.total_minutes": [[1065, null]], "polars.Series.dt.total_nanoseconds": [[1066, null]], "polars.Series.dt.total_seconds": [[1067, null]], "polars.Series.dt.truncate": [[1068, null]], "polars.Series.dt.week": [[1069, null]], "polars.Series.dt.weekday": [[1070, null]], "polars.Series.dt.with_time_unit": [[1071, null]], "polars.Series.dt.year": [[1072, null]], "polars.Series.dtype": [[1073, null]], "polars.Series.entropy": [[1074, null]], "polars.Series.eq": [[1075, null]], "polars.Series.eq_missing": [[1076, null]], "polars.Series.equals": [[1077, null]], "polars.Series.estimated_size": [[1078, null]], "polars.Series.ewm_mean": [[1079, null]], "polars.Series.ewm_mean_by": [[1080, null]], "polars.Series.ewm_std": [[1081, null]], "polars.Series.ewm_var": [[1082, null]], "polars.Series.exp": [[1083, null]], "polars.Series.explode": [[1084, null]], "polars.Series.extend": [[1085, null]], "polars.Series.extend_constant": [[1086, null]], "polars.Series.fill_nan": [[1087, null]], "polars.Series.fill_null": [[1088, null]], "polars.Series.filter": [[1089, null]], "polars.Series.first": [[1090, null]], "polars.Series.flags": [[1091, null]], "polars.Series.floor": [[1092, null]], "polars.Series.gather": [[1093, null]], "polars.Series.gather_every": [[1094, null]], "polars.Series.ge": [[1095, null]], "polars.Series.get_chunks": [[1096, null]], "polars.Series.gt": [[1097, null]], "polars.Series.has_nulls": [[1098, null]], "polars.Series.has_validity": [[1099, null]], "polars.Series.hash": [[1100, null]], "polars.Series.head": [[1101, null]], "polars.Series.hist": [[1102, null]], "polars.Series.implode": [[1103, null]], "polars.Series.index_of": [[1104, null]], "polars.Series.interpolate": [[1105, null]], "polars.Series.interpolate_by": [[1106, null]], "polars.Series.is_between": [[1107, null]], "polars.Series.is_duplicated": [[1108, null]], "polars.Series.is_empty": [[1109, null]], "polars.Series.is_finite": [[1110, null]], "polars.Series.is_first_distinct": [[1111, null]], "polars.Series.is_in": [[1112, null]], "polars.Series.is_infinite": [[1113, null]], "polars.Series.is_last_distinct": [[1114, null]], "polars.Series.is_nan": [[1115, null]], "polars.Series.is_not_nan": [[1116, null]], "polars.Series.is_not_null": [[1117, null]], "polars.Series.is_null": [[1118, null]], "polars.Series.is_sorted": [[1119, null]], "polars.Series.is_unique": [[1120, null]], "polars.Series.item": [[1121, null]], "polars.Series.kurtosis": [[1122, null]], "polars.Series.last": [[1123, null]], "polars.Series.le": [[1124, null]], "polars.Series.len": [[1125, null]], "polars.Series.limit": [[1126, null]], "polars.Series.list.all": [[1127, null]], "polars.Series.list.any": [[1128, null]], "polars.Series.list.arg_max": [[1129, null]], "polars.Series.list.arg_min": [[1130, null]], "polars.Series.list.concat": [[1131, null]], "polars.Series.list.contains": [[1132, null]], "polars.Series.list.count_matches": [[1133, null]], "polars.Series.list.diff": [[1134, null]], "polars.Series.list.drop_nulls": [[1135, null]], "polars.Series.list.eval": [[1136, null]], "polars.Series.list.explode": [[1137, null]], "polars.Series.list.first": [[1138, null]], "polars.Series.list.gather": [[1139, null]], "polars.Series.list.gather_every": [[1140, null]], "polars.Series.list.get": [[1141, null]], "polars.Series.list.head": [[1142, null]], "polars.Series.list.join": [[1143, null]], "polars.Series.list.last": [[1144, null]], "polars.Series.list.len": [[1145, null]], "polars.Series.list.max": [[1146, null]], "polars.Series.list.mean": [[1147, null]], "polars.Series.list.median": [[1148, null]], "polars.Series.list.min": [[1149, null]], "polars.Series.list.n_unique": [[1150, null]], "polars.Series.list.reverse": [[1151, null]], "polars.Series.list.sample": [[1152, null]], "polars.Series.list.set_difference": [[1153, null]], "polars.Series.list.set_intersection": [[1154, null]], "polars.Series.list.set_symmetric_difference": [[1155, null]], "polars.Series.list.set_union": [[1156, null]], "polars.Series.list.shift": [[1157, null]], "polars.Series.list.slice": [[1158, null]], "polars.Series.list.sort": [[1159, null]], "polars.Series.list.std": [[1160, null]], "polars.Series.list.sum": [[1161, null]], "polars.Series.list.tail": [[1162, null]], "polars.Series.list.to_array": [[1163, null]], "polars.Series.list.to_struct": [[1164, null]], "polars.Series.list.unique": [[1165, null]], "polars.Series.list.var": [[1166, null]], "polars.Series.log": [[1167, null]], "polars.Series.log10": [[1168, null]], "polars.Series.log1p": [[1169, null]], "polars.Series.lower_bound": [[1170, null]], "polars.Series.lt": [[1171, null]], "polars.Series.map_elements": [[1172, null]], "polars.Series.max": [[1173, null]], "polars.Series.mean": [[1174, null]], "polars.Series.median": [[1175, null]], "polars.Series.min": [[1176, null]], "polars.Series.mode": [[1177, null]], "polars.Series.n_chunks": [[1178, null]], "polars.Series.n_unique": [[1179, null]], "polars.Series.name": [[1180, null]], "polars.Series.nan_max": [[1181, null]], "polars.Series.nan_min": [[1182, null]], "polars.Series.ne": [[1183, null]], "polars.Series.ne_missing": [[1184, null]], "polars.Series.new_from_index": [[1185, null]], "polars.Series.not_": [[1186, null]], "polars.Series.null_count": [[1187, null]], "polars.Series.pct_change": [[1188, null]], "polars.Series.peak_max": [[1189, null]], "polars.Series.peak_min": [[1190, null]], "polars.Series.pow": [[1191, null]], "polars.Series.product": [[1192, null]], "polars.Series.qcut": [[1193, null]], "polars.Series.quantile": [[1194, null]], "polars.Series.rank": [[1195, null]], "polars.Series.rechunk": [[1196, null]], "polars.Series.reinterpret": [[1197, null]], "polars.Series.rename": [[1198, null]], "polars.Series.replace": [[1199, null]], "polars.Series.replace_strict": [[1200, null]], "polars.Series.reshape": [[1201, null]], "polars.Series.reverse": [[1202, null]], "polars.Series.rle": [[1203, null]], "polars.Series.rle_id": [[1204, null]], "polars.Series.rolling_map": [[1205, null]], "polars.Series.rolling_max": [[1206, null]], "polars.Series.rolling_mean": [[1207, null]], "polars.Series.rolling_median": [[1208, null]], "polars.Series.rolling_min": [[1209, null]], "polars.Series.rolling_quantile": [[1210, null]], "polars.Series.rolling_skew": [[1211, null]], "polars.Series.rolling_std": [[1212, null]], "polars.Series.rolling_sum": [[1213, null]], "polars.Series.rolling_var": [[1214, null]], "polars.Series.round": [[1215, null]], "polars.Series.round_sig_figs": [[1216, null]], "polars.Series.sample": [[1217, null]], "polars.Series.scatter": [[1218, null]], "polars.Series.search_sorted": [[1219, null]], "polars.Series.set": [[1220, null]], "polars.Series.set_sorted": [[1221, null]], "polars.Series.shape": [[1222, null]], "polars.Series.shift": [[1223, null]], "polars.Series.shrink_dtype": [[1224, null]], "polars.Series.shrink_to_fit": [[1225, null]], "polars.Series.shuffle": [[1226, null]], "polars.Series.sign": [[1227, null]], "polars.Series.sin": [[1228, null]], "polars.Series.sinh": [[1229, null]], "polars.Series.skew": [[1230, null]], "polars.Series.slice": [[1231, null]], "polars.Series.sort": [[1232, null]], "polars.Series.sqrt": [[1233, null]], "polars.Series.std": [[1234, null]], "polars.Series.str.concat": [[1235, null]], "polars.Series.str.contains": [[1236, null]], "polars.Series.str.contains_any": [[1237, null]], "polars.Series.str.count_matches": [[1238, null]], "polars.Series.str.decode": [[1239, null]], "polars.Series.str.encode": [[1240, null]], "polars.Series.str.ends_with": [[1241, null]], "polars.Series.str.escape_regex": [[1242, null]], "polars.Series.str.explode": [[1243, null]], "polars.Series.str.extract": [[1244, null]], "polars.Series.str.extract_all": [[1245, null]], "polars.Series.str.extract_groups": [[1246, null]], "polars.Series.str.extract_many": [[1247, null]], "polars.Series.str.find": [[1248, null]], "polars.Series.str.find_many": [[1249, null]], "polars.Series.str.head": [[1250, null]], "polars.Series.str.join": [[1251, null]], "polars.Series.str.json_decode": [[1252, null]], "polars.Series.str.json_path_match": [[1253, null]], "polars.Series.str.len_bytes": [[1254, null]], "polars.Series.str.len_chars": [[1255, null]], "polars.Series.str.normalize": [[1256, null]], "polars.Series.str.pad_end": [[1257, null]], "polars.Series.str.pad_start": [[1258, null]], "polars.Series.str.replace": [[1259, null]], "polars.Series.str.replace_all": [[1260, null]], "polars.Series.str.replace_many": [[1261, null]], "polars.Series.str.reverse": [[1262, null]], "polars.Series.str.slice": [[1263, null]], "polars.Series.str.split": [[1264, null]], "polars.Series.str.split_exact": [[1265, null]], "polars.Series.str.splitn": [[1266, null]], "polars.Series.str.starts_with": [[1267, null]], "polars.Series.str.strip_chars": [[1268, null]], "polars.Series.str.strip_chars_end": [[1269, null]], "polars.Series.str.strip_chars_start": [[1270, null]], "polars.Series.str.strip_prefix": [[1271, null]], "polars.Series.str.strip_suffix": [[1272, null]], "polars.Series.str.strptime": [[1273, null]], "polars.Series.str.tail": [[1274, null]], "polars.Series.str.to_date": [[1275, null]], "polars.Series.str.to_datetime": [[1276, null]], "polars.Series.str.to_decimal": [[1277, null]], "polars.Series.str.to_integer": [[1278, null]], "polars.Series.str.to_lowercase": [[1279, null]], "polars.Series.str.to_time": [[1280, null]], "polars.Series.str.to_titlecase": [[1281, null]], "polars.Series.str.to_uppercase": [[1282, null]], "polars.Series.str.zfill": [[1283, null]], "polars.Series.struct.field": [[1284, null]], "polars.Series.struct.fields": [[1285, null]], "polars.Series.struct.json_encode": [[1286, null]], "polars.Series.struct.rename_fields": [[1287, null]], "polars.Series.struct.schema": [[1288, null]], "polars.Series.struct.unnest": [[1289, null]], "polars.Series.sum": [[1290, null]], "polars.Series.tail": [[1291, null]], "polars.Series.tan": [[1292, null]], "polars.Series.tanh": [[1293, null]], "polars.Series.to_arrow": [[1294, null]], "polars.Series.to_dummies": [[1295, null]], "polars.Series.to_frame": [[1296, null]], "polars.Series.to_init_repr": [[1297, null]], "polars.Series.to_jax": [[1298, null]], "polars.Series.to_list": [[1299, null]], "polars.Series.to_numpy": [[1300, null]], "polars.Series.to_pandas": [[1301, null]], "polars.Series.to_physical": [[1302, null]], "polars.Series.to_torch": [[1303, null]], "polars.Series.top_k": [[1304, null]], "polars.Series.unique": [[1305, null]], "polars.Series.unique_counts": [[1306, null]], "polars.Series.upper_bound": [[1307, null]], "polars.Series.value_counts": [[1308, null]], "polars.Series.var": [[1309, null]], "polars.Series.zip_with": [[1310, null]], "polars.StringCache": [[50, null]], "polars.align_frames": [[51, null]], "polars.all": [[727, null]], "polars.all_horizontal": [[728, null]], "polars.any": [[729, null]], "polars.any_horizontal": [[730, null]], "polars.api.register_dataframe_namespace": [[52, null]], "polars.api.register_expr_namespace": [[53, null]], "polars.api.register_lazyframe_namespace": [[54, null]], "polars.api.register_series_namespace": [[55, null]], "polars.approx_n_unique": [[731, null]], "polars.arange": [[732, null]], "polars.arctan2": [[733, null]], "polars.arctan2d": [[734, null]], "polars.arg_sort_by": [[735, null]], "polars.arg_where": [[736, null]], "polars.build_info": [[56, null]], "polars.business_day_count": [[737, null]], "polars.coalesce": [[738, null]], "polars.col": [[806, null]], "polars.collect_all": [[57, null]], "polars.collect_all_async": [[58, null]], "polars.concat": [[59, null]], "polars.concat_arr": [[739, null]], "polars.concat_list": [[740, null]], "polars.concat_str": [[741, null]], "polars.corr": [[742, null]], "polars.count": [[743, null]], "polars.cov": [[744, null]], "polars.cum_count": [[745, null]], "polars.cum_fold": [[746, null]], "polars.cum_reduce": [[747, null]], "polars.cum_sum": [[748, null]], "polars.cum_sum_horizontal": [[749, null]], "polars.dataframe.group_by.GroupBy.__iter__": [[299, null]], "polars.dataframe.group_by.GroupBy.agg": [[300, null]], "polars.dataframe.group_by.GroupBy.all": [[301, null]], "polars.dataframe.group_by.GroupBy.count": [[302, null]], "polars.dataframe.group_by.GroupBy.first": [[303, null]], "polars.dataframe.group_by.GroupBy.head": [[304, null]], "polars.dataframe.group_by.GroupBy.last": [[305, null]], "polars.dataframe.group_by.GroupBy.len": [[306, null]], "polars.dataframe.group_by.GroupBy.map_groups": [[307, null]], "polars.dataframe.group_by.GroupBy.max": [[308, null]], "polars.dataframe.group_by.GroupBy.mean": [[309, null]], "polars.dataframe.group_by.GroupBy.median": [[310, null]], "polars.dataframe.group_by.GroupBy.min": [[311, null]], "polars.dataframe.group_by.GroupBy.n_unique": [[312, null]], "polars.dataframe.group_by.GroupBy.quantile": [[313, null]], "polars.dataframe.group_by.GroupBy.sum": [[314, null]], "polars.dataframe.group_by.GroupBy.tail": [[315, null]], "polars.datatypes.Array": [[60, null]], "polars.datatypes.Binary": [[61, null]], "polars.datatypes.Boolean": [[62, null]], "polars.datatypes.Categorical": [[63, null]], "polars.datatypes.DataType": [[64, null]], "polars.datatypes.Date": [[65, null]], "polars.datatypes.Datetime": [[66, null]], "polars.datatypes.Decimal": [[67, null]], "polars.datatypes.Duration": [[68, null]], "polars.datatypes.Enum": [[69, null]], "polars.datatypes.Field": [[70, null]], "polars.datatypes.Float32": [[71, null]], "polars.datatypes.Float64": [[72, null]], "polars.datatypes.Int128": [[73, null]], "polars.datatypes.Int16": [[74, null]], "polars.datatypes.Int32": [[75, null]], "polars.datatypes.Int64": [[76, null]], "polars.datatypes.Int8": [[77, null]], "polars.datatypes.List": [[78, null]], "polars.datatypes.Null": [[79, null]], "polars.datatypes.Object": [[80, null]], "polars.datatypes.String": [[81, null]], "polars.datatypes.Struct": [[82, null]], "polars.datatypes.Time": [[83, null]], "polars.datatypes.UInt16": [[84, null]], "polars.datatypes.UInt32": [[85, null]], "polars.datatypes.UInt64": [[86, null]], "polars.datatypes.UInt8": [[87, null]], "polars.datatypes.Unknown": [[88, null]], "polars.datatypes.Utf8": [[89, null]], "polars.date": [[750, null]], "polars.date_range": [[751, null]], "polars.date_ranges": [[752, null]], "polars.datetime": [[753, null]], "polars.datetime_range": [[754, null]], "polars.datetime_ranges": [[755, null]], "polars.disable_string_cache": [[90, null]], "polars.duration": [[756, null]], "polars.element": [[757, null]], "polars.enable_string_cache": [[91, null]], "polars.escape_regex": [[92, null]], "polars.exceptions.CategoricalRemappingWarning": [[93, null]], "polars.exceptions.ChronoFormatWarning": [[94, null]], "polars.exceptions.ColumnNotFoundError": [[95, null]], "polars.exceptions.ComputeError": [[96, null]], "polars.exceptions.CustomUFuncWarning": [[97, null]], "polars.exceptions.DataOrientationWarning": [[98, null]], "polars.exceptions.DuplicateError": [[99, null]], "polars.exceptions.InvalidOperationError": [[100, null]], "polars.exceptions.MapWithoutReturnDtypeWarning": [[101, null]], "polars.exceptions.ModuleUpgradeRequiredError": [[102, null]], "polars.exceptions.NoDataError": [[103, null]], "polars.exceptions.NoRowsReturnedError": [[104, null]], "polars.exceptions.OutOfBoundsError": [[105, null]], "polars.exceptions.PanicException": [[106, null]], "polars.exceptions.ParameterCollisionError": [[107, null]], "polars.exceptions.PerformanceWarning": [[108, null]], "polars.exceptions.PolarsError": [[109, null]], "polars.exceptions.PolarsInefficientMapWarning": [[110, null]], "polars.exceptions.PolarsWarning": [[111, null]], "polars.exceptions.RowsError": [[112, null]], "polars.exceptions.SQLInterfaceError": [[113, null]], "polars.exceptions.SQLSyntaxError": [[114, null]], "polars.exceptions.SchemaError": [[115, null]], "polars.exceptions.SchemaFieldNotFoundError": [[116, null]], "polars.exceptions.ShapeError": [[117, null]], "polars.exceptions.StringCacheMismatchError": [[118, null]], "polars.exceptions.StructFieldNotFoundError": [[119, null]], "polars.exceptions.TooManyRowsReturnedError": [[120, null]], "polars.exceptions.UnstableWarning": [[121, null]], "polars.exceptions.UnsuitableSQLError": [[122, null]], "polars.exclude": [[758, null]], "polars.first": [[759, null]], "polars.fold": [[760, null]], "polars.format": [[761, null]], "polars.from_arrow": [[123, null]], "polars.from_dataframe": [[124, null]], "polars.from_dict": [[125, null]], "polars.from_dicts": [[126, null]], "polars.from_epoch": [[762, null]], "polars.from_numpy": [[127, null]], "polars.from_pandas": [[128, null]], "polars.from_records": [[129, null]], "polars.from_repr": [[130, null]], "polars.get_index_type": [[131, null]], "polars.groups": [[763, null]], "polars.head": [[764, null]], "polars.implode": [[765, null]], "polars.int_range": [[766, null]], "polars.int_ranges": [[767, null]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[132, null]], "polars.json_normalize": [[133, null]], "polars.last": [[768, null]], "polars.lazyframe.engine_config.GPUEngine": [[899, null]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[900, null]], "polars.lazyframe.group_by.LazyGroupBy.all": [[901, null]], "polars.lazyframe.group_by.LazyGroupBy.count": [[902, null]], "polars.lazyframe.group_by.LazyGroupBy.first": [[903, null]], "polars.lazyframe.group_by.LazyGroupBy.head": [[904, null]], "polars.lazyframe.group_by.LazyGroupBy.last": [[905, null]], "polars.lazyframe.group_by.LazyGroupBy.len": [[906, null]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[907, null]], "polars.lazyframe.group_by.LazyGroupBy.max": [[908, null]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[909, null]], "polars.lazyframe.group_by.LazyGroupBy.median": [[910, null]], "polars.lazyframe.group_by.LazyGroupBy.min": [[911, null]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[912, null]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[913, null]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[914, null]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[915, null]], "polars.lazyframe.in_process.InProcessQuery.cancel": [[916, null]], "polars.lazyframe.in_process.InProcessQuery.fetch": [[917, null]], "polars.lazyframe.in_process.InProcessQuery.fetch_blocking": [[918, null]], "polars.len": [[769, null]], "polars.lit": [[770, null]], "polars.map_batches": [[771, null]], "polars.map_groups": [[772, null]], "polars.max": [[773, null]], "polars.max_horizontal": [[774, null]], "polars.mean": [[775, null]], "polars.mean_horizontal": [[776, null]], "polars.median": [[777, null]], "polars.min": [[778, null]], "polars.min_horizontal": [[779, null]], "polars.n_unique": [[780, null]], "polars.nth": [[781, null]], "polars.ones": [[782, null]], "polars.quantile": [[783, null]], "polars.read_avro": [[134, null]], "polars.read_clipboard": [[135, null]], "polars.read_csv": [[136, null]], "polars.read_csv_batched": [[137, null]], "polars.read_database": [[138, null]], "polars.read_database_uri": [[139, null]], "polars.read_delta": [[140, null]], "polars.read_excel": [[141, null]], "polars.read_ipc": [[142, null]], "polars.read_ipc_schema": [[143, null]], "polars.read_ipc_stream": [[144, null]], "polars.read_json": [[145, null]], "polars.read_ndjson": [[146, null]], "polars.read_ods": [[147, null]], "polars.read_parquet": [[148, null]], "polars.read_parquet_schema": [[149, null]], "polars.reduce": [[784, null]], "polars.repeat": [[785, null]], "polars.rolling_corr": [[786, null]], "polars.rolling_cov": [[787, null]], "polars.scan_csv": [[150, null]], "polars.scan_delta": [[151, null]], "polars.scan_iceberg": [[152, null]], "polars.scan_ipc": [[153, null]], "polars.scan_ndjson": [[154, null]], "polars.scan_parquet": [[155, null]], "polars.scan_pyarrow_dataset": [[156, null]], "polars.select": [[788, null]], "polars.set_random_seed": [[157, null]], "polars.show_versions": [[158, null]], "polars.sql": [[789, null]], "polars.sql_expr": [[790, null]], "polars.std": [[791, null]], "polars.struct": [[792, null]], "polars.sum": [[793, null]], "polars.sum_horizontal": [[794, null]], "polars.tail": [[795, null]], "polars.testing.assert_frame_equal": [[159, null]], "polars.testing.assert_frame_not_equal": [[160, null]], "polars.testing.assert_series_equal": [[161, null]], "polars.testing.assert_series_not_equal": [[162, null]], "polars.testing.parametric.column": [[163, null]], "polars.testing.parametric.columns": [[164, null]], "polars.testing.parametric.create_list_strategy": [[165, null]], "polars.testing.parametric.dataframes": [[166, null]], "polars.testing.parametric.dtypes": [[167, null]], "polars.testing.parametric.lists": [[168, null]], "polars.testing.parametric.load_profile": [[169, null]], "polars.testing.parametric.series": [[170, null]], "polars.testing.parametric.set_profile": [[171, null]], "polars.thread_pool_size": [[172, null]], "polars.threadpool_size": [[173, null]], "polars.time": [[796, null]], "polars.time_range": [[797, null]], "polars.time_ranges": [[798, null]], "polars.using_string_cache": [[174, null]], "polars.var": [[799, null]], "polars.when": [[800, null]], "polars.zeros": [[801, null]]}, "docnames": ["index", "reference/api", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.CredentialProvider", "reference/api/polars.CredentialProviderAWS", "reference/api/polars.CredentialProviderAzure", "reference/api/polars.CredentialProviderGCP", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_clipboard", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.StringCache", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.datatypes.Array", "reference/api/polars.datatypes.Binary", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Decimal", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Enum", "reference/api/polars.datatypes.Field", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int128", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.String", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.escape_regex", "reference/api/polars.exceptions.CategoricalRemappingWarning", "reference/api/polars.exceptions.ChronoFormatWarning", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.CustomUFuncWarning", "reference/api/polars.exceptions.DataOrientationWarning", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning", "reference/api/polars.exceptions.ModuleUpgradeRequiredError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.OutOfBoundsError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.ParameterCollisionError", "reference/api/polars.exceptions.PerformanceWarning", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsInefficientMapWarning", "reference/api/polars.exceptions.PolarsWarning", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SQLInterfaceError", "reference/api/polars.exceptions.SQLSyntaxError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StringCacheMismatchError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.exceptions.UnstableWarning", "reference/api/polars.exceptions.UnsuitableSQLError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.json_normalize", "reference/api/polars.read_avro", "reference/api/polars.read_clipboard", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.dtypes", "reference/api/polars.testing.parametric.lists", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.thread_pool_size", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__array__", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.__getitem__", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.collect_schema", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.deserialize", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nans", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.join_where", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.serialize", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.sql", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_jax", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.to_torch", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unpivot", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/dataframe/style", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.median", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.n_unique", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.std", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.arr.var", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.reinterpret", "reference/expressions/api/polars.Expr.bin.size", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bitwise_and", "reference/expressions/api/polars.Expr.bitwise_count_ones", "reference/expressions/api/polars.Expr.bitwise_count_zeros", "reference/expressions/api/polars.Expr.bitwise_leading_ones", "reference/expressions/api/polars.Expr.bitwise_leading_zeros", "reference/expressions/api/polars.Expr.bitwise_or", "reference/expressions/api/polars.Expr.bitwise_trailing_ones", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros", "reference/expressions/api/polars.Expr.bitwise_xor", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.bottom_k_by", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.ends_with", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.len_bytes", "reference/expressions/api/polars.Expr.cat.len_chars", "reference/expressions/api/polars.Expr.cat.starts_with", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.deserialize", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.add_business_days", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.century", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.millennium", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_mean_by", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.has_nulls", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.index_of", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.interpolate_by", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.gather_every", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.median", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.n_unique", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.std", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.list.var", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_column", "reference/expressions/api/polars.Expr.meta.is_column_selection", "reference/expressions/api/polars.Expr.meta.is_literal", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.serialize", "reference/expressions/api/polars.Expr.meta.show_graph", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.map_fields", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.prefix_fields", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.suffix_fields", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.neg", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.replace_strict", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_max_by", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_mean_by", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_median_by", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_min_by", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_quantile_by", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_std_by", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_sum_by", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.rolling_var_by", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.escape_regex", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.extract_many", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.find_many", "reference/expressions/api/polars.Expr.str.head", "reference/expressions/api/polars.Expr.str.join", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.normalize", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.tail", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.struct.unnest", "reference/expressions/api/polars.Expr.struct.with_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.top_k_by", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.business_day_count", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_arr", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.len", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.mean_horizontal", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.nth", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.collect_schema", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.describe", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nans", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.join_where", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.sql", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.unpivot", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/gpu_engine", "reference/lazyframe/group_by", "reference/lazyframe/in_process", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/metadata", "reference/plugins", "reference/schema/index", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.__array__", "reference/series/api/polars.Series.__arrow_c_stream__", "reference/series/api/polars.Series.__getitem__", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.approx_n_unique", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.median", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.n_unique", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.std", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.arr.var", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.reinterpret", "reference/series/api/polars.Series.bin.size", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bitwise_and", "reference/series/api/polars.Series.bitwise_count_ones", "reference/series/api/polars.Series.bitwise_count_zeros", "reference/series/api/polars.Series.bitwise_leading_ones", "reference/series/api/polars.Series.bitwise_leading_zeros", "reference/series/api/polars.Series.bitwise_or", "reference/series/api/polars.Series.bitwise_trailing_ones", "reference/series/api/polars.Series.bitwise_trailing_zeros", "reference/series/api/polars.Series.bitwise_xor", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.ends_with", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.len_bytes", "reference/series/api/polars.Series.cat.len_chars", "reference/series/api/polars.Series.cat.starts_with", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.count", "reference/series/api/polars.Series.cum_count", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.add_business_days", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.century", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.millennium", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.eq", "reference/series/api/polars.Series.eq_missing", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_mean_by", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.first", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.ge", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.gt", "reference/series/api/polars.Series.has_nulls", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.index_of", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.interpolate_by", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.last", "reference/series/api/polars.Series.le", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.gather_every", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.median", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.n_unique", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.std", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.list.var", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.lt", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.ne", "reference/series/api/polars.Series.ne_missing", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.pow", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.replace_strict", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.escape_regex", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.extract_many", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.find_many", "reference/series/api/polars.Series.str.head", "reference/series/api/polars.Series.str.join", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.normalize", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.tail", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_jax", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.to_torch", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/operators", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql/api/polars.SQLContext.execute", "reference/sql/api/polars.SQLContext.execute_global", "reference/sql/api/polars.SQLContext.register", "reference/sql/api/polars.SQLContext.register_globals", "reference/sql/api/polars.SQLContext.register_many", "reference/sql/api/polars.SQLContext.tables", "reference/sql/api/polars.SQLContext.unregister", "reference/sql/clauses", "reference/sql/functions/aggregate", "reference/sql/functions/array", "reference/sql/functions/bitwise", "reference/sql/functions/conditional", "reference/sql/functions/index", "reference/sql/functions/math", "reference/sql/functions/string", "reference/sql/functions/temporal", "reference/sql/functions/trigonometry", "reference/sql/functions/types", "reference/sql/index", "reference/sql/python_api", "reference/sql/set_operations", "reference/sql/table_operations", "reference/testing"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.CredentialProvider.rst", "reference/api/polars.CredentialProviderAWS.rst", "reference/api/polars.CredentialProviderAzure.rst", "reference/api/polars.CredentialProviderGCP.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_clipboard.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.datatypes.Array.rst", "reference/api/polars.datatypes.Binary.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Decimal.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Enum.rst", "reference/api/polars.datatypes.Field.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int128.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.String.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.escape_regex.rst", "reference/api/polars.exceptions.CategoricalRemappingWarning.rst", "reference/api/polars.exceptions.ChronoFormatWarning.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.CustomUFuncWarning.rst", "reference/api/polars.exceptions.DataOrientationWarning.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning.rst", "reference/api/polars.exceptions.ModuleUpgradeRequiredError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.OutOfBoundsError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.ParameterCollisionError.rst", "reference/api/polars.exceptions.PerformanceWarning.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsInefficientMapWarning.rst", "reference/api/polars.exceptions.PolarsWarning.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SQLInterfaceError.rst", "reference/api/polars.exceptions.SQLSyntaxError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StringCacheMismatchError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.exceptions.UnstableWarning.rst", "reference/api/polars.exceptions.UnsuitableSQLError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.json_normalize.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_clipboard.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.dtypes.rst", "reference/api/polars.testing.parametric.lists.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.thread_pool_size.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__array__.rst", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.__getitem__.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.collect_schema.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.deserialize.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nans.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.join_where.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.serialize.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.sql.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_jax.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.to_torch.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unpivot.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/dataframe/style.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.median.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.n_unique.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.std.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.arr.var.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.reinterpret.rst", "reference/expressions/api/polars.Expr.bin.size.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bitwise_and.rst", "reference/expressions/api/polars.Expr.bitwise_count_ones.rst", "reference/expressions/api/polars.Expr.bitwise_count_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_leading_ones.rst", "reference/expressions/api/polars.Expr.bitwise_leading_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_or.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_ones.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_xor.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.bottom_k_by.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.ends_with.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.len_bytes.rst", "reference/expressions/api/polars.Expr.cat.len_chars.rst", "reference/expressions/api/polars.Expr.cat.starts_with.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.deserialize.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.add_business_days.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.century.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.millennium.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_mean_by.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.has_nulls.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.index_of.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.interpolate_by.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.gather_every.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.median.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.n_unique.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.std.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.list.var.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_column.rst", "reference/expressions/api/polars.Expr.meta.is_column_selection.rst", "reference/expressions/api/polars.Expr.meta.is_literal.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.serialize.rst", "reference/expressions/api/polars.Expr.meta.show_graph.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.map_fields.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.prefix_fields.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.suffix_fields.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.neg.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.replace_strict.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_max_by.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_mean_by.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_median_by.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_min_by.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_quantile_by.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_std_by.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_sum_by.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.rolling_var_by.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.escape_regex.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.extract_many.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.find_many.rst", "reference/expressions/api/polars.Expr.str.head.rst", "reference/expressions/api/polars.Expr.str.join.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.normalize.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.tail.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.struct.unnest.rst", "reference/expressions/api/polars.Expr.struct.with_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.top_k_by.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.business_day_count.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_arr.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.len.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.mean_horizontal.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.nth.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.collect_schema.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.describe.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nans.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.join_where.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.sql.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.unpivot.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/gpu_engine.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/in_process.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/metadata.rst", "reference/plugins.rst", "reference/schema/index.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.__array__.rst", "reference/series/api/polars.Series.__arrow_c_stream__.rst", "reference/series/api/polars.Series.__getitem__.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.approx_n_unique.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.median.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.n_unique.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.std.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.arr.var.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.reinterpret.rst", "reference/series/api/polars.Series.bin.size.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bitwise_and.rst", "reference/series/api/polars.Series.bitwise_count_ones.rst", "reference/series/api/polars.Series.bitwise_count_zeros.rst", "reference/series/api/polars.Series.bitwise_leading_ones.rst", "reference/series/api/polars.Series.bitwise_leading_zeros.rst", "reference/series/api/polars.Series.bitwise_or.rst", "reference/series/api/polars.Series.bitwise_trailing_ones.rst", "reference/series/api/polars.Series.bitwise_trailing_zeros.rst", "reference/series/api/polars.Series.bitwise_xor.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.ends_with.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.len_bytes.rst", "reference/series/api/polars.Series.cat.len_chars.rst", "reference/series/api/polars.Series.cat.starts_with.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.count.rst", "reference/series/api/polars.Series.cum_count.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.add_business_days.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.century.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.millennium.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.eq.rst", "reference/series/api/polars.Series.eq_missing.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_mean_by.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.first.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.ge.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.gt.rst", "reference/series/api/polars.Series.has_nulls.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.index_of.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.interpolate_by.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.last.rst", "reference/series/api/polars.Series.le.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.gather_every.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.median.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.n_unique.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.std.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.list.var.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.lt.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.ne.rst", "reference/series/api/polars.Series.ne_missing.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.pow.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.replace_strict.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.escape_regex.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.extract_many.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.find_many.rst", "reference/series/api/polars.Series.str.head.rst", "reference/series/api/polars.Series.str.join.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.normalize.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.tail.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_jax.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.to_torch.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/operators.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql/api/polars.SQLContext.execute.rst", "reference/sql/api/polars.SQLContext.execute_global.rst", "reference/sql/api/polars.SQLContext.register.rst", "reference/sql/api/polars.SQLContext.register_globals.rst", "reference/sql/api/polars.SQLContext.register_many.rst", "reference/sql/api/polars.SQLContext.tables.rst", "reference/sql/api/polars.SQLContext.unregister.rst", "reference/sql/clauses.rst", "reference/sql/functions/aggregate.rst", "reference/sql/functions/array.rst", "reference/sql/functions/bitwise.rst", "reference/sql/functions/conditional.rst", "reference/sql/functions/index.rst", "reference/sql/functions/math.rst", "reference/sql/functions/string.rst", "reference/sql/functions/temporal.rst", "reference/sql/functions/trigonometry.rst", "reference/sql/functions/types.rst", "reference/sql/index.rst", "reference/sql/python_api.rst", "reference/sql/set_operations.rst", "reference/sql/table_operations.rst", "reference/testing.rst"], "indexentries": {"__array__() (polars.dataframe method)": [[177, "polars.DataFrame.__array__", false]], "__array__() (polars.series method)": [[932, "polars.Series.__array__", false]], "__arrow_c_stream__() (polars.dataframe method)": [[178, "polars.DataFrame.__arrow_c_stream__", false]], "__arrow_c_stream__() (polars.series method)": [[933, "polars.Series.__arrow_c_stream__", false]], "__dataframe__() (polars.dataframe method)": [[179, "polars.DataFrame.__dataframe__", false]], "__enter__() (polars.sqlcontext method)": [[1347, "polars.SQLContext.__enter__", false]], "__exit__() (polars.sqlcontext method)": [[1347, "polars.SQLContext.__exit__", false]], "__getitem__() (polars.dataframe method)": [[180, "polars.DataFrame.__getitem__", false]], "__getitem__() (polars.series method)": [[934, "polars.Series.__getitem__", false]], "__init__() (polars.credentialprovider method)": [[31, "polars.CredentialProvider.__init__", false]], "__init__() (polars.credentialprovideraws method)": [[32, "polars.CredentialProviderAWS.__init__", false]], "__init__() (polars.credentialproviderazure method)": [[33, "polars.CredentialProviderAzure.__init__", false]], "__init__() (polars.credentialprovidergcp method)": [[34, "polars.CredentialProviderGCP.__init__", false]], "__init__() (polars.datatypes.array method)": [[60, "polars.datatypes.Array.__init__", false]], "__init__() (polars.datatypes.binary method)": [[61, "polars.datatypes.Binary.__init__", false]], "__init__() (polars.datatypes.boolean method)": [[62, "polars.datatypes.Boolean.__init__", false]], "__init__() (polars.datatypes.categorical method)": [[63, "polars.datatypes.Categorical.__init__", false]], "__init__() (polars.datatypes.datatype method)": [[64, "polars.datatypes.DataType.__init__", false]], "__init__() (polars.datatypes.date method)": [[65, "polars.datatypes.Date.__init__", false]], "__init__() (polars.datatypes.datetime method)": [[66, "polars.datatypes.Datetime.__init__", false]], "__init__() (polars.datatypes.decimal method)": [[67, "polars.datatypes.Decimal.__init__", false]], "__init__() (polars.datatypes.duration method)": [[68, "polars.datatypes.Duration.__init__", false]], "__init__() (polars.datatypes.enum method)": [[69, "polars.datatypes.Enum.__init__", false]], "__init__() (polars.datatypes.field method)": [[70, "polars.datatypes.Field.__init__", false]], "__init__() (polars.datatypes.float32 method)": [[71, "polars.datatypes.Float32.__init__", false]], "__init__() (polars.datatypes.float64 method)": [[72, "polars.datatypes.Float64.__init__", false]], "__init__() (polars.datatypes.int128 method)": [[73, "polars.datatypes.Int128.__init__", false]], "__init__() (polars.datatypes.int16 method)": [[74, "polars.datatypes.Int16.__init__", false]], "__init__() (polars.datatypes.int32 method)": [[75, "polars.datatypes.Int32.__init__", false]], "__init__() (polars.datatypes.int64 method)": [[76, "polars.datatypes.Int64.__init__", false]], "__init__() (polars.datatypes.int8 method)": [[77, "polars.datatypes.Int8.__init__", false]], "__init__() (polars.datatypes.list method)": [[78, "polars.datatypes.List.__init__", false]], "__init__() (polars.datatypes.null method)": [[79, "polars.datatypes.Null.__init__", false]], "__init__() (polars.datatypes.object method)": [[80, "polars.datatypes.Object.__init__", false]], "__init__() (polars.datatypes.string method)": [[81, "polars.datatypes.String.__init__", false]], "__init__() (polars.datatypes.struct method)": [[82, "polars.datatypes.Struct.__init__", false]], "__init__() (polars.datatypes.time method)": [[83, "polars.datatypes.Time.__init__", false]], "__init__() (polars.datatypes.uint16 method)": [[84, "polars.datatypes.UInt16.__init__", false]], "__init__() (polars.datatypes.uint32 method)": [[85, "polars.datatypes.UInt32.__init__", false]], "__init__() (polars.datatypes.uint64 method)": [[86, "polars.datatypes.UInt64.__init__", false]], "__init__() (polars.datatypes.uint8 method)": [[87, "polars.datatypes.UInt8.__init__", false]], "__init__() (polars.datatypes.unknown method)": [[88, "polars.datatypes.Unknown.__init__", false]], "__init__() (polars.lazyframe.engine_config.gpuengine method)": [[899, "polars.lazyframe.engine_config.GPUEngine.__init__", false]], "__init__() (polars.sqlcontext method)": [[1347, "polars.SQLContext.__init__", false]], "__init__() (polars.stringcache method)": [[50, "polars.StringCache.__init__", false]], "__init__() (polars.testing.parametric.column method)": [[163, "polars.testing.parametric.column.__init__", false]], "__iter__() (polars.dataframe.group_by.groupby method)": [[299, "polars.dataframe.group_by.GroupBy.__iter__", false]], "abs() (polars.expr method)": [[329, "polars.Expr.abs", false]], "abs() (polars.series method)": [[935, "polars.Series.abs", false]], "add() (polars.expr method)": [[330, "polars.Expr.add", false]], "add_business_days() (polars.expr.dt method)": [[418, "polars.Expr.dt.add_business_days", false]], "add_business_days() (polars.series.dt method)": [[1024, "polars.Series.dt.add_business_days", false]], "agg() (polars.dataframe.group_by.groupby method)": [[300, "polars.dataframe.group_by.GroupBy.agg", false]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[900, "polars.lazyframe.group_by.LazyGroupBy.agg", false]], "agg_groups() (polars.expr method)": [[331, "polars.Expr.agg_groups", false]], "alias() (polars.expr method)": [[332, "polars.Expr.alias", false]], "alias() (polars.series method)": [[936, "polars.Series.alias", false]], "align_frames() (in module polars)": [[51, "polars.align_frames", false]], "all() (in module polars)": [[727, "polars.all", false]], "all() (in module polars.selectors)": [[930, "polars.selectors.all", false]], "all() (polars.dataframe.group_by.groupby method)": [[301, "polars.dataframe.group_by.GroupBy.all", false]], "all() (polars.expr method)": [[333, "polars.Expr.all", false]], "all() (polars.expr.arr method)": [[349, "polars.Expr.arr.all", false]], "all() (polars.expr.list method)": [[514, "polars.Expr.list.all", false]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[901, "polars.lazyframe.group_by.LazyGroupBy.all", false]], "all() (polars.series method)": [[937, "polars.Series.all", false]], "all() (polars.series.arr method)": [[952, "polars.Series.arr.all", false]], "all() (polars.series.list method)": [[1127, "polars.Series.list.all", false]], "all_horizontal() (in module polars)": [[728, "polars.all_horizontal", false]], "alpha() (in module polars.selectors)": [[930, "polars.selectors.alpha", false]], "alphanumeric() (in module polars.selectors)": [[930, "polars.selectors.alphanumeric", false]], "and_() (polars.expr method)": [[334, "polars.Expr.and_", false]], "any() (in module polars)": [[729, "polars.any", false]], "any() (polars.expr method)": [[335, "polars.Expr.any", false]], "any() (polars.expr.arr method)": [[350, "polars.Expr.arr.any", false]], "any() (polars.expr.list method)": [[515, "polars.Expr.list.any", false]], "any() (polars.series method)": [[938, "polars.Series.any", false]], "any() (polars.series.arr method)": [[953, "polars.Series.arr.any", false]], "any() (polars.series.list method)": [[1128, "polars.Series.list.any", false]], "any_horizontal() (in module polars)": [[730, "polars.any_horizontal", false]], "append() (polars.expr method)": [[336, "polars.Expr.append", false]], "append() (polars.series method)": [[939, "polars.Series.append", false]], "approx_n_unique() (in module polars)": [[731, "polars.approx_n_unique", false]], "approx_n_unique() (polars.dataframe method)": [[181, "polars.DataFrame.approx_n_unique", false]], "approx_n_unique() (polars.expr method)": [[337, "polars.Expr.approx_n_unique", false]], "approx_n_unique() (polars.lazyframe method)": [[825, "polars.LazyFrame.approx_n_unique", false]], "approx_n_unique() (polars.series method)": [[940, "polars.Series.approx_n_unique", false]], "arange() (in module polars)": [[732, "polars.arange", false]], "arccos() (polars.expr method)": [[338, "polars.Expr.arccos", false]], "arccos() (polars.series method)": [[941, "polars.Series.arccos", false]], "arccosh() (polars.expr method)": [[339, "polars.Expr.arccosh", false]], "arccosh() (polars.series method)": [[942, "polars.Series.arccosh", false]], "arcsin() (polars.expr method)": [[340, "polars.Expr.arcsin", false]], "arcsin() (polars.series method)": [[943, "polars.Series.arcsin", false]], "arcsinh() (polars.expr method)": [[341, "polars.Expr.arcsinh", false]], "arcsinh() (polars.series method)": [[944, "polars.Series.arcsinh", false]], "arctan() (polars.expr method)": [[342, "polars.Expr.arctan", false]], "arctan() (polars.series method)": [[945, "polars.Series.arctan", false]], "arctan2() (in module polars)": [[733, "polars.arctan2", false]], "arctan2d() (in module polars)": [[734, "polars.arctan2d", false]], "arctanh() (polars.expr method)": [[343, "polars.Expr.arctanh", false]], "arctanh() (polars.series method)": [[946, "polars.Series.arctanh", false]], "arg_max() (polars.expr method)": [[344, "polars.Expr.arg_max", false]], "arg_max() (polars.expr.arr method)": [[351, "polars.Expr.arr.arg_max", false]], "arg_max() (polars.expr.list method)": [[516, "polars.Expr.list.arg_max", false]], "arg_max() (polars.series method)": [[947, "polars.Series.arg_max", false]], "arg_max() (polars.series.arr method)": [[954, "polars.Series.arr.arg_max", false]], "arg_max() (polars.series.list method)": [[1129, "polars.Series.list.arg_max", false]], "arg_min() (polars.expr method)": [[345, "polars.Expr.arg_min", false]], "arg_min() (polars.expr.arr method)": [[352, "polars.Expr.arr.arg_min", false]], "arg_min() (polars.expr.list method)": [[517, "polars.Expr.list.arg_min", false]], "arg_min() (polars.series method)": [[948, "polars.Series.arg_min", false]], "arg_min() (polars.series.arr method)": [[955, "polars.Series.arr.arg_min", false]], "arg_min() (polars.series.list method)": [[1130, "polars.Series.list.arg_min", false]], "arg_sort() (polars.expr method)": [[346, "polars.Expr.arg_sort", false]], "arg_sort() (polars.series method)": [[949, "polars.Series.arg_sort", false]], "arg_sort_by() (in module polars)": [[735, "polars.arg_sort_by", false]], "arg_true() (polars.expr method)": [[347, "polars.Expr.arg_true", false]], "arg_true() (polars.series method)": [[950, "polars.Series.arg_true", false]], "arg_unique() (polars.expr method)": [[348, "polars.Expr.arg_unique", false]], "arg_unique() (polars.series method)": [[951, "polars.Series.arg_unique", false]], "arg_where() (in module polars)": [[736, "polars.arg_where", false]], "array (class in polars.datatypes)": [[60, "polars.datatypes.Array", false]], "assert_frame_equal() (in module polars.testing)": [[159, "polars.testing.assert_frame_equal", false]], "assert_frame_not_equal() (in module polars.testing)": [[160, "polars.testing.assert_frame_not_equal", false]], "assert_series_equal() (in module polars.testing)": [[161, "polars.testing.assert_series_equal", false]], "assert_series_not_equal() (in module polars.testing)": [[162, "polars.testing.assert_series_not_equal", false]], "backward_fill() (polars.expr method)": [[373, "polars.Expr.backward_fill", false]], "base_utc_offset() (polars.expr.dt method)": [[419, "polars.Expr.dt.base_utc_offset", false]], "base_utc_offset() (polars.series.dt method)": [[1025, "polars.Series.dt.base_utc_offset", false]], "binary (class in polars.datatypes)": [[61, "polars.datatypes.Binary", false]], "binary() (in module polars.selectors)": [[930, "polars.selectors.binary", false]], "bitwise_and() (polars.expr method)": [[381, "polars.Expr.bitwise_and", false]], "bitwise_and() (polars.series method)": [[983, "polars.Series.bitwise_and", false]], "bitwise_count_ones() (polars.expr method)": [[382, "polars.Expr.bitwise_count_ones", false]], "bitwise_count_ones() (polars.series method)": [[984, "polars.Series.bitwise_count_ones", false]], "bitwise_count_zeros() (polars.expr method)": [[383, "polars.Expr.bitwise_count_zeros", false]], "bitwise_count_zeros() (polars.series method)": [[985, "polars.Series.bitwise_count_zeros", false]], "bitwise_leading_ones() (polars.expr method)": [[384, "polars.Expr.bitwise_leading_ones", false]], "bitwise_leading_ones() (polars.series method)": [[986, "polars.Series.bitwise_leading_ones", false]], "bitwise_leading_zeros() (polars.expr method)": [[385, "polars.Expr.bitwise_leading_zeros", false]], "bitwise_leading_zeros() (polars.series method)": [[987, "polars.Series.bitwise_leading_zeros", false]], "bitwise_or() (polars.expr method)": [[386, "polars.Expr.bitwise_or", false]], "bitwise_or() (polars.series method)": [[988, "polars.Series.bitwise_or", false]], "bitwise_trailing_ones() (polars.expr method)": [[387, "polars.Expr.bitwise_trailing_ones", false]], "bitwise_trailing_ones() (polars.series method)": [[989, "polars.Series.bitwise_trailing_ones", false]], "bitwise_trailing_zeros() (polars.expr method)": [[388, "polars.Expr.bitwise_trailing_zeros", false]], "bitwise_trailing_zeros() (polars.series method)": [[990, "polars.Series.bitwise_trailing_zeros", false]], "bitwise_xor() (polars.expr method)": [[389, "polars.Expr.bitwise_xor", false]], "bitwise_xor() (polars.series method)": [[991, "polars.Series.bitwise_xor", false]], "boolean (class in polars.datatypes)": [[62, "polars.datatypes.Boolean", false]], "boolean() (in module polars.selectors)": [[930, "polars.selectors.boolean", false]], "bottom_k() (polars.dataframe method)": [[182, "polars.DataFrame.bottom_k", false]], "bottom_k() (polars.expr method)": [[390, "polars.Expr.bottom_k", false]], "bottom_k() (polars.lazyframe method)": [[826, "polars.LazyFrame.bottom_k", false]], "bottom_k() (polars.series method)": [[992, "polars.Series.bottom_k", false]], "bottom_k_by() (polars.expr method)": [[391, "polars.Expr.bottom_k_by", false]], "build_info() (in module polars)": [[56, "polars.build_info", false]], "business_day_count() (in module polars)": [[737, "polars.business_day_count", false]], "by_dtype() (in module polars.selectors)": [[930, "polars.selectors.by_dtype", false]], "by_index() (in module polars.selectors)": [[930, "polars.selectors.by_index", false]], "by_name() (in module polars.selectors)": [[930, "polars.selectors.by_name", false]], "cache() (polars.lazyframe method)": [[827, "polars.LazyFrame.cache", false]], "cancel() (polars.lazyframe.in_process.inprocessquery method)": [[916, "polars.lazyframe.in_process.InProcessQuery.cancel", false]], "cast() (polars.dataframe method)": [[183, "polars.DataFrame.cast", false]], "cast() (polars.expr method)": [[392, "polars.Expr.cast", false]], "cast() (polars.lazyframe method)": [[828, "polars.LazyFrame.cast", false]], "cast() (polars.series method)": [[993, "polars.Series.cast", false]], "cast_time_unit() (polars.expr.dt method)": [[420, "polars.Expr.dt.cast_time_unit", false]], "cast_time_unit() (polars.series.dt method)": [[1026, "polars.Series.dt.cast_time_unit", false]], "categorical (class in polars.datatypes)": [[63, "polars.datatypes.Categorical", false]], "categorical() (in module polars.selectors)": [[930, "polars.selectors.categorical", false]], "categoricalremappingwarning": [[93, "polars.exceptions.CategoricalRemappingWarning", false]], "cbrt() (polars.expr method)": [[398, "polars.Expr.cbrt", false]], "cbrt() (polars.series method)": [[1002, "polars.Series.cbrt", false]], "ceil() (polars.expr method)": [[399, "polars.Expr.ceil", false]], "ceil() (polars.series method)": [[1003, "polars.Series.ceil", false]], "century() (polars.expr.dt method)": [[421, "polars.Expr.dt.century", false]], "century() (polars.series.dt method)": [[1027, "polars.Series.dt.century", false]], "chronoformatwarning": [[94, "polars.exceptions.ChronoFormatWarning", false]], "chunk_lengths() (polars.series method)": [[1004, "polars.Series.chunk_lengths", false]], "clear() (polars.dataframe method)": [[184, "polars.DataFrame.clear", false]], "clear() (polars.lazyframe method)": [[829, "polars.LazyFrame.clear", false]], "clear() (polars.series method)": [[1005, "polars.Series.clear", false]], "clip() (polars.expr method)": [[400, "polars.Expr.clip", false]], "clip() (polars.series method)": [[1006, "polars.Series.clip", false]], "clone() (polars.dataframe method)": [[185, "polars.DataFrame.clone", false]], "clone() (polars.lazyframe method)": [[830, "polars.LazyFrame.clone", false]], "clone() (polars.series method)": [[1007, "polars.Series.clone", false]], "coalesce() (in module polars)": [[738, "polars.coalesce", false]], "collect() (polars.lazyframe method)": [[831, "polars.LazyFrame.collect", false]], "collect_all() (in module polars)": [[57, "polars.collect_all", false]], "collect_all_async() (in module polars)": [[58, "polars.collect_all_async", false]], "collect_async() (polars.lazyframe method)": [[832, "polars.LazyFrame.collect_async", false]], "collect_schema() (polars.dataframe method)": [[186, "polars.DataFrame.collect_schema", false]], "collect_schema() (polars.lazyframe method)": [[833, "polars.LazyFrame.collect_schema", false]], "column (class in polars.testing.parametric)": [[163, "polars.testing.parametric.column", false]], "columnnotfounderror": [[95, "polars.exceptions.ColumnNotFoundError", false]], "columns (polars.dataframe property)": [[187, "polars.DataFrame.columns", false]], "columns (polars.lazyframe property)": [[834, "polars.LazyFrame.columns", false]], "columns() (in module polars.testing.parametric)": [[164, "polars.testing.parametric.columns", false]], "combine() (polars.expr.dt method)": [[422, "polars.Expr.dt.combine", false]], "combine() (polars.series.dt method)": [[1028, "polars.Series.dt.combine", false]], "computeerror": [[96, "polars.exceptions.ComputeError", false]], "concat() (in module polars)": [[59, "polars.concat", false]], "concat() (polars.expr.list method)": [[518, "polars.Expr.list.concat", false]], "concat() (polars.expr.str method)": [[657, "polars.Expr.str.concat", false]], "concat() (polars.series.list method)": [[1131, "polars.Series.list.concat", false]], "concat() (polars.series.str method)": [[1235, "polars.Series.str.concat", false]], "concat_arr() (in module polars)": [[739, "polars.concat_arr", false]], "concat_list() (in module polars)": [[740, "polars.concat_list", false]], "concat_str() (in module polars)": [[741, "polars.concat_str", false]], "contains() (in module polars.selectors)": [[930, "polars.selectors.contains", false]], "contains() (polars.expr.arr method)": [[353, "polars.Expr.arr.contains", false]], "contains() (polars.expr.bin method)": [[374, "polars.Expr.bin.contains", false]], "contains() (polars.expr.list method)": [[519, "polars.Expr.list.contains", false]], "contains() (polars.expr.str method)": [[658, "polars.Expr.str.contains", false]], "contains() (polars.series.arr method)": [[956, "polars.Series.arr.contains", false]], "contains() (polars.series.bin method)": [[976, "polars.Series.bin.contains", false]], "contains() (polars.series.list method)": [[1132, "polars.Series.list.contains", false]], "contains() (polars.series.str method)": [[1236, "polars.Series.str.contains", false]], "contains_any() (polars.expr.str method)": [[659, "polars.Expr.str.contains_any", false]], "contains_any() (polars.series.str method)": [[1237, "polars.Series.str.contains_any", false]], "convert_time_zone() (polars.expr.dt method)": [[423, "polars.Expr.dt.convert_time_zone", false]], "convert_time_zone() (polars.series.dt method)": [[1029, "polars.Series.dt.convert_time_zone", false]], "corr() (in module polars)": [[742, "polars.corr", false]], "corr() (polars.dataframe method)": [[188, "polars.DataFrame.corr", false]], "cos() (polars.expr method)": [[401, "polars.Expr.cos", false]], "cos() (polars.series method)": [[1008, "polars.Series.cos", false]], "cosh() (polars.expr method)": [[402, "polars.Expr.cosh", false]], "cosh() (polars.series method)": [[1009, "polars.Series.cosh", false]], "cot() (polars.expr method)": [[403, "polars.Expr.cot", false]], "cot() (polars.series method)": [[1010, "polars.Series.cot", false]], "count() (in module polars)": [[743, "polars.count", false]], "count() (polars.dataframe method)": [[189, "polars.DataFrame.count", false]], "count() (polars.dataframe.group_by.groupby method)": [[302, "polars.dataframe.group_by.GroupBy.count", false]], "count() (polars.expr method)": [[404, "polars.Expr.count", false]], "count() (polars.lazyframe method)": [[835, "polars.LazyFrame.count", false]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[902, "polars.lazyframe.group_by.LazyGroupBy.count", false]], "count() (polars.series method)": [[1011, "polars.Series.count", false]], "count_matches() (polars.expr.arr method)": [[354, "polars.Expr.arr.count_matches", false]], "count_matches() (polars.expr.list method)": [[520, "polars.Expr.list.count_matches", false]], "count_matches() (polars.expr.str method)": [[660, "polars.Expr.str.count_matches", false]], "count_matches() (polars.series.arr method)": [[957, "polars.Series.arr.count_matches", false]], "count_matches() (polars.series.list method)": [[1133, "polars.Series.list.count_matches", false]], "count_matches() (polars.series.str method)": [[1238, "polars.Series.str.count_matches", false]], "cov() (in module polars)": [[744, "polars.cov", false]], "create_list_strategy() (in module polars.testing.parametric)": [[165, "polars.testing.parametric.create_list_strategy", false]], "credentialprovider (class in polars)": [[31, "polars.CredentialProvider", false]], "credentialprovideraws (class in polars)": [[32, "polars.CredentialProviderAWS", false]], "credentialproviderazure (class in polars)": [[33, "polars.CredentialProviderAzure", false]], "credentialprovidergcp (class in polars)": [[34, "polars.CredentialProviderGCP", false]], "cum_count() (in module polars)": [[745, "polars.cum_count", false]], "cum_count() (polars.expr method)": [[405, "polars.Expr.cum_count", false]], "cum_count() (polars.series method)": [[1012, "polars.Series.cum_count", false]], "cum_fold() (in module polars)": [[746, "polars.cum_fold", false]], "cum_max() (polars.expr method)": [[406, "polars.Expr.cum_max", false]], "cum_max() (polars.series method)": [[1013, "polars.Series.cum_max", false]], "cum_min() (polars.expr method)": [[407, "polars.Expr.cum_min", false]], "cum_min() (polars.series method)": [[1014, "polars.Series.cum_min", false]], "cum_prod() (polars.expr method)": [[408, "polars.Expr.cum_prod", false]], "cum_prod() (polars.series method)": [[1015, "polars.Series.cum_prod", false]], "cum_reduce() (in module polars)": [[747, "polars.cum_reduce", false]], "cum_sum() (in module polars)": [[748, "polars.cum_sum", false]], "cum_sum() (polars.expr method)": [[409, "polars.Expr.cum_sum", false]], "cum_sum() (polars.series method)": [[1016, "polars.Series.cum_sum", false]], "cum_sum_horizontal() (in module polars)": [[749, "polars.cum_sum_horizontal", false]], "cumulative_eval() (polars.expr method)": [[410, "polars.Expr.cumulative_eval", false]], "cumulative_eval() (polars.series method)": [[1017, "polars.Series.cumulative_eval", false]], "customufuncwarning": [[97, "polars.exceptions.CustomUFuncWarning", false]], "cut() (polars.expr method)": [[411, "polars.Expr.cut", false]], "cut() (polars.series method)": [[1018, "polars.Series.cut", false]], "dataframes() (in module polars.testing.parametric)": [[166, "polars.testing.parametric.dataframes", false]], "dataorientationwarning": [[98, "polars.exceptions.DataOrientationWarning", false]], "datatype (class in polars.datatypes)": [[64, "polars.datatypes.DataType", false]], "date (class in polars.datatypes)": [[65, "polars.datatypes.Date", false]], "date() (in module polars)": [[750, "polars.date", false]], "date() (in module polars.selectors)": [[930, "polars.selectors.date", false]], "date() (polars.expr.dt method)": [[424, "polars.Expr.dt.date", false]], "date() (polars.series.dt method)": [[1030, "polars.Series.dt.date", false]], "date_range() (in module polars)": [[751, "polars.date_range", false]], "date_ranges() (in module polars)": [[752, "polars.date_ranges", false]], "datetime (class in polars.datatypes)": [[66, "polars.datatypes.Datetime", false]], "datetime() (in module polars)": [[753, "polars.datetime", false]], "datetime() (in module polars.selectors)": [[930, "polars.selectors.datetime", false]], "datetime() (polars.expr.dt method)": [[425, "polars.Expr.dt.datetime", false]], "datetime() (polars.series.dt method)": [[1031, "polars.Series.dt.datetime", false]], "datetime_range() (in module polars)": [[754, "polars.datetime_range", false]], "datetime_ranges() (in module polars)": [[755, "polars.datetime_ranges", false]], "day() (polars.expr.dt method)": [[426, "polars.Expr.dt.day", false]], "day() (polars.series.dt method)": [[1032, "polars.Series.dt.day", false]], "decimal (class in polars.datatypes)": [[67, "polars.datatypes.Decimal", false]], "decimal() (in module polars.selectors)": [[930, "polars.selectors.decimal", false]], "decode() (polars.expr.bin method)": [[375, "polars.Expr.bin.decode", false]], "decode() (polars.expr.str method)": [[661, "polars.Expr.str.decode", false]], "decode() (polars.series.bin method)": [[977, "polars.Series.bin.decode", false]], "decode() (polars.series.str method)": [[1239, "polars.Series.str.decode", false]], "degrees() (polars.expr method)": [[412, "polars.Expr.degrees", false]], "describe() (polars.dataframe method)": [[190, "polars.DataFrame.describe", false]], "describe() (polars.lazyframe method)": [[836, "polars.LazyFrame.describe", false]], "describe() (polars.series method)": [[1019, "polars.Series.describe", false]], "deserialize() (polars.dataframe class method)": [[191, "polars.DataFrame.deserialize", false]], "deserialize() (polars.expr class method)": [[413, "polars.Expr.deserialize", false]], "deserialize() (polars.lazyframe class method)": [[837, "polars.LazyFrame.deserialize", false]], "diff() (polars.expr method)": [[414, "polars.Expr.diff", false]], "diff() (polars.expr.list method)": [[521, "polars.Expr.list.diff", false]], "diff() (polars.series method)": [[1020, "polars.Series.diff", false]], "diff() (polars.series.list method)": [[1134, "polars.Series.list.diff", false]], "digit() (in module polars.selectors)": [[930, "polars.selectors.digit", false]], "disable_string_cache() (in module polars)": [[90, "polars.disable_string_cache", false]], "dot() (polars.expr method)": [[415, "polars.Expr.dot", false]], "dot() (polars.series method)": [[1021, "polars.Series.dot", false]], "drop() (polars.dataframe method)": [[192, "polars.DataFrame.drop", false]], "drop() (polars.lazyframe method)": [[838, "polars.LazyFrame.drop", false]], "drop_in_place() (polars.dataframe method)": [[193, "polars.DataFrame.drop_in_place", false]], "drop_nans() (polars.dataframe method)": [[194, "polars.DataFrame.drop_nans", false]], "drop_nans() (polars.expr method)": [[416, "polars.Expr.drop_nans", false]], "drop_nans() (polars.lazyframe method)": [[839, "polars.LazyFrame.drop_nans", false]], "drop_nans() (polars.series method)": [[1022, "polars.Series.drop_nans", false]], "drop_nulls() (polars.dataframe method)": [[195, "polars.DataFrame.drop_nulls", false]], "drop_nulls() (polars.expr method)": [[417, "polars.Expr.drop_nulls", false]], "drop_nulls() (polars.expr.list method)": [[522, "polars.Expr.list.drop_nulls", false]], "drop_nulls() (polars.lazyframe method)": [[840, "polars.LazyFrame.drop_nulls", false]], "drop_nulls() (polars.series method)": [[1023, "polars.Series.drop_nulls", false]], "drop_nulls() (polars.series.list method)": [[1135, "polars.Series.list.drop_nulls", false]], "dst_offset() (polars.expr.dt method)": [[427, "polars.Expr.dt.dst_offset", false]], "dst_offset() (polars.series.dt method)": [[1033, "polars.Series.dt.dst_offset", false]], "dtype (polars.series property)": [[1073, "polars.Series.dtype", false]], "dtypes (polars.dataframe property)": [[196, "polars.DataFrame.dtypes", false]], "dtypes (polars.lazyframe property)": [[841, "polars.LazyFrame.dtypes", false]], "dtypes() (in module polars.testing.parametric)": [[167, "polars.testing.parametric.dtypes", false]], "duplicateerror": [[99, "polars.exceptions.DuplicateError", false]], "duration (class in polars.datatypes)": [[68, "polars.datatypes.Duration", false]], "duration() (in module polars)": [[756, "polars.duration", false]], "duration() (in module polars.selectors)": [[930, "polars.selectors.duration", false]], "element() (in module polars)": [[757, "polars.element", false]], "enable_string_cache() (in module polars)": [[91, "polars.enable_string_cache", false]], "encode() (polars.expr.bin method)": [[376, "polars.Expr.bin.encode", false]], "encode() (polars.expr.str method)": [[662, "polars.Expr.str.encode", false]], "encode() (polars.series.bin method)": [[978, "polars.Series.bin.encode", false]], "encode() (polars.series.str method)": [[1240, "polars.Series.str.encode", false]], "ends_with() (in module polars.selectors)": [[930, "polars.selectors.ends_with", false]], "ends_with() (polars.expr.bin method)": [[377, "polars.Expr.bin.ends_with", false]], "ends_with() (polars.expr.cat method)": [[393, "polars.Expr.cat.ends_with", false]], "ends_with() (polars.expr.str method)": [[663, "polars.Expr.str.ends_with", false]], "ends_with() (polars.series.bin method)": [[979, "polars.Series.bin.ends_with", false]], "ends_with() (polars.series.cat method)": [[994, "polars.Series.cat.ends_with", false]], "ends_with() (polars.series.str method)": [[1241, "polars.Series.str.ends_with", false]], "entropy() (polars.expr method)": [[463, "polars.Expr.entropy", false]], "entropy() (polars.series method)": [[1074, "polars.Series.entropy", false]], "enum (class in polars.datatypes)": [[69, "polars.datatypes.Enum", false]], "epoch() (polars.expr.dt method)": [[428, "polars.Expr.dt.epoch", false]], "epoch() (polars.series.dt method)": [[1034, "polars.Series.dt.epoch", false]], "eq() (polars.expr method)": [[464, "polars.Expr.eq", false]], "eq() (polars.expr.meta method)": [[564, "polars.Expr.meta.eq", false]], "eq() (polars.series method)": [[1075, "polars.Series.eq", false]], "eq_missing() (polars.expr method)": [[465, "polars.Expr.eq_missing", false]], "eq_missing() (polars.series method)": [[1076, "polars.Series.eq_missing", false]], "equals() (polars.dataframe method)": [[197, "polars.DataFrame.equals", false]], "equals() (polars.series method)": [[1077, "polars.Series.equals", false]], "escape_regex() (in module polars)": [[92, "polars.escape_regex", false]], "escape_regex() (polars.expr.str method)": [[664, "polars.Expr.str.escape_regex", false]], "escape_regex() (polars.series.str method)": [[1242, "polars.Series.str.escape_regex", false]], "estimated_size() (polars.dataframe method)": [[198, "polars.DataFrame.estimated_size", false]], "estimated_size() (polars.series method)": [[1078, "polars.Series.estimated_size", false]], "eval() (polars.expr.list method)": [[523, "polars.Expr.list.eval", false]], "eval() (polars.series.list method)": [[1136, "polars.Series.list.eval", false]], "ewm_mean() (polars.expr method)": [[466, "polars.Expr.ewm_mean", false]], "ewm_mean() (polars.series method)": [[1079, "polars.Series.ewm_mean", false]], "ewm_mean_by() (polars.expr method)": [[467, "polars.Expr.ewm_mean_by", false]], "ewm_mean_by() (polars.series method)": [[1080, "polars.Series.ewm_mean_by", false]], "ewm_std() (polars.expr method)": [[468, "polars.Expr.ewm_std", false]], "ewm_std() (polars.series method)": [[1081, "polars.Series.ewm_std", false]], "ewm_var() (polars.expr method)": [[469, "polars.Expr.ewm_var", false]], "ewm_var() (polars.series method)": [[1082, "polars.Series.ewm_var", false]], "exclude() (in module polars)": [[758, "polars.exclude", false]], "exclude() (in module polars.selectors)": [[930, "polars.selectors.exclude", false]], "exclude() (polars.expr method)": [[470, "polars.Expr.exclude", false]], "execute() (polars.sqlcontext method)": [[1328, "polars.SQLContext.execute", false]], "execute_global() (polars.sqlcontext class method)": [[1329, "polars.SQLContext.execute_global", false]], "exp() (polars.expr method)": [[471, "polars.Expr.exp", false]], "exp() (polars.series method)": [[1083, "polars.Series.exp", false]], "expand_selector() (in module polars.selectors)": [[930, "polars.selectors.expand_selector", false]], "explain() (polars.lazyframe method)": [[842, "polars.LazyFrame.explain", false]], "explode() (polars.dataframe method)": [[199, "polars.DataFrame.explode", false]], "explode() (polars.expr method)": [[472, "polars.Expr.explode", false]], "explode() (polars.expr.arr method)": [[355, "polars.Expr.arr.explode", false]], "explode() (polars.expr.list method)": [[524, "polars.Expr.list.explode", false]], "explode() (polars.expr.str method)": [[665, "polars.Expr.str.explode", false]], "explode() (polars.lazyframe method)": [[843, "polars.LazyFrame.explode", false]], "explode() (polars.series method)": [[1084, "polars.Series.explode", false]], "explode() (polars.series.arr method)": [[958, "polars.Series.arr.explode", false]], "explode() (polars.series.list method)": [[1137, "polars.Series.list.explode", false]], "explode() (polars.series.str method)": [[1243, "polars.Series.str.explode", false]], "extend() (polars.dataframe method)": [[200, "polars.DataFrame.extend", false]], "extend() (polars.series method)": [[1085, "polars.Series.extend", false]], "extend_constant() (polars.expr method)": [[473, "polars.Expr.extend_constant", false]], "extend_constant() (polars.series method)": [[1086, "polars.Series.extend_constant", false]], "extract() (polars.expr.str method)": [[666, "polars.Expr.str.extract", false]], "extract() (polars.series.str method)": [[1244, "polars.Series.str.extract", false]], "extract_all() (polars.expr.str method)": [[667, "polars.Expr.str.extract_all", false]], "extract_all() (polars.series.str method)": [[1245, "polars.Series.str.extract_all", false]], "extract_groups() (polars.expr.str method)": [[668, "polars.Expr.str.extract_groups", false]], "extract_groups() (polars.series.str method)": [[1246, "polars.Series.str.extract_groups", false]], "extract_many() (polars.expr.str method)": [[669, "polars.Expr.str.extract_many", false]], "extract_many() (polars.series.str method)": [[1247, "polars.Series.str.extract_many", false]], "fetch() (polars.lazyframe.in_process.inprocessquery method)": [[917, "polars.lazyframe.in_process.InProcessQuery.fetch", false]], "fetch_blocking() (polars.lazyframe.in_process.inprocessquery method)": [[918, "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", false]], "field (class in polars.datatypes)": [[70, "polars.datatypes.Field", false]], "field() (polars.expr.struct method)": [[706, "polars.Expr.struct.field", false]], "field() (polars.series.struct method)": [[1284, "polars.Series.struct.field", false]], "fields (polars.series.struct attribute)": [[1285, "polars.Series.struct.fields", false]], "fill_nan() (polars.dataframe method)": [[201, "polars.DataFrame.fill_nan", false]], "fill_nan() (polars.expr method)": [[474, "polars.Expr.fill_nan", false]], "fill_nan() (polars.lazyframe method)": [[844, "polars.LazyFrame.fill_nan", false]], "fill_nan() (polars.series method)": [[1087, "polars.Series.fill_nan", false]], "fill_null() (polars.dataframe method)": [[202, "polars.DataFrame.fill_null", false]], "fill_null() (polars.expr method)": [[475, "polars.Expr.fill_null", false]], "fill_null() (polars.lazyframe method)": [[845, "polars.LazyFrame.fill_null", false]], "fill_null() (polars.series method)": [[1088, "polars.Series.fill_null", false]], "filter() (polars.dataframe method)": [[203, "polars.DataFrame.filter", false]], "filter() (polars.expr method)": [[476, "polars.Expr.filter", false]], "filter() (polars.lazyframe method)": [[846, "polars.LazyFrame.filter", false]], "filter() (polars.series method)": [[1089, "polars.Series.filter", false]], "find() (polars.expr.str method)": [[670, "polars.Expr.str.find", false]], "find() (polars.series.str method)": [[1248, "polars.Series.str.find", false]], "find_many() (polars.expr.str method)": [[671, "polars.Expr.str.find_many", false]], "find_many() (polars.series.str method)": [[1249, "polars.Series.str.find_many", false]], "first() (in module polars)": [[759, "polars.first", false]], "first() (in module polars.selectors)": [[930, "polars.selectors.first", false]], "first() (polars.dataframe.group_by.groupby method)": [[303, "polars.dataframe.group_by.GroupBy.first", false]], "first() (polars.expr method)": [[477, "polars.Expr.first", false]], "first() (polars.expr.arr method)": [[356, "polars.Expr.arr.first", false]], "first() (polars.expr.list method)": [[525, "polars.Expr.list.first", false]], "first() (polars.lazyframe method)": [[847, "polars.LazyFrame.first", false]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[903, "polars.lazyframe.group_by.LazyGroupBy.first", false]], "first() (polars.series method)": [[1090, "polars.Series.first", false]], "first() (polars.series.arr method)": [[959, "polars.Series.arr.first", false]], "first() (polars.series.list method)": [[1138, "polars.Series.list.first", false]], "flags (polars.dataframe property)": [[204, "polars.DataFrame.flags", false]], "flags (polars.series property)": [[1091, "polars.Series.flags", false]], "flatten() (polars.expr method)": [[478, "polars.Expr.flatten", false]], "float() (in module polars.selectors)": [[930, "polars.selectors.float", false]], "float32 (class in polars.datatypes)": [[71, "polars.datatypes.Float32", false]], "float64 (class in polars.datatypes)": [[72, "polars.datatypes.Float64", false]], "floor() (polars.expr method)": [[479, "polars.Expr.floor", false]], "floor() (polars.series method)": [[1092, "polars.Series.floor", false]], "floordiv() (polars.expr method)": [[480, "polars.Expr.floordiv", false]], "fold() (in module polars)": [[760, "polars.fold", false]], "fold() (polars.dataframe method)": [[205, "polars.DataFrame.fold", false]], "format() (in module polars)": [[761, "polars.format", false]], "forward_fill() (polars.expr method)": [[481, "polars.Expr.forward_fill", false]], "from_arrow() (in module polars)": [[123, "polars.from_arrow", false]], "from_dataframe() (in module polars)": [[124, "polars.from_dataframe", false]], "from_dict() (in module polars)": [[125, "polars.from_dict", false]], "from_dicts() (in module polars)": [[126, "polars.from_dicts", false]], "from_epoch() (in module polars)": [[762, "polars.from_epoch", false]], "from_json() (polars.expr class method)": [[482, "polars.Expr.from_json", false]], "from_numpy() (in module polars)": [[127, "polars.from_numpy", false]], "from_pandas() (in module polars)": [[128, "polars.from_pandas", false]], "from_records() (in module polars)": [[129, "polars.from_records", false]], "from_repr() (in module polars)": [[130, "polars.from_repr", false]], "gather() (polars.expr method)": [[483, "polars.Expr.gather", false]], "gather() (polars.expr.list method)": [[526, "polars.Expr.list.gather", false]], "gather() (polars.series method)": [[1093, "polars.Series.gather", false]], "gather() (polars.series.list method)": [[1139, "polars.Series.list.gather", false]], "gather_every() (polars.dataframe method)": [[206, "polars.DataFrame.gather_every", false]], "gather_every() (polars.expr method)": [[484, "polars.Expr.gather_every", false]], "gather_every() (polars.expr.list method)": [[527, "polars.Expr.list.gather_every", false]], "gather_every() (polars.lazyframe method)": [[848, "polars.LazyFrame.gather_every", false]], "gather_every() (polars.series method)": [[1094, "polars.Series.gather_every", false]], "gather_every() (polars.series.list method)": [[1140, "polars.Series.list.gather_every", false]], "ge() (polars.expr method)": [[485, "polars.Expr.ge", false]], "ge() (polars.series method)": [[1095, "polars.Series.ge", false]], "get() (polars.expr method)": [[486, "polars.Expr.get", false]], "get() (polars.expr.arr method)": [[357, "polars.Expr.arr.get", false]], "get() (polars.expr.list method)": [[528, "polars.Expr.list.get", false]], "get() (polars.series.arr method)": [[960, "polars.Series.arr.get", false]], "get() (polars.series.list method)": [[1141, "polars.Series.list.get", false]], "get_categories() (polars.expr.cat method)": [[394, "polars.Expr.cat.get_categories", false]], "get_categories() (polars.series.cat method)": [[995, "polars.Series.cat.get_categories", false]], "get_chunks() (polars.series method)": [[1096, "polars.Series.get_chunks", false]], "get_column() (polars.dataframe method)": [[207, "polars.DataFrame.get_column", false]], "get_column_index() (polars.dataframe method)": [[208, "polars.DataFrame.get_column_index", false]], "get_columns() (polars.dataframe method)": [[209, "polars.DataFrame.get_columns", false]], "get_index_type() (in module polars)": [[131, "polars.get_index_type", false]], "glimpse() (polars.dataframe method)": [[210, "polars.DataFrame.glimpse", false]], "gpuengine (class in polars.lazyframe.engine_config)": [[899, "polars.lazyframe.engine_config.GPUEngine", false]], "group_by() (polars.dataframe method)": [[211, "polars.DataFrame.group_by", false]], "group_by() (polars.lazyframe method)": [[849, "polars.LazyFrame.group_by", false]], "group_by_dynamic() (polars.dataframe method)": [[212, "polars.DataFrame.group_by_dynamic", false]], "group_by_dynamic() (polars.lazyframe method)": [[850, "polars.LazyFrame.group_by_dynamic", false]], "groups() (in module polars)": [[763, "polars.groups", false]], "gt() (polars.expr method)": [[487, "polars.Expr.gt", false]], "gt() (polars.series method)": [[1097, "polars.Series.gt", false]], "has_multiple_outputs() (polars.expr.meta method)": [[565, "polars.Expr.meta.has_multiple_outputs", false]], "has_nulls() (polars.expr method)": [[488, "polars.Expr.has_nulls", false]], "has_nulls() (polars.series method)": [[1098, "polars.Series.has_nulls", false]], "has_validity() (polars.series method)": [[1099, "polars.Series.has_validity", false]], "hash() (polars.expr method)": [[489, "polars.Expr.hash", false]], "hash() (polars.series method)": [[1100, "polars.Series.hash", false]], "hash_rows() (polars.dataframe method)": [[213, "polars.DataFrame.hash_rows", false]], "head() (in module polars)": [[764, "polars.head", false]], "head() (polars.dataframe method)": [[214, "polars.DataFrame.head", false]], "head() (polars.dataframe.group_by.groupby method)": [[304, "polars.dataframe.group_by.GroupBy.head", false]], "head() (polars.expr method)": [[490, "polars.Expr.head", false]], "head() (polars.expr.list method)": [[529, "polars.Expr.list.head", false]], "head() (polars.expr.str method)": [[672, "polars.Expr.str.head", false]], "head() (polars.lazyframe method)": [[851, "polars.LazyFrame.head", false]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[904, "polars.lazyframe.group_by.LazyGroupBy.head", false]], "head() (polars.series method)": [[1101, "polars.Series.head", false]], "head() (polars.series.list method)": [[1142, "polars.Series.list.head", false]], "head() (polars.series.str method)": [[1250, "polars.Series.str.head", false]], "height (polars.dataframe property)": [[215, "polars.DataFrame.height", false]], "hist() (polars.expr method)": [[491, "polars.Expr.hist", false]], "hist() (polars.series method)": [[1102, "polars.Series.hist", false]], "hour() (polars.expr.dt method)": [[429, "polars.Expr.dt.hour", false]], "hour() (polars.series.dt method)": [[1035, "polars.Series.dt.hour", false]], "hstack() (polars.dataframe method)": [[216, "polars.DataFrame.hstack", false]], "implode() (in module polars)": [[765, "polars.implode", false]], "implode() (polars.expr method)": [[492, "polars.Expr.implode", false]], "implode() (polars.series method)": [[1103, "polars.Series.implode", false]], "index_of() (polars.expr method)": [[493, "polars.Expr.index_of", false]], "index_of() (polars.series method)": [[1104, "polars.Series.index_of", false]], "insert_column() (polars.dataframe method)": [[217, "polars.DataFrame.insert_column", false]], "inspect() (polars.expr method)": [[494, "polars.Expr.inspect", false]], "inspect() (polars.lazyframe method)": [[852, "polars.LazyFrame.inspect", false]], "int128 (class in polars.datatypes)": [[73, "polars.datatypes.Int128", false]], "int16 (class in polars.datatypes)": [[74, "polars.datatypes.Int16", false]], "int32 (class in polars.datatypes)": [[75, "polars.datatypes.Int32", false]], "int64 (class in polars.datatypes)": [[76, "polars.datatypes.Int64", false]], "int8 (class in polars.datatypes)": [[77, "polars.datatypes.Int8", false]], "int_range() (in module polars)": [[766, "polars.int_range", false]], "int_ranges() (in module polars)": [[767, "polars.int_ranges", false]], "integer() (in module polars.selectors)": [[930, "polars.selectors.integer", false]], "interpolate() (polars.dataframe method)": [[218, "polars.DataFrame.interpolate", false]], "interpolate() (polars.expr method)": [[495, "polars.Expr.interpolate", false]], "interpolate() (polars.lazyframe method)": [[853, "polars.LazyFrame.interpolate", false]], "interpolate() (polars.series method)": [[1105, "polars.Series.interpolate", false]], "interpolate_by() (polars.expr method)": [[496, "polars.Expr.interpolate_by", false]], "interpolate_by() (polars.series method)": [[1106, "polars.Series.interpolate_by", false]], "invalidoperationerror": [[100, "polars.exceptions.InvalidOperationError", false]], "is_between() (polars.expr method)": [[497, "polars.Expr.is_between", false]], "is_between() (polars.series method)": [[1107, "polars.Series.is_between", false]], "is_column() (polars.expr.meta method)": [[566, "polars.Expr.meta.is_column", false]], "is_column_selection() (polars.expr.meta method)": [[567, "polars.Expr.meta.is_column_selection", false]], "is_duplicated() (polars.dataframe method)": [[219, "polars.DataFrame.is_duplicated", false]], "is_duplicated() (polars.expr method)": [[498, "polars.Expr.is_duplicated", false]], "is_duplicated() (polars.series method)": [[1108, "polars.Series.is_duplicated", false]], "is_empty() (polars.dataframe method)": [[220, "polars.DataFrame.is_empty", false]], "is_empty() (polars.series method)": [[1109, "polars.Series.is_empty", false]], "is_finite() (polars.expr method)": [[499, "polars.Expr.is_finite", false]], "is_finite() (polars.series method)": [[1110, "polars.Series.is_finite", false]], "is_first_distinct() (polars.expr method)": [[500, "polars.Expr.is_first_distinct", false]], "is_first_distinct() (polars.series method)": [[1111, "polars.Series.is_first_distinct", false]], "is_in() (polars.expr method)": [[501, "polars.Expr.is_in", false]], "is_in() (polars.series method)": [[1112, "polars.Series.is_in", false]], "is_infinite() (polars.expr method)": [[502, "polars.Expr.is_infinite", false]], "is_infinite() (polars.series method)": [[1113, "polars.Series.is_infinite", false]], "is_last_distinct() (polars.expr method)": [[503, "polars.Expr.is_last_distinct", false]], "is_last_distinct() (polars.series method)": [[1114, "polars.Series.is_last_distinct", false]], "is_leap_year() (polars.expr.dt method)": [[430, "polars.Expr.dt.is_leap_year", false]], "is_leap_year() (polars.series.dt method)": [[1036, "polars.Series.dt.is_leap_year", false]], "is_literal() (polars.expr.meta method)": [[568, "polars.Expr.meta.is_literal", false]], "is_local() (polars.series.cat method)": [[996, "polars.Series.cat.is_local", false]], "is_nan() (polars.expr method)": [[504, "polars.Expr.is_nan", false]], "is_nan() (polars.series method)": [[1115, "polars.Series.is_nan", false]], "is_not_nan() (polars.expr method)": [[505, "polars.Expr.is_not_nan", false]], "is_not_nan() (polars.series method)": [[1116, "polars.Series.is_not_nan", false]], "is_not_null() (polars.expr method)": [[506, "polars.Expr.is_not_null", false]], "is_not_null() (polars.series method)": [[1117, "polars.Series.is_not_null", false]], "is_null() (polars.expr method)": [[507, "polars.Expr.is_null", false]], "is_null() (polars.series method)": [[1118, "polars.Series.is_null", false]], "is_regex_projection() (polars.expr.meta method)": [[569, "polars.Expr.meta.is_regex_projection", false]], "is_selector() (in module polars.selectors)": [[930, "polars.selectors.is_selector", false]], "is_sorted() (polars.series method)": [[1119, "polars.Series.is_sorted", false]], "is_unique() (polars.dataframe method)": [[221, "polars.DataFrame.is_unique", false]], "is_unique() (polars.expr method)": [[508, "polars.Expr.is_unique", false]], "is_unique() (polars.series method)": [[1120, "polars.Series.is_unique", false]], "iso_year() (polars.expr.dt method)": [[431, "polars.Expr.dt.iso_year", false]], "iso_year() (polars.series.dt method)": [[1037, "polars.Series.dt.iso_year", false]], "item() (polars.dataframe method)": [[222, "polars.DataFrame.item", false]], "item() (polars.series method)": [[1121, "polars.Series.item", false]], "iter_columns() (polars.dataframe method)": [[223, "polars.DataFrame.iter_columns", false]], "iter_rows() (polars.dataframe method)": [[224, "polars.DataFrame.iter_rows", false]], "iter_slices() (polars.dataframe method)": [[225, "polars.DataFrame.iter_slices", false]], "join() (polars.dataframe method)": [[226, "polars.DataFrame.join", false]], "join() (polars.expr.arr method)": [[358, "polars.Expr.arr.join", false]], "join() (polars.expr.list method)": [[530, "polars.Expr.list.join", false]], "join() (polars.expr.str method)": [[673, "polars.Expr.str.join", false]], "join() (polars.lazyframe method)": [[854, "polars.LazyFrame.join", false]], "join() (polars.series.arr method)": [[961, "polars.Series.arr.join", false]], "join() (polars.series.list method)": [[1143, "polars.Series.list.join", false]], "join() (polars.series.str method)": [[1251, "polars.Series.str.join", false]], "join_asof() (polars.dataframe method)": [[227, "polars.DataFrame.join_asof", false]], "join_asof() (polars.lazyframe method)": [[855, "polars.LazyFrame.join_asof", false]], "join_where() (polars.dataframe method)": [[228, "polars.DataFrame.join_where", false]], "join_where() (polars.lazyframe method)": [[856, "polars.LazyFrame.join_where", false]], "json_decode() (polars.expr.str method)": [[674, "polars.Expr.str.json_decode", false]], "json_decode() (polars.series.str method)": [[1252, "polars.Series.str.json_decode", false]], "json_encode() (polars.expr.struct method)": [[707, "polars.Expr.struct.json_encode", false]], "json_encode() (polars.series.struct method)": [[1286, "polars.Series.struct.json_encode", false]], "json_normalize() (in module polars)": [[133, "polars.json_normalize", false]], "json_path_match() (polars.expr.str method)": [[675, "polars.Expr.str.json_path_match", false]], "json_path_match() (polars.series.str method)": [[1253, "polars.Series.str.json_path_match", false]], "keep() (polars.expr.name method)": [[584, "polars.Expr.name.keep", false]], "kurtosis() (polars.expr method)": [[509, "polars.Expr.kurtosis", false]], "kurtosis() (polars.series method)": [[1122, "polars.Series.kurtosis", false]], "last() (in module polars)": [[768, "polars.last", false]], "last() (in module polars.selectors)": [[930, "polars.selectors.last", false]], "last() (polars.dataframe.group_by.groupby method)": [[305, "polars.dataframe.group_by.GroupBy.last", false]], "last() (polars.expr method)": [[510, "polars.Expr.last", false]], "last() (polars.expr.arr method)": [[359, "polars.Expr.arr.last", false]], "last() (polars.expr.list method)": [[531, "polars.Expr.list.last", false]], "last() (polars.lazyframe method)": [[857, "polars.LazyFrame.last", false]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[905, "polars.lazyframe.group_by.LazyGroupBy.last", false]], "last() (polars.series method)": [[1123, "polars.Series.last", false]], "last() (polars.series.arr method)": [[962, "polars.Series.arr.last", false]], "last() (polars.series.list method)": [[1144, "polars.Series.list.last", false]], "lazy() (polars.dataframe method)": [[229, "polars.DataFrame.lazy", false]], "lazy() (polars.lazyframe method)": [[858, "polars.LazyFrame.lazy", false]], "le() (polars.expr method)": [[511, "polars.Expr.le", false]], "le() (polars.series method)": [[1124, "polars.Series.le", false]], "len() (in module polars)": [[769, "polars.len", false]], "len() (polars.dataframe.group_by.groupby method)": [[306, "polars.dataframe.group_by.GroupBy.len", false]], "len() (polars.expr method)": [[512, "polars.Expr.len", false]], "len() (polars.expr.list method)": [[532, "polars.Expr.list.len", false]], "len() (polars.lazyframe.group_by.lazygroupby method)": [[906, "polars.lazyframe.group_by.LazyGroupBy.len", false]], "len() (polars.series method)": [[1125, "polars.Series.len", false]], "len() (polars.series.list method)": [[1145, "polars.Series.list.len", false]], "len_bytes() (polars.expr.cat method)": [[395, "polars.Expr.cat.len_bytes", false]], "len_bytes() (polars.expr.str method)": [[676, "polars.Expr.str.len_bytes", false]], "len_bytes() (polars.series.cat method)": [[997, "polars.Series.cat.len_bytes", false]], "len_bytes() (polars.series.str method)": [[1254, "polars.Series.str.len_bytes", false]], "len_chars() (polars.expr.cat method)": [[396, "polars.Expr.cat.len_chars", false]], "len_chars() (polars.expr.str method)": [[677, "polars.Expr.str.len_chars", false]], "len_chars() (polars.series.cat method)": [[998, "polars.Series.cat.len_chars", false]], "len_chars() (polars.series.str method)": [[1255, "polars.Series.str.len_chars", false]], "limit() (polars.dataframe method)": [[230, "polars.DataFrame.limit", false]], "limit() (polars.expr method)": [[513, "polars.Expr.limit", false]], "limit() (polars.lazyframe method)": [[859, "polars.LazyFrame.limit", false]], "limit() (polars.series method)": [[1126, "polars.Series.limit", false]], "list (class in polars.datatypes)": [[78, "polars.datatypes.List", false]], "lists() (in module polars.testing.parametric)": [[168, "polars.testing.parametric.lists", false]], "lit() (in module polars)": [[770, "polars.lit", false]], "load() (polars.config class method)": [[2, "polars.Config.load", false]], "load_from_file() (polars.config class method)": [[3, "polars.Config.load_from_file", false]], "load_profile() (in module polars.testing.parametric)": [[169, "polars.testing.parametric.load_profile", false]], "log() (polars.expr method)": [[554, "polars.Expr.log", false]], "log() (polars.series method)": [[1167, "polars.Series.log", false]], "log10() (polars.expr method)": [[555, "polars.Expr.log10", false]], "log10() (polars.series method)": [[1168, "polars.Series.log10", false]], "log1p() (polars.expr method)": [[556, "polars.Expr.log1p", false]], "log1p() (polars.series method)": [[1169, "polars.Series.log1p", false]], "lower_bound() (polars.expr method)": [[557, "polars.Expr.lower_bound", false]], "lower_bound() (polars.series method)": [[1170, "polars.Series.lower_bound", false]], "lt() (polars.expr method)": [[558, "polars.Expr.lt", false]], "lt() (polars.series method)": [[1171, "polars.Series.lt", false]], "map() (polars.expr.name method)": [[585, "polars.Expr.name.map", false]], "map_batches() (in module polars)": [[771, "polars.map_batches", false]], "map_batches() (polars.expr method)": [[559, "polars.Expr.map_batches", false]], "map_batches() (polars.lazyframe method)": [[860, "polars.LazyFrame.map_batches", false]], "map_elements() (polars.expr method)": [[560, "polars.Expr.map_elements", false]], "map_elements() (polars.series method)": [[1172, "polars.Series.map_elements", false]], "map_fields() (polars.expr.name method)": [[586, "polars.Expr.name.map_fields", false]], "map_groups() (in module polars)": [[772, "polars.map_groups", false]], "map_groups() (polars.dataframe.group_by.groupby method)": [[307, "polars.dataframe.group_by.GroupBy.map_groups", false]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[907, "polars.lazyframe.group_by.LazyGroupBy.map_groups", false]], "map_rows() (polars.dataframe method)": [[231, "polars.DataFrame.map_rows", false]], "mapwithoutreturndtypewarning": [[101, "polars.exceptions.MapWithoutReturnDtypeWarning", false]], "matches() (in module polars.selectors)": [[930, "polars.selectors.matches", false]], "max() (in module polars)": [[773, "polars.max", false]], "max() (polars.dataframe method)": [[232, "polars.DataFrame.max", false]], "max() (polars.dataframe.group_by.groupby method)": [[308, "polars.dataframe.group_by.GroupBy.max", false]], "max() (polars.expr method)": [[561, "polars.Expr.max", false]], "max() (polars.expr.arr method)": [[360, "polars.Expr.arr.max", false]], "max() (polars.expr.list method)": [[533, "polars.Expr.list.max", false]], "max() (polars.lazyframe method)": [[861, "polars.LazyFrame.max", false]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[908, "polars.lazyframe.group_by.LazyGroupBy.max", false]], "max() (polars.series method)": [[1173, "polars.Series.max", false]], "max() (polars.series.arr method)": [[963, "polars.Series.arr.max", false]], "max() (polars.series.dt method)": [[1038, "polars.Series.dt.max", false]], "max() (polars.series.list method)": [[1146, "polars.Series.list.max", false]], "max_horizontal() (in module polars)": [[774, "polars.max_horizontal", false]], "max_horizontal() (polars.dataframe method)": [[233, "polars.DataFrame.max_horizontal", false]], "mean() (in module polars)": [[775, "polars.mean", false]], "mean() (polars.dataframe method)": [[234, "polars.DataFrame.mean", false]], "mean() (polars.dataframe.group_by.groupby method)": [[309, "polars.dataframe.group_by.GroupBy.mean", false]], "mean() (polars.expr method)": [[562, "polars.Expr.mean", false]], "mean() (polars.expr.list method)": [[534, "polars.Expr.list.mean", false]], "mean() (polars.lazyframe method)": [[862, "polars.LazyFrame.mean", false]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[909, "polars.lazyframe.group_by.LazyGroupBy.mean", false]], "mean() (polars.series method)": [[1174, "polars.Series.mean", false]], "mean() (polars.series.dt method)": [[1039, "polars.Series.dt.mean", false]], "mean() (polars.series.list method)": [[1147, "polars.Series.list.mean", false]], "mean_horizontal() (in module polars)": [[776, "polars.mean_horizontal", false]], "mean_horizontal() (polars.dataframe method)": [[235, "polars.DataFrame.mean_horizontal", false]], "median() (in module polars)": [[777, "polars.median", false]], "median() (polars.dataframe method)": [[236, "polars.DataFrame.median", false]], "median() (polars.dataframe.group_by.groupby method)": [[310, "polars.dataframe.group_by.GroupBy.median", false]], "median() (polars.expr method)": [[563, "polars.Expr.median", false]], "median() (polars.expr.arr method)": [[361, "polars.Expr.arr.median", false]], "median() (polars.expr.list method)": [[535, "polars.Expr.list.median", false]], "median() (polars.lazyframe method)": [[863, "polars.LazyFrame.median", false]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[910, "polars.lazyframe.group_by.LazyGroupBy.median", false]], "median() (polars.series method)": [[1175, "polars.Series.median", false]], "median() (polars.series.arr method)": [[964, "polars.Series.arr.median", false]], "median() (polars.series.dt method)": [[1040, "polars.Series.dt.median", false]], "median() (polars.series.list method)": [[1148, "polars.Series.list.median", false]], "melt() (polars.dataframe method)": [[237, "polars.DataFrame.melt", false]], "melt() (polars.lazyframe method)": [[864, "polars.LazyFrame.melt", false]], "merge_sorted() (polars.dataframe method)": [[238, "polars.DataFrame.merge_sorted", false]], "merge_sorted() (polars.lazyframe method)": [[865, "polars.LazyFrame.merge_sorted", false]], "microsecond() (polars.expr.dt method)": [[432, "polars.Expr.dt.microsecond", false]], "microsecond() (polars.series.dt method)": [[1041, "polars.Series.dt.microsecond", false]], "millennium() (polars.expr.dt method)": [[433, "polars.Expr.dt.millennium", false]], "millennium() (polars.series.dt method)": [[1042, "polars.Series.dt.millennium", false]], "millisecond() (polars.expr.dt method)": [[434, "polars.Expr.dt.millisecond", false]], "millisecond() (polars.series.dt method)": [[1043, "polars.Series.dt.millisecond", false]], "min() (in module polars)": [[778, "polars.min", false]], "min() (polars.dataframe method)": [[239, "polars.DataFrame.min", false]], "min() (polars.dataframe.group_by.groupby method)": [[311, "polars.dataframe.group_by.GroupBy.min", false]], "min() (polars.expr method)": [[579, "polars.Expr.min", false]], "min() (polars.expr.arr method)": [[362, "polars.Expr.arr.min", false]], "min() (polars.expr.list method)": [[536, "polars.Expr.list.min", false]], "min() (polars.lazyframe method)": [[866, "polars.LazyFrame.min", false]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[911, "polars.lazyframe.group_by.LazyGroupBy.min", false]], "min() (polars.series method)": [[1176, "polars.Series.min", false]], "min() (polars.series.arr method)": [[965, "polars.Series.arr.min", false]], "min() (polars.series.dt method)": [[1044, "polars.Series.dt.min", false]], "min() (polars.series.list method)": [[1149, "polars.Series.list.min", false]], "min_horizontal() (in module polars)": [[779, "polars.min_horizontal", false]], "min_horizontal() (polars.dataframe method)": [[240, "polars.DataFrame.min_horizontal", false]], "minute() (polars.expr.dt method)": [[435, "polars.Expr.dt.minute", false]], "minute() (polars.series.dt method)": [[1045, "polars.Series.dt.minute", false]], "mod() (polars.expr method)": [[580, "polars.Expr.mod", false]], "mode() (polars.expr method)": [[581, "polars.Expr.mode", false]], "mode() (polars.series method)": [[1177, "polars.Series.mode", false]], "module": [[928, "module-polars.plugins", false], [930, "module-polars.selectors", false]], "moduleupgraderequirederror": [[102, "polars.exceptions.ModuleUpgradeRequiredError", false]], "month() (polars.expr.dt method)": [[436, "polars.Expr.dt.month", false]], "month() (polars.series.dt method)": [[1046, "polars.Series.dt.month", false]], "month_end() (polars.expr.dt method)": [[437, "polars.Expr.dt.month_end", false]], "month_end() (polars.series.dt method)": [[1047, "polars.Series.dt.month_end", false]], "month_start() (polars.expr.dt method)": [[438, "polars.Expr.dt.month_start", false]], "month_start() (polars.series.dt method)": [[1048, "polars.Series.dt.month_start", false]], "mul() (polars.expr method)": [[582, "polars.Expr.mul", false]], "n_chunks() (polars.dataframe method)": [[241, "polars.DataFrame.n_chunks", false]], "n_chunks() (polars.series method)": [[1178, "polars.Series.n_chunks", false]], "n_unique() (in module polars)": [[780, "polars.n_unique", false]], "n_unique() (polars.dataframe method)": [[242, "polars.DataFrame.n_unique", false]], "n_unique() (polars.dataframe.group_by.groupby method)": [[312, "polars.dataframe.group_by.GroupBy.n_unique", false]], "n_unique() (polars.expr method)": [[583, "polars.Expr.n_unique", false]], "n_unique() (polars.expr.arr method)": [[363, "polars.Expr.arr.n_unique", false]], "n_unique() (polars.expr.list method)": [[537, "polars.Expr.list.n_unique", false]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[912, "polars.lazyframe.group_by.LazyGroupBy.n_unique", false]], "n_unique() (polars.series method)": [[1179, "polars.Series.n_unique", false]], "n_unique() (polars.series.arr method)": [[966, "polars.Series.arr.n_unique", false]], "n_unique() (polars.series.list method)": [[1150, "polars.Series.list.n_unique", false]], "name (polars.series property)": [[1180, "polars.Series.name", false]], "nan_max() (polars.expr method)": [[593, "polars.Expr.nan_max", false]], "nan_max() (polars.series method)": [[1181, "polars.Series.nan_max", false]], "nan_min() (polars.expr method)": [[594, "polars.Expr.nan_min", false]], "nan_min() (polars.series method)": [[1182, "polars.Series.nan_min", false]], "nanosecond() (polars.expr.dt method)": [[439, "polars.Expr.dt.nanosecond", false]], "nanosecond() (polars.series.dt method)": [[1049, "polars.Series.dt.nanosecond", false]], "ne() (polars.expr method)": [[595, "polars.Expr.ne", false]], "ne() (polars.expr.meta method)": [[570, "polars.Expr.meta.ne", false]], "ne() (polars.series method)": [[1183, "polars.Series.ne", false]], "ne_missing() (polars.expr method)": [[596, "polars.Expr.ne_missing", false]], "ne_missing() (polars.series method)": [[1184, "polars.Series.ne_missing", false]], "neg() (polars.expr method)": [[597, "polars.Expr.neg", false]], "new_from_index() (polars.series method)": [[1185, "polars.Series.new_from_index", false]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[132, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", false]], "nodataerror": [[103, "polars.exceptions.NoDataError", false]], "normalize() (polars.expr.str method)": [[678, "polars.Expr.str.normalize", false]], "normalize() (polars.series.str method)": [[1256, "polars.Series.str.normalize", false]], "norowsreturnederror": [[104, "polars.exceptions.NoRowsReturnedError", false]], "not_() (polars.expr method)": [[598, "polars.Expr.not_", false]], "not_() (polars.series method)": [[1186, "polars.Series.not_", false]], "nth() (in module polars)": [[781, "polars.nth", false]], "null (class in polars.datatypes)": [[79, "polars.datatypes.Null", false]], "null_count() (polars.dataframe method)": [[243, "polars.DataFrame.null_count", false]], "null_count() (polars.expr method)": [[599, "polars.Expr.null_count", false]], "null_count() (polars.lazyframe method)": [[867, "polars.LazyFrame.null_count", false]], "null_count() (polars.series method)": [[1187, "polars.Series.null_count", false]], "numeric() (in module polars.selectors)": [[930, "polars.selectors.numeric", false]], "object (class in polars.datatypes)": [[80, "polars.datatypes.Object", false]], "offset_by() (polars.expr.dt method)": [[440, "polars.Expr.dt.offset_by", false]], "offset_by() (polars.series.dt method)": [[1050, "polars.Series.dt.offset_by", false]], "ones() (in module polars)": [[782, "polars.ones", false]], "or_() (polars.expr method)": [[600, "polars.Expr.or_", false]], "ordinal_day() (polars.expr.dt method)": [[441, "polars.Expr.dt.ordinal_day", false]], "ordinal_day() (polars.series.dt method)": [[1051, "polars.Series.dt.ordinal_day", false]], "outofboundserror": [[105, "polars.exceptions.OutOfBoundsError", false]], "output_name() (polars.expr.meta method)": [[571, "polars.Expr.meta.output_name", false]], "over() (polars.expr method)": [[601, "polars.Expr.over", false]], "pad_end() (polars.expr.str method)": [[679, "polars.Expr.str.pad_end", false]], "pad_end() (polars.series.str method)": [[1257, "polars.Series.str.pad_end", false]], "pad_start() (polars.expr.str method)": [[680, "polars.Expr.str.pad_start", false]], "pad_start() (polars.series.str method)": [[1258, "polars.Series.str.pad_start", false]], "panicexception": [[106, "polars.exceptions.PanicException", false]], "parametercollisionerror": [[107, "polars.exceptions.ParameterCollisionError", false]], "partition_by() (polars.dataframe method)": [[244, "polars.DataFrame.partition_by", false]], "pct_change() (polars.expr method)": [[602, "polars.Expr.pct_change", false]], "pct_change() (polars.series method)": [[1188, "polars.Series.pct_change", false]], "peak_max() (polars.expr method)": [[603, "polars.Expr.peak_max", false]], "peak_max() (polars.series method)": [[1189, "polars.Series.peak_max", false]], "peak_min() (polars.expr method)": [[604, "polars.Expr.peak_min", false]], "peak_min() (polars.series method)": [[1190, "polars.Series.peak_min", false]], "performancewarning": [[108, "polars.exceptions.PerformanceWarning", false]], "pipe() (polars.dataframe method)": [[245, "polars.DataFrame.pipe", false]], "pipe() (polars.expr method)": [[605, "polars.Expr.pipe", false]], "pipe() (polars.lazyframe method)": [[868, "polars.LazyFrame.pipe", false]], "pivot() (polars.dataframe method)": [[246, "polars.DataFrame.pivot", false]], "plot (polars.dataframe property)": [[324, "polars.DataFrame.plot", false]], "plot (polars.series property)": [[1324, "polars.Series.plot", false]], "polars.plugins": [[928, "module-polars.plugins", false]], "polars.selectors": [[930, "module-polars.selectors", false]], "polarserror": [[109, "polars.exceptions.PolarsError", false]], "polarsinefficientmapwarning": [[110, "polars.exceptions.PolarsInefficientMapWarning", false]], "polarswarning": [[111, "polars.exceptions.PolarsWarning", false]], "pop() (polars.expr.meta method)": [[572, "polars.Expr.meta.pop", false]], "pow() (polars.expr method)": [[606, "polars.Expr.pow", false]], "pow() (polars.series method)": [[1191, "polars.Series.pow", false]], "prefix() (polars.expr.name method)": [[587, "polars.Expr.name.prefix", false]], "prefix_fields() (polars.expr.name method)": [[588, "polars.Expr.name.prefix_fields", false]], "product() (polars.dataframe method)": [[247, "polars.DataFrame.product", false]], "product() (polars.expr method)": [[607, "polars.Expr.product", false]], "product() (polars.series method)": [[1192, "polars.Series.product", false]], "profile() (polars.lazyframe method)": [[869, "polars.LazyFrame.profile", false]], "qcut() (polars.expr method)": [[608, "polars.Expr.qcut", false]], "qcut() (polars.series method)": [[1193, "polars.Series.qcut", false]], "quantile() (in module polars)": [[783, "polars.quantile", false]], "quantile() (polars.dataframe method)": [[248, "polars.DataFrame.quantile", false]], "quantile() (polars.dataframe.group_by.groupby method)": [[313, "polars.dataframe.group_by.GroupBy.quantile", false]], "quantile() (polars.expr method)": [[609, "polars.Expr.quantile", false]], "quantile() (polars.lazyframe method)": [[870, "polars.LazyFrame.quantile", false]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[913, "polars.lazyframe.group_by.LazyGroupBy.quantile", false]], "quantile() (polars.series method)": [[1194, "polars.Series.quantile", false]], "quarter() (polars.expr.dt method)": [[442, "polars.Expr.dt.quarter", false]], "quarter() (polars.series.dt method)": [[1052, "polars.Series.dt.quarter", false]], "radians() (polars.expr method)": [[610, "polars.Expr.radians", false]], "rank() (polars.expr method)": [[611, "polars.Expr.rank", false]], "rank() (polars.series method)": [[1195, "polars.Series.rank", false]], "read_avro() (in module polars)": [[134, "polars.read_avro", false]], "read_clipboard() (in module polars)": [[135, "polars.read_clipboard", false]], "read_csv() (in module polars)": [[136, "polars.read_csv", false]], "read_csv_batched() (in module polars)": [[137, "polars.read_csv_batched", false]], "read_database() (in module polars)": [[138, "polars.read_database", false]], "read_database_uri() (in module polars)": [[139, "polars.read_database_uri", false]], "read_delta() (in module polars)": [[140, "polars.read_delta", false]], "read_excel() (in module polars)": [[141, "polars.read_excel", false]], "read_ipc() (in module polars)": [[142, "polars.read_ipc", false]], "read_ipc_schema() (in module polars)": [[143, "polars.read_ipc_schema", false]], "read_ipc_stream() (in module polars)": [[144, "polars.read_ipc_stream", false]], "read_json() (in module polars)": [[145, "polars.read_json", false]], "read_ndjson() (in module polars)": [[146, "polars.read_ndjson", false]], "read_ods() (in module polars)": [[147, "polars.read_ods", false]], "read_parquet() (in module polars)": [[148, "polars.read_parquet", false]], "read_parquet_schema() (in module polars)": [[149, "polars.read_parquet_schema", false]], "rechunk() (polars.dataframe method)": [[249, "polars.DataFrame.rechunk", false]], "rechunk() (polars.expr method)": [[612, "polars.Expr.rechunk", false]], "rechunk() (polars.series method)": [[1196, "polars.Series.rechunk", false]], "reduce() (in module polars)": [[784, "polars.reduce", false]], "register() (polars.sqlcontext method)": [[1330, "polars.SQLContext.register", false]], "register_dataframe_namespace() (in module polars.api)": [[52, "polars.api.register_dataframe_namespace", false]], "register_expr_namespace() (in module polars.api)": [[53, "polars.api.register_expr_namespace", false]], "register_globals() (polars.sqlcontext method)": [[1331, "polars.SQLContext.register_globals", false]], "register_lazyframe_namespace() (in module polars.api)": [[54, "polars.api.register_lazyframe_namespace", false]], "register_many() (polars.sqlcontext method)": [[1332, "polars.SQLContext.register_many", false]], "register_plugin_function() (in module polars.plugins)": [[928, "polars.plugins.register_plugin_function", false]], "register_series_namespace() (in module polars.api)": [[55, "polars.api.register_series_namespace", false]], "reinterpret() (polars.expr method)": [[613, "polars.Expr.reinterpret", false]], "reinterpret() (polars.expr.bin method)": [[378, "polars.Expr.bin.reinterpret", false]], "reinterpret() (polars.series method)": [[1197, "polars.Series.reinterpret", false]], "reinterpret() (polars.series.bin method)": [[980, "polars.Series.bin.reinterpret", false]], "rename() (polars.dataframe method)": [[250, "polars.DataFrame.rename", false]], "rename() (polars.lazyframe method)": [[871, "polars.LazyFrame.rename", false]], "rename() (polars.series method)": [[1198, "polars.Series.rename", false]], "rename_fields() (polars.expr.struct method)": [[708, "polars.Expr.struct.rename_fields", false]], "rename_fields() (polars.series.struct method)": [[1287, "polars.Series.struct.rename_fields", false]], "repeat() (in module polars)": [[785, "polars.repeat", false]], "repeat_by() (polars.expr method)": [[614, "polars.Expr.repeat_by", false]], "replace() (polars.expr method)": [[615, "polars.Expr.replace", false]], "replace() (polars.expr.dt method)": [[443, "polars.Expr.dt.replace", false]], "replace() (polars.expr.str method)": [[681, "polars.Expr.str.replace", false]], "replace() (polars.series method)": [[1199, "polars.Series.replace", false]], "replace() (polars.series.dt method)": [[1053, "polars.Series.dt.replace", false]], "replace() (polars.series.str method)": [[1259, "polars.Series.str.replace", false]], "replace_all() (polars.expr.str method)": [[682, "polars.Expr.str.replace_all", false]], "replace_all() (polars.series.str method)": [[1260, "polars.Series.str.replace_all", false]], "replace_column() (polars.dataframe method)": [[251, "polars.DataFrame.replace_column", false]], "replace_many() (polars.expr.str method)": [[683, "polars.Expr.str.replace_many", false]], "replace_many() (polars.series.str method)": [[1261, "polars.Series.str.replace_many", false]], "replace_strict() (polars.expr method)": [[616, "polars.Expr.replace_strict", false]], "replace_strict() (polars.series method)": [[1200, "polars.Series.replace_strict", false]], "replace_time_zone() (polars.expr.dt method)": [[444, "polars.Expr.dt.replace_time_zone", false]], "replace_time_zone() (polars.series.dt method)": [[1054, "polars.Series.dt.replace_time_zone", false]], "reshape() (polars.expr method)": [[617, "polars.Expr.reshape", false]], "reshape() (polars.series method)": [[1201, "polars.Series.reshape", false]], "restore_defaults() (polars.config class method)": [[4, "polars.Config.restore_defaults", false]], "reverse() (polars.dataframe method)": [[252, "polars.DataFrame.reverse", false]], "reverse() (polars.expr method)": [[618, "polars.Expr.reverse", false]], "reverse() (polars.expr.arr method)": [[364, "polars.Expr.arr.reverse", false]], "reverse() (polars.expr.list method)": [[538, "polars.Expr.list.reverse", false]], "reverse() (polars.expr.str method)": [[684, "polars.Expr.str.reverse", false]], "reverse() (polars.lazyframe method)": [[872, "polars.LazyFrame.reverse", false]], "reverse() (polars.series method)": [[1202, "polars.Series.reverse", false]], "reverse() (polars.series.arr method)": [[967, "polars.Series.arr.reverse", false]], "reverse() (polars.series.list method)": [[1151, "polars.Series.list.reverse", false]], "reverse() (polars.series.str method)": [[1262, "polars.Series.str.reverse", false]], "rle() (polars.expr method)": [[619, "polars.Expr.rle", false]], "rle() (polars.series method)": [[1203, "polars.Series.rle", false]], "rle_id() (polars.expr method)": [[620, "polars.Expr.rle_id", false]], "rle_id() (polars.series method)": [[1204, "polars.Series.rle_id", false]], "rolling() (polars.dataframe method)": [[253, "polars.DataFrame.rolling", false]], "rolling() (polars.expr method)": [[621, "polars.Expr.rolling", false]], "rolling() (polars.lazyframe method)": [[873, "polars.LazyFrame.rolling", false]], "rolling_corr() (in module polars)": [[786, "polars.rolling_corr", false]], "rolling_cov() (in module polars)": [[787, "polars.rolling_cov", false]], "rolling_map() (polars.expr method)": [[622, "polars.Expr.rolling_map", false]], "rolling_map() (polars.series method)": [[1205, "polars.Series.rolling_map", false]], "rolling_max() (polars.expr method)": [[623, "polars.Expr.rolling_max", false]], "rolling_max() (polars.series method)": [[1206, "polars.Series.rolling_max", false]], "rolling_max_by() (polars.expr method)": [[624, "polars.Expr.rolling_max_by", false]], "rolling_mean() (polars.expr method)": [[625, "polars.Expr.rolling_mean", false]], "rolling_mean() (polars.series method)": [[1207, "polars.Series.rolling_mean", false]], "rolling_mean_by() (polars.expr method)": [[626, "polars.Expr.rolling_mean_by", false]], "rolling_median() (polars.expr method)": [[627, "polars.Expr.rolling_median", false]], "rolling_median() (polars.series method)": [[1208, "polars.Series.rolling_median", false]], "rolling_median_by() (polars.expr method)": [[628, "polars.Expr.rolling_median_by", false]], "rolling_min() (polars.expr method)": [[629, "polars.Expr.rolling_min", false]], "rolling_min() (polars.series method)": [[1209, "polars.Series.rolling_min", false]], "rolling_min_by() (polars.expr method)": [[630, "polars.Expr.rolling_min_by", false]], "rolling_quantile() (polars.expr method)": [[631, "polars.Expr.rolling_quantile", false]], "rolling_quantile() (polars.series method)": [[1210, "polars.Series.rolling_quantile", false]], "rolling_quantile_by() (polars.expr method)": [[632, "polars.Expr.rolling_quantile_by", false]], "rolling_skew() (polars.expr method)": [[633, "polars.Expr.rolling_skew", false]], "rolling_skew() (polars.series method)": [[1211, "polars.Series.rolling_skew", false]], "rolling_std() (polars.expr method)": [[634, "polars.Expr.rolling_std", false]], "rolling_std() (polars.series method)": [[1212, "polars.Series.rolling_std", false]], "rolling_std_by() (polars.expr method)": [[635, "polars.Expr.rolling_std_by", false]], "rolling_sum() (polars.expr method)": [[636, "polars.Expr.rolling_sum", false]], "rolling_sum() (polars.series method)": [[1213, "polars.Series.rolling_sum", false]], "rolling_sum_by() (polars.expr method)": [[637, "polars.Expr.rolling_sum_by", false]], "rolling_var() (polars.expr method)": [[638, "polars.Expr.rolling_var", false]], "rolling_var() (polars.series method)": [[1214, "polars.Series.rolling_var", false]], "rolling_var_by() (polars.expr method)": [[639, "polars.Expr.rolling_var_by", false]], "root_names() (polars.expr.meta method)": [[573, "polars.Expr.meta.root_names", false]], "round() (polars.expr method)": [[640, "polars.Expr.round", false]], "round() (polars.expr.dt method)": [[445, "polars.Expr.dt.round", false]], "round() (polars.series method)": [[1215, "polars.Series.round", false]], "round() (polars.series.dt method)": [[1055, "polars.Series.dt.round", false]], "round_sig_figs() (polars.expr method)": [[641, "polars.Expr.round_sig_figs", false]], "round_sig_figs() (polars.series method)": [[1216, "polars.Series.round_sig_figs", false]], "row() (polars.dataframe method)": [[254, "polars.DataFrame.row", false]], "rows() (polars.dataframe method)": [[255, "polars.DataFrame.rows", false]], "rows_by_key() (polars.dataframe method)": [[256, "polars.DataFrame.rows_by_key", false]], "rowserror": [[112, "polars.exceptions.RowsError", false]], "sample() (polars.dataframe method)": [[257, "polars.DataFrame.sample", false]], "sample() (polars.expr method)": [[642, "polars.Expr.sample", false]], "sample() (polars.expr.list method)": [[539, "polars.Expr.list.sample", false]], "sample() (polars.series method)": [[1217, "polars.Series.sample", false]], "sample() (polars.series.list method)": [[1152, "polars.Series.list.sample", false]], "save() (polars.config class method)": [[5, "polars.Config.save", false]], "save_to_file() (polars.config class method)": [[6, "polars.Config.save_to_file", false]], "scan_csv() (in module polars)": [[150, "polars.scan_csv", false]], "scan_delta() (in module polars)": [[151, "polars.scan_delta", false]], "scan_iceberg() (in module polars)": [[152, "polars.scan_iceberg", false]], "scan_ipc() (in module polars)": [[153, "polars.scan_ipc", false]], "scan_ndjson() (in module polars)": [[154, "polars.scan_ndjson", false]], "scan_parquet() (in module polars)": [[155, "polars.scan_parquet", false]], "scan_pyarrow_dataset() (in module polars)": [[156, "polars.scan_pyarrow_dataset", false]], "scatter() (polars.series method)": [[1218, "polars.Series.scatter", false]], "schema (polars.dataframe property)": [[258, "polars.DataFrame.schema", false]], "schema (polars.lazyframe property)": [[874, "polars.LazyFrame.schema", false]], "schema (polars.series.struct attribute)": [[1288, "polars.Series.struct.schema", false]], "schemaerror": [[115, "polars.exceptions.SchemaError", false]], "schemafieldnotfounderror": [[116, "polars.exceptions.SchemaFieldNotFoundError", false]], "search_sorted() (polars.expr method)": [[643, "polars.Expr.search_sorted", false]], "search_sorted() (polars.series method)": [[1219, "polars.Series.search_sorted", false]], "second() (polars.expr.dt method)": [[446, "polars.Expr.dt.second", false]], "second() (polars.series.dt method)": [[1056, "polars.Series.dt.second", false]], "select() (in module polars)": [[788, "polars.select", false]], "select() (polars.dataframe method)": [[259, "polars.DataFrame.select", false]], "select() (polars.lazyframe method)": [[875, "polars.LazyFrame.select", false]], "select_seq() (polars.dataframe method)": [[260, "polars.DataFrame.select_seq", false]], "select_seq() (polars.lazyframe method)": [[876, "polars.LazyFrame.select_seq", false]], "serialize() (polars.dataframe method)": [[261, "polars.DataFrame.serialize", false]], "serialize() (polars.expr.meta method)": [[574, "polars.Expr.meta.serialize", false]], "serialize() (polars.lazyframe method)": [[877, "polars.LazyFrame.serialize", false]], "series() (in module polars.testing.parametric)": [[170, "polars.testing.parametric.series", false]], "set() (polars.series method)": [[1220, "polars.Series.set", false]], "set_ascii_tables() (polars.config class method)": [[7, "polars.Config.set_ascii_tables", false]], "set_auto_structify() (polars.config class method)": [[8, "polars.Config.set_auto_structify", false]], "set_decimal_separator() (polars.config class method)": [[9, "polars.Config.set_decimal_separator", false]], "set_difference() (polars.expr.list method)": [[540, "polars.Expr.list.set_difference", false]], "set_difference() (polars.series.list method)": [[1153, "polars.Series.list.set_difference", false]], "set_float_precision() (polars.config class method)": [[10, "polars.Config.set_float_precision", false]], "set_fmt_float() (polars.config class method)": [[11, "polars.Config.set_fmt_float", false]], "set_fmt_str_lengths() (polars.config class method)": [[12, "polars.Config.set_fmt_str_lengths", false]], "set_fmt_table_cell_list_len() (polars.config class method)": [[13, "polars.Config.set_fmt_table_cell_list_len", false]], "set_intersection() (polars.expr.list method)": [[541, "polars.Expr.list.set_intersection", false]], "set_intersection() (polars.series.list method)": [[1154, "polars.Series.list.set_intersection", false]], "set_profile() (in module polars.testing.parametric)": [[171, "polars.testing.parametric.set_profile", false]], "set_random_seed() (in module polars)": [[157, "polars.set_random_seed", false]], "set_sorted() (polars.dataframe method)": [[262, "polars.DataFrame.set_sorted", false]], "set_sorted() (polars.expr method)": [[644, "polars.Expr.set_sorted", false]], "set_sorted() (polars.lazyframe method)": [[878, "polars.LazyFrame.set_sorted", false]], "set_sorted() (polars.series method)": [[1221, "polars.Series.set_sorted", false]], "set_streaming_chunk_size() (polars.config class method)": [[14, "polars.Config.set_streaming_chunk_size", false]], "set_symmetric_difference() (polars.expr.list method)": [[542, "polars.Expr.list.set_symmetric_difference", false]], "set_symmetric_difference() (polars.series.list method)": [[1155, "polars.Series.list.set_symmetric_difference", false]], "set_tbl_cell_alignment() (polars.config class method)": [[15, "polars.Config.set_tbl_cell_alignment", false]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[16, "polars.Config.set_tbl_cell_numeric_alignment", false]], "set_tbl_cols() (polars.config class method)": [[17, "polars.Config.set_tbl_cols", false]], "set_tbl_column_data_type_inline() (polars.config class method)": [[18, "polars.Config.set_tbl_column_data_type_inline", false]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[19, "polars.Config.set_tbl_dataframe_shape_below", false]], "set_tbl_formatting() (polars.config class method)": [[20, "polars.Config.set_tbl_formatting", false]], "set_tbl_hide_column_data_types() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_column_data_types", false]], "set_tbl_hide_column_names() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_column_names", false]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[23, "polars.Config.set_tbl_hide_dataframe_shape", false]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[24, "polars.Config.set_tbl_hide_dtype_separator", false]], "set_tbl_rows() (polars.config class method)": [[25, "polars.Config.set_tbl_rows", false]], "set_tbl_width_chars() (polars.config class method)": [[26, "polars.Config.set_tbl_width_chars", false]], "set_thousands_separator() (polars.config class method)": [[27, "polars.Config.set_thousands_separator", false]], "set_trim_decimal_zeros() (polars.config class method)": [[28, "polars.Config.set_trim_decimal_zeros", false]], "set_union() (polars.expr.list method)": [[543, "polars.Expr.list.set_union", false]], "set_union() (polars.series.list method)": [[1156, "polars.Series.list.set_union", false]], "set_verbose() (polars.config class method)": [[29, "polars.Config.set_verbose", false]], "shape (polars.dataframe property)": [[263, "polars.DataFrame.shape", false]], "shape (polars.series property)": [[1222, "polars.Series.shape", false]], "shapeerror": [[117, "polars.exceptions.ShapeError", false]], "shift() (polars.dataframe method)": [[264, "polars.DataFrame.shift", false]], "shift() (polars.expr method)": [[645, "polars.Expr.shift", false]], "shift() (polars.expr.arr method)": [[365, "polars.Expr.arr.shift", false]], "shift() (polars.expr.list method)": [[544, "polars.Expr.list.shift", false]], "shift() (polars.lazyframe method)": [[879, "polars.LazyFrame.shift", false]], "shift() (polars.series method)": [[1223, "polars.Series.shift", false]], "shift() (polars.series.arr method)": [[968, "polars.Series.arr.shift", false]], "shift() (polars.series.list method)": [[1157, "polars.Series.list.shift", false]], "show_graph() (polars.expr.meta method)": [[575, "polars.Expr.meta.show_graph", false]], "show_graph() (polars.lazyframe method)": [[880, "polars.LazyFrame.show_graph", false]], "show_versions() (in module polars)": [[158, "polars.show_versions", false]], "shrink_dtype() (polars.expr method)": [[646, "polars.Expr.shrink_dtype", false]], "shrink_dtype() (polars.series method)": [[1224, "polars.Series.shrink_dtype", false]], "shrink_to_fit() (polars.dataframe method)": [[265, "polars.DataFrame.shrink_to_fit", false]], "shrink_to_fit() (polars.series method)": [[1225, "polars.Series.shrink_to_fit", false]], "shuffle() (polars.expr method)": [[647, "polars.Expr.shuffle", false]], "shuffle() (polars.series method)": [[1226, "polars.Series.shuffle", false]], "sign() (polars.expr method)": [[648, "polars.Expr.sign", false]], "sign() (polars.series method)": [[1227, "polars.Series.sign", false]], "signed_integer() (in module polars.selectors)": [[930, "polars.selectors.signed_integer", false]], "sin() (polars.expr method)": [[649, "polars.Expr.sin", false]], "sin() (polars.series method)": [[1228, "polars.Series.sin", false]], "sinh() (polars.expr method)": [[650, "polars.Expr.sinh", false]], "sinh() (polars.series method)": [[1229, "polars.Series.sinh", false]], "sink_csv() (polars.lazyframe method)": [[46, "polars.LazyFrame.sink_csv", false]], "sink_ipc() (polars.lazyframe method)": [[47, "polars.LazyFrame.sink_ipc", false]], "sink_ndjson() (polars.lazyframe method)": [[48, "polars.LazyFrame.sink_ndjson", false]], "sink_parquet() (polars.lazyframe method)": [[49, "polars.LazyFrame.sink_parquet", false]], "size() (polars.expr.bin method)": [[379, "polars.Expr.bin.size", false]], "size() (polars.series.bin method)": [[981, "polars.Series.bin.size", false]], "skew() (polars.expr method)": [[651, "polars.Expr.skew", false]], "skew() (polars.series method)": [[1230, "polars.Series.skew", false]], "slice() (polars.dataframe method)": [[266, "polars.DataFrame.slice", false]], "slice() (polars.expr method)": [[652, "polars.Expr.slice", false]], "slice() (polars.expr.list method)": [[545, "polars.Expr.list.slice", false]], "slice() (polars.expr.str method)": [[685, "polars.Expr.str.slice", false]], "slice() (polars.lazyframe method)": [[881, "polars.LazyFrame.slice", false]], "slice() (polars.series method)": [[1231, "polars.Series.slice", false]], "slice() (polars.series.list method)": [[1158, "polars.Series.list.slice", false]], "slice() (polars.series.str method)": [[1263, "polars.Series.str.slice", false]], "sort() (polars.dataframe method)": [[267, "polars.DataFrame.sort", false]], "sort() (polars.expr method)": [[653, "polars.Expr.sort", false]], "sort() (polars.expr.arr method)": [[366, "polars.Expr.arr.sort", false]], "sort() (polars.expr.list method)": [[546, "polars.Expr.list.sort", false]], "sort() (polars.lazyframe method)": [[882, "polars.LazyFrame.sort", false]], "sort() (polars.series method)": [[1232, "polars.Series.sort", false]], "sort() (polars.series.arr method)": [[969, "polars.Series.arr.sort", false]], "sort() (polars.series.list method)": [[1159, "polars.Series.list.sort", false]], "sort_by() (polars.expr method)": [[654, "polars.Expr.sort_by", false]], "split() (polars.expr.str method)": [[686, "polars.Expr.str.split", false]], "split() (polars.series.str method)": [[1264, "polars.Series.str.split", false]], "split_exact() (polars.expr.str method)": [[687, "polars.Expr.str.split_exact", false]], "split_exact() (polars.series.str method)": [[1265, "polars.Series.str.split_exact", false]], "splitn() (polars.expr.str method)": [[688, "polars.Expr.str.splitn", false]], "splitn() (polars.series.str method)": [[1266, "polars.Series.str.splitn", false]], "sql() (in module polars)": [[789, "polars.sql", false]], "sql() (polars.dataframe method)": [[268, "polars.DataFrame.sql", false]], "sql() (polars.lazyframe method)": [[883, "polars.LazyFrame.sql", false]], "sql_expr() (in module polars)": [[790, "polars.sql_expr", false]], "sqlcontext (class in polars)": [[1347, "polars.SQLContext", false]], "sqlinterfaceerror": [[113, "polars.exceptions.SQLInterfaceError", false]], "sqlsyntaxerror": [[114, "polars.exceptions.SQLSyntaxError", false]], "sqrt() (polars.expr method)": [[655, "polars.Expr.sqrt", false]], "sqrt() (polars.series method)": [[1233, "polars.Series.sqrt", false]], "starts_with() (in module polars.selectors)": [[930, "polars.selectors.starts_with", false]], "starts_with() (polars.expr.bin method)": [[380, "polars.Expr.bin.starts_with", false]], "starts_with() (polars.expr.cat method)": [[397, "polars.Expr.cat.starts_with", false]], "starts_with() (polars.expr.str method)": [[689, "polars.Expr.str.starts_with", false]], "starts_with() (polars.series.bin method)": [[982, "polars.Series.bin.starts_with", false]], "starts_with() (polars.series.cat method)": [[999, "polars.Series.cat.starts_with", false]], "starts_with() (polars.series.str method)": [[1267, "polars.Series.str.starts_with", false]], "state() (polars.config class method)": [[30, "polars.Config.state", false]], "std() (in module polars)": [[791, "polars.std", false]], "std() (polars.dataframe method)": [[269, "polars.DataFrame.std", false]], "std() (polars.expr method)": [[656, "polars.Expr.std", false]], "std() (polars.expr.arr method)": [[367, "polars.Expr.arr.std", false]], "std() (polars.expr.list method)": [[547, "polars.Expr.list.std", false]], "std() (polars.lazyframe method)": [[884, "polars.LazyFrame.std", false]], "std() (polars.series method)": [[1234, "polars.Series.std", false]], "std() (polars.series.arr method)": [[970, "polars.Series.arr.std", false]], "std() (polars.series.list method)": [[1160, "polars.Series.list.std", false]], "strftime() (polars.expr.dt method)": [[447, "polars.Expr.dt.strftime", false]], "strftime() (polars.series.dt method)": [[1057, "polars.Series.dt.strftime", false]], "string (class in polars.datatypes)": [[81, "polars.datatypes.String", false]], "string() (in module polars.selectors)": [[930, "polars.selectors.string", false]], "stringcache (class in polars)": [[50, "polars.StringCache", false]], "stringcachemismatcherror": [[118, "polars.exceptions.StringCacheMismatchError", false]], "strip_chars() (polars.expr.str method)": [[690, "polars.Expr.str.strip_chars", false]], "strip_chars() (polars.series.str method)": [[1268, "polars.Series.str.strip_chars", false]], "strip_chars_end() (polars.expr.str method)": [[691, "polars.Expr.str.strip_chars_end", false]], "strip_chars_end() (polars.series.str method)": [[1269, "polars.Series.str.strip_chars_end", false]], "strip_chars_start() (polars.expr.str method)": [[692, "polars.Expr.str.strip_chars_start", false]], "strip_chars_start() (polars.series.str method)": [[1270, "polars.Series.str.strip_chars_start", false]], "strip_prefix() (polars.expr.str method)": [[693, "polars.Expr.str.strip_prefix", false]], "strip_prefix() (polars.series.str method)": [[1271, "polars.Series.str.strip_prefix", false]], "strip_suffix() (polars.expr.str method)": [[694, "polars.Expr.str.strip_suffix", false]], "strip_suffix() (polars.series.str method)": [[1272, "polars.Series.str.strip_suffix", false]], "strptime() (polars.expr.str method)": [[695, "polars.Expr.str.strptime", false]], "strptime() (polars.series.str method)": [[1273, "polars.Series.str.strptime", false]], "struct (class in polars.datatypes)": [[82, "polars.datatypes.Struct", false]], "struct() (in module polars)": [[792, "polars.struct", false]], "structfieldnotfounderror": [[119, "polars.exceptions.StructFieldNotFoundError", false]], "style (polars.dataframe property)": [[325, "polars.DataFrame.style", false]], "sub() (polars.expr method)": [[711, "polars.Expr.sub", false]], "suffix() (polars.expr.name method)": [[589, "polars.Expr.name.suffix", false]], "suffix_fields() (polars.expr.name method)": [[590, "polars.Expr.name.suffix_fields", false]], "sum() (in module polars)": [[793, "polars.sum", false]], "sum() (polars.dataframe method)": [[270, "polars.DataFrame.sum", false]], "sum() (polars.dataframe.group_by.groupby method)": [[314, "polars.dataframe.group_by.GroupBy.sum", false]], "sum() (polars.expr method)": [[712, "polars.Expr.sum", false]], "sum() (polars.expr.arr method)": [[368, "polars.Expr.arr.sum", false]], "sum() (polars.expr.list method)": [[548, "polars.Expr.list.sum", false]], "sum() (polars.lazyframe method)": [[885, "polars.LazyFrame.sum", false]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[914, "polars.lazyframe.group_by.LazyGroupBy.sum", false]], "sum() (polars.series method)": [[1290, "polars.Series.sum", false]], "sum() (polars.series.arr method)": [[971, "polars.Series.arr.sum", false]], "sum() (polars.series.list method)": [[1161, "polars.Series.list.sum", false]], "sum_horizontal() (in module polars)": [[794, "polars.sum_horizontal", false]], "sum_horizontal() (polars.dataframe method)": [[271, "polars.DataFrame.sum_horizontal", false]], "tables() (polars.sqlcontext method)": [[1333, "polars.SQLContext.tables", false]], "tail() (in module polars)": [[795, "polars.tail", false]], "tail() (polars.dataframe method)": [[272, "polars.DataFrame.tail", false]], "tail() (polars.dataframe.group_by.groupby method)": [[315, "polars.dataframe.group_by.GroupBy.tail", false]], "tail() (polars.expr method)": [[713, "polars.Expr.tail", false]], "tail() (polars.expr.list method)": [[549, "polars.Expr.list.tail", false]], "tail() (polars.expr.str method)": [[696, "polars.Expr.str.tail", false]], "tail() (polars.lazyframe method)": [[886, "polars.LazyFrame.tail", false]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[915, "polars.lazyframe.group_by.LazyGroupBy.tail", false]], "tail() (polars.series method)": [[1291, "polars.Series.tail", false]], "tail() (polars.series.list method)": [[1162, "polars.Series.list.tail", false]], "tail() (polars.series.str method)": [[1274, "polars.Series.str.tail", false]], "tan() (polars.expr method)": [[714, "polars.Expr.tan", false]], "tan() (polars.series method)": [[1292, "polars.Series.tan", false]], "tanh() (polars.expr method)": [[715, "polars.Expr.tanh", false]], "tanh() (polars.series method)": [[1293, "polars.Series.tanh", false]], "temporal() (in module polars.selectors)": [[930, "polars.selectors.temporal", false]], "thread_pool_size() (in module polars)": [[172, "polars.thread_pool_size", false]], "threadpool_size() (in module polars)": [[173, "polars.threadpool_size", false]], "time (class in polars.datatypes)": [[83, "polars.datatypes.Time", false]], "time() (in module polars)": [[796, "polars.time", false]], "time() (in module polars.selectors)": [[930, "polars.selectors.time", false]], "time() (polars.expr.dt method)": [[448, "polars.Expr.dt.time", false]], "time() (polars.series.dt method)": [[1058, "polars.Series.dt.time", false]], "time_range() (in module polars)": [[797, "polars.time_range", false]], "time_ranges() (in module polars)": [[798, "polars.time_ranges", false]], "timestamp() (polars.expr.dt method)": [[449, "polars.Expr.dt.timestamp", false]], "timestamp() (polars.series.dt method)": [[1059, "polars.Series.dt.timestamp", false]], "to_array() (polars.expr.list method)": [[550, "polars.Expr.list.to_array", false]], "to_array() (polars.series.list method)": [[1163, "polars.Series.list.to_array", false]], "to_arrow() (polars.dataframe method)": [[273, "polars.DataFrame.to_arrow", false]], "to_arrow() (polars.series method)": [[1294, "polars.Series.to_arrow", false]], "to_date() (polars.expr.str method)": [[697, "polars.Expr.str.to_date", false]], "to_date() (polars.series.str method)": [[1275, "polars.Series.str.to_date", false]], "to_datetime() (polars.expr.str method)": [[698, "polars.Expr.str.to_datetime", false]], "to_datetime() (polars.series.str method)": [[1276, "polars.Series.str.to_datetime", false]], "to_decimal() (polars.expr.str method)": [[699, "polars.Expr.str.to_decimal", false]], "to_decimal() (polars.series.str method)": [[1277, "polars.Series.str.to_decimal", false]], "to_dict() (polars.dataframe method)": [[274, "polars.DataFrame.to_dict", false]], "to_dicts() (polars.dataframe method)": [[275, "polars.DataFrame.to_dicts", false]], "to_dummies() (polars.dataframe method)": [[276, "polars.DataFrame.to_dummies", false]], "to_dummies() (polars.series method)": [[1295, "polars.Series.to_dummies", false]], "to_frame() (polars.series method)": [[1296, "polars.Series.to_frame", false]], "to_init_repr() (polars.dataframe method)": [[277, "polars.DataFrame.to_init_repr", false]], "to_init_repr() (polars.series method)": [[1297, "polars.Series.to_init_repr", false]], "to_integer() (polars.expr.str method)": [[700, "polars.Expr.str.to_integer", false]], "to_integer() (polars.series.str method)": [[1278, "polars.Series.str.to_integer", false]], "to_jax() (polars.dataframe method)": [[278, "polars.DataFrame.to_jax", false]], "to_jax() (polars.series method)": [[1298, "polars.Series.to_jax", false]], "to_list() (polars.expr.arr method)": [[369, "polars.Expr.arr.to_list", false]], "to_list() (polars.series method)": [[1299, "polars.Series.to_list", false]], "to_list() (polars.series.arr method)": [[972, "polars.Series.arr.to_list", false]], "to_local() (polars.series.cat method)": [[1000, "polars.Series.cat.to_local", false]], "to_lowercase() (polars.expr.name method)": [[591, "polars.Expr.name.to_lowercase", false]], "to_lowercase() (polars.expr.str method)": [[701, "polars.Expr.str.to_lowercase", false]], "to_lowercase() (polars.series.str method)": [[1279, "polars.Series.str.to_lowercase", false]], "to_numpy() (polars.dataframe method)": [[279, "polars.DataFrame.to_numpy", false]], "to_numpy() (polars.series method)": [[1300, "polars.Series.to_numpy", false]], "to_pandas() (polars.dataframe method)": [[280, "polars.DataFrame.to_pandas", false]], "to_pandas() (polars.series method)": [[1301, "polars.Series.to_pandas", false]], "to_physical() (polars.expr method)": [[716, "polars.Expr.to_physical", false]], "to_physical() (polars.series method)": [[1302, "polars.Series.to_physical", false]], "to_series() (polars.dataframe method)": [[281, "polars.DataFrame.to_series", false]], "to_string() (polars.expr.dt method)": [[450, "polars.Expr.dt.to_string", false]], "to_string() (polars.series.dt method)": [[1060, "polars.Series.dt.to_string", false]], "to_struct() (polars.dataframe method)": [[282, "polars.DataFrame.to_struct", false]], "to_struct() (polars.expr.arr method)": [[370, "polars.Expr.arr.to_struct", false]], "to_struct() (polars.expr.list method)": [[551, "polars.Expr.list.to_struct", false]], "to_struct() (polars.series.arr method)": [[973, "polars.Series.arr.to_struct", false]], "to_struct() (polars.series.list method)": [[1164, "polars.Series.list.to_struct", false]], "to_time() (polars.expr.str method)": [[702, "polars.Expr.str.to_time", false]], "to_time() (polars.series.str method)": [[1280, "polars.Series.str.to_time", false]], "to_titlecase() (polars.expr.str method)": [[703, "polars.Expr.str.to_titlecase", false]], "to_titlecase() (polars.series.str method)": [[1281, "polars.Series.str.to_titlecase", false]], "to_torch() (polars.dataframe method)": [[283, "polars.DataFrame.to_torch", false]], "to_torch() (polars.series method)": [[1303, "polars.Series.to_torch", false]], "to_uppercase() (polars.expr.name method)": [[592, "polars.Expr.name.to_uppercase", false]], "to_uppercase() (polars.expr.str method)": [[704, "polars.Expr.str.to_uppercase", false]], "to_uppercase() (polars.series.str method)": [[1282, "polars.Series.str.to_uppercase", false]], "toomanyrowsreturnederror": [[120, "polars.exceptions.TooManyRowsReturnedError", false]], "top_k() (polars.dataframe method)": [[284, "polars.DataFrame.top_k", false]], "top_k() (polars.expr method)": [[717, "polars.Expr.top_k", false]], "top_k() (polars.lazyframe method)": [[887, "polars.LazyFrame.top_k", false]], "top_k() (polars.series method)": [[1304, "polars.Series.top_k", false]], "top_k_by() (polars.expr method)": [[718, "polars.Expr.top_k_by", false]], "total_days() (polars.expr.dt method)": [[451, "polars.Expr.dt.total_days", false]], "total_days() (polars.series.dt method)": [[1061, "polars.Series.dt.total_days", false]], "total_hours() (polars.expr.dt method)": [[452, "polars.Expr.dt.total_hours", false]], "total_hours() (polars.series.dt method)": [[1062, "polars.Series.dt.total_hours", false]], "total_microseconds() (polars.expr.dt method)": [[453, "polars.Expr.dt.total_microseconds", false]], "total_microseconds() (polars.series.dt method)": [[1063, "polars.Series.dt.total_microseconds", false]], "total_milliseconds() (polars.expr.dt method)": [[454, "polars.Expr.dt.total_milliseconds", false]], "total_milliseconds() (polars.series.dt method)": [[1064, "polars.Series.dt.total_milliseconds", false]], "total_minutes() (polars.expr.dt method)": [[455, "polars.Expr.dt.total_minutes", false]], "total_minutes() (polars.series.dt method)": [[1065, "polars.Series.dt.total_minutes", false]], "total_nanoseconds() (polars.expr.dt method)": [[456, "polars.Expr.dt.total_nanoseconds", false]], "total_nanoseconds() (polars.series.dt method)": [[1066, "polars.Series.dt.total_nanoseconds", false]], "total_seconds() (polars.expr.dt method)": [[457, "polars.Expr.dt.total_seconds", false]], "total_seconds() (polars.series.dt method)": [[1067, "polars.Series.dt.total_seconds", false]], "transpose() (polars.dataframe method)": [[285, "polars.DataFrame.transpose", false]], "tree_format() (polars.expr.meta method)": [[576, "polars.Expr.meta.tree_format", false]], "truediv() (polars.expr method)": [[719, "polars.Expr.truediv", false]], "truncate() (polars.expr.dt method)": [[458, "polars.Expr.dt.truncate", false]], "truncate() (polars.series.dt method)": [[1068, "polars.Series.dt.truncate", false]], "uint16 (class in polars.datatypes)": [[84, "polars.datatypes.UInt16", false]], "uint32 (class in polars.datatypes)": [[85, "polars.datatypes.UInt32", false]], "uint64 (class in polars.datatypes)": [[86, "polars.datatypes.UInt64", false]], "uint8 (class in polars.datatypes)": [[87, "polars.datatypes.UInt8", false]], "undo_aliases() (polars.expr.meta method)": [[577, "polars.Expr.meta.undo_aliases", false]], "unique() (polars.dataframe method)": [[286, "polars.DataFrame.unique", false]], "unique() (polars.expr method)": [[720, "polars.Expr.unique", false]], "unique() (polars.expr.arr method)": [[371, "polars.Expr.arr.unique", false]], "unique() (polars.expr.list method)": [[552, "polars.Expr.list.unique", false]], "unique() (polars.lazyframe method)": [[888, "polars.LazyFrame.unique", false]], "unique() (polars.series method)": [[1305, "polars.Series.unique", false]], "unique() (polars.series.arr method)": [[974, "polars.Series.arr.unique", false]], "unique() (polars.series.list method)": [[1165, "polars.Series.list.unique", false]], "unique_counts() (polars.expr method)": [[721, "polars.Expr.unique_counts", false]], "unique_counts() (polars.series method)": [[1306, "polars.Series.unique_counts", false]], "unknown (class in polars.datatypes)": [[88, "polars.datatypes.Unknown", false]], "unnest() (polars.dataframe method)": [[287, "polars.DataFrame.unnest", false]], "unnest() (polars.expr.struct method)": [[709, "polars.Expr.struct.unnest", false]], "unnest() (polars.lazyframe method)": [[889, "polars.LazyFrame.unnest", false]], "unnest() (polars.series.struct method)": [[1289, "polars.Series.struct.unnest", false]], "unpivot() (polars.dataframe method)": [[288, "polars.DataFrame.unpivot", false]], "unpivot() (polars.lazyframe method)": [[890, "polars.LazyFrame.unpivot", false]], "unregister() (polars.sqlcontext method)": [[1334, "polars.SQLContext.unregister", false]], "unsigned_integer() (in module polars.selectors)": [[930, "polars.selectors.unsigned_integer", false]], "unstablewarning": [[121, "polars.exceptions.UnstableWarning", false]], "unstack() (polars.dataframe method)": [[289, "polars.DataFrame.unstack", false]], "unsuitablesqlerror": [[122, "polars.exceptions.UnsuitableSQLError", false]], "update() (polars.dataframe method)": [[290, "polars.DataFrame.update", false]], "update() (polars.lazyframe method)": [[891, "polars.LazyFrame.update", false]], "upper_bound() (polars.expr method)": [[722, "polars.Expr.upper_bound", false]], "upper_bound() (polars.series method)": [[1307, "polars.Series.upper_bound", false]], "upsample() (polars.dataframe method)": [[291, "polars.DataFrame.upsample", false]], "uses_lexical_ordering() (polars.series.cat method)": [[1001, "polars.Series.cat.uses_lexical_ordering", false]], "using_string_cache() (in module polars)": [[174, "polars.using_string_cache", false]], "utf8 (in module polars.datatypes)": [[89, "polars.datatypes.Utf8", false]], "value_counts() (polars.expr method)": [[723, "polars.Expr.value_counts", false]], "value_counts() (polars.series method)": [[1308, "polars.Series.value_counts", false]], "var() (in module polars)": [[799, "polars.var", false]], "var() (polars.dataframe method)": [[292, "polars.DataFrame.var", false]], "var() (polars.expr method)": [[724, "polars.Expr.var", false]], "var() (polars.expr.arr method)": [[372, "polars.Expr.arr.var", false]], "var() (polars.expr.list method)": [[553, "polars.Expr.list.var", false]], "var() (polars.lazyframe method)": [[892, "polars.LazyFrame.var", false]], "var() (polars.series method)": [[1309, "polars.Series.var", false]], "var() (polars.series.arr method)": [[975, "polars.Series.arr.var", false]], "var() (polars.series.list method)": [[1166, "polars.Series.list.var", false]], "vstack() (polars.dataframe method)": [[293, "polars.DataFrame.vstack", false]], "week() (polars.expr.dt method)": [[459, "polars.Expr.dt.week", false]], "week() (polars.series.dt method)": [[1069, "polars.Series.dt.week", false]], "weekday() (polars.expr.dt method)": [[460, "polars.Expr.dt.weekday", false]], "weekday() (polars.series.dt method)": [[1070, "polars.Series.dt.weekday", false]], "when() (in module polars)": [[800, "polars.when", false]], "where() (polars.expr method)": [[725, "polars.Expr.where", false]], "width (polars.dataframe property)": [[294, "polars.DataFrame.width", false]], "width (polars.lazyframe property)": [[893, "polars.LazyFrame.width", false]], "with_columns() (polars.dataframe method)": [[295, "polars.DataFrame.with_columns", false]], "with_columns() (polars.lazyframe method)": [[894, "polars.LazyFrame.with_columns", false]], "with_columns_seq() (polars.dataframe method)": [[296, "polars.DataFrame.with_columns_seq", false]], "with_columns_seq() (polars.lazyframe method)": [[895, "polars.LazyFrame.with_columns_seq", false]], "with_context() (polars.lazyframe method)": [[896, "polars.LazyFrame.with_context", false]], "with_fields() (polars.expr.struct method)": [[710, "polars.Expr.struct.with_fields", false]], "with_row_count() (polars.dataframe method)": [[297, "polars.DataFrame.with_row_count", false]], "with_row_count() (polars.lazyframe method)": [[897, "polars.LazyFrame.with_row_count", false]], "with_row_index() (polars.dataframe method)": [[298, "polars.DataFrame.with_row_index", false]], "with_row_index() (polars.lazyframe method)": [[898, "polars.LazyFrame.with_row_index", false]], "with_time_unit() (polars.expr.dt method)": [[461, "polars.Expr.dt.with_time_unit", false]], "with_time_unit() (polars.series.dt method)": [[1071, "polars.Series.dt.with_time_unit", false]], "write_avro() (polars.dataframe method)": [[35, "polars.DataFrame.write_avro", false]], "write_clipboard() (polars.dataframe method)": [[36, "polars.DataFrame.write_clipboard", false]], "write_csv() (polars.dataframe method)": [[37, "polars.DataFrame.write_csv", false]], "write_database() (polars.dataframe method)": [[38, "polars.DataFrame.write_database", false]], "write_delta() (polars.dataframe method)": [[39, "polars.DataFrame.write_delta", false]], "write_excel() (polars.dataframe method)": [[40, "polars.DataFrame.write_excel", false]], "write_ipc() (polars.dataframe method)": [[41, "polars.DataFrame.write_ipc", false]], "write_ipc_stream() (polars.dataframe method)": [[42, "polars.DataFrame.write_ipc_stream", false]], "write_json() (polars.dataframe method)": [[43, "polars.DataFrame.write_json", false]], "write_json() (polars.expr.meta method)": [[578, "polars.Expr.meta.write_json", false]], "write_ndjson() (polars.dataframe method)": [[44, "polars.DataFrame.write_ndjson", false]], "write_parquet() (polars.dataframe method)": [[45, "polars.DataFrame.write_parquet", false]], "xor() (polars.expr method)": [[726, "polars.Expr.xor", false]], "year() (polars.expr.dt method)": [[462, "polars.Expr.dt.year", false]], "year() (polars.series.dt method)": [[1072, "polars.Series.dt.year", false]], "zeros() (in module polars)": [[801, "polars.zeros", false]], "zfill() (polars.expr.str method)": [[705, "polars.Expr.str.zfill", false]], "zfill() (polars.series.str method)": [[1283, "polars.Series.str.zfill", false]], "zip_with() (polars.series method)": [[1310, "polars.Series.zip_with", false]]}, "objects": {"polars": [[31, 1, 1, "", "CredentialProvider"], [32, 1, 1, "", "CredentialProviderAWS"], [33, 1, 1, "", "CredentialProviderAzure"], [34, 1, 1, "", "CredentialProviderGCP"], [1347, 1, 1, "", "SQLContext"], [50, 1, 1, "", "StringCache"], [51, 4, 1, "", "align_frames"], [727, 4, 1, "", "all"], [728, 4, 1, "", "all_horizontal"], [729, 4, 1, "", "any"], [730, 4, 1, "", "any_horizontal"], [731, 4, 1, "", "approx_n_unique"], [732, 4, 1, "", "arange"], [733, 4, 1, "", "arctan2"], [734, 4, 1, "", "arctan2d"], [735, 4, 1, "", "arg_sort_by"], [736, 4, 1, "", "arg_where"], [56, 4, 1, "", "build_info"], [737, 4, 1, "", "business_day_count"], [738, 4, 1, "", "coalesce"], [57, 4, 1, "", "collect_all"], [58, 4, 1, "", "collect_all_async"], [59, 4, 1, "", "concat"], [739, 4, 1, "", "concat_arr"], [740, 4, 1, "", "concat_list"], [741, 4, 1, "", "concat_str"], [742, 4, 1, "", "corr"], [743, 4, 1, "", "count"], [744, 4, 1, "", "cov"], [745, 4, 1, "", "cum_count"], [746, 4, 1, "", "cum_fold"], [747, 4, 1, "", "cum_reduce"], [748, 4, 1, "", "cum_sum"], [749, 4, 1, "", "cum_sum_horizontal"], [750, 4, 1, "", "date"], [751, 4, 1, "", "date_range"], [752, 4, 1, "", "date_ranges"], [753, 4, 1, "", "datetime"], [754, 4, 1, "", "datetime_range"], [755, 4, 1, "", "datetime_ranges"], [90, 4, 1, "", "disable_string_cache"], [756, 4, 1, "", "duration"], [757, 4, 1, "", "element"], [91, 4, 1, "", "enable_string_cache"], [92, 4, 1, "", "escape_regex"], [758, 4, 1, "", "exclude"], [759, 4, 1, "", "first"], [760, 4, 1, "", "fold"], [761, 4, 1, "", "format"], [123, 4, 1, "", "from_arrow"], [124, 4, 1, "", "from_dataframe"], [125, 4, 1, "", "from_dict"], [126, 4, 1, "", "from_dicts"], [762, 4, 1, "", "from_epoch"], [127, 4, 1, "", "from_numpy"], [128, 4, 1, "", "from_pandas"], [129, 4, 1, "", "from_records"], [130, 4, 1, "", "from_repr"], [131, 4, 1, "", "get_index_type"], [763, 4, 1, "", "groups"], [764, 4, 1, "", "head"], [765, 4, 1, "", "implode"], [766, 4, 1, "", "int_range"], [767, 4, 1, "", "int_ranges"], [133, 4, 1, "", "json_normalize"], [768, 4, 1, "", "last"], [769, 4, 1, "", "len"], [770, 4, 1, "", "lit"], [771, 4, 1, "", "map_batches"], [772, 4, 1, "", "map_groups"], [773, 4, 1, "", "max"], [774, 4, 1, "", "max_horizontal"], [775, 4, 1, "", "mean"], [776, 4, 1, "", "mean_horizontal"], [777, 4, 1, "", "median"], [778, 4, 1, "", "min"], [779, 4, 1, "", "min_horizontal"], [780, 4, 1, "", "n_unique"], [781, 4, 1, "", "nth"], [782, 4, 1, "", "ones"], [928, 6, 0, "-", "plugins"], [783, 4, 1, "", "quantile"], [134, 4, 1, "", "read_avro"], [135, 4, 1, "", "read_clipboard"], [136, 4, 1, "", "read_csv"], [137, 4, 1, "", "read_csv_batched"], [138, 4, 1, "", "read_database"], [139, 4, 1, "", "read_database_uri"], [140, 4, 1, "", "read_delta"], [141, 4, 1, "", "read_excel"], [142, 4, 1, "", "read_ipc"], [143, 4, 1, "", "read_ipc_schema"], [144, 4, 1, "", "read_ipc_stream"], [145, 4, 1, "", "read_json"], [146, 4, 1, "", "read_ndjson"], [147, 4, 1, "", "read_ods"], [148, 4, 1, "", "read_parquet"], [149, 4, 1, "", "read_parquet_schema"], [784, 4, 1, "", "reduce"], [785, 4, 1, "", "repeat"], [786, 4, 1, "", "rolling_corr"], [787, 4, 1, "", "rolling_cov"], [150, 4, 1, "", "scan_csv"], [151, 4, 1, "", "scan_delta"], [152, 4, 1, "", "scan_iceberg"], [153, 4, 1, "", "scan_ipc"], [154, 4, 1, "", "scan_ndjson"], [155, 4, 1, "", "scan_parquet"], [156, 4, 1, "", "scan_pyarrow_dataset"], [788, 4, 1, "", "select"], [930, 6, 0, "-", "selectors"], [157, 4, 1, "", "set_random_seed"], [158, 4, 1, "", "show_versions"], [789, 4, 1, "", "sql"], [790, 4, 1, "", "sql_expr"], [791, 4, 1, "", "std"], [792, 4, 1, "", "struct"], [793, 4, 1, "", "sum"], [794, 4, 1, "", "sum_horizontal"], [795, 4, 1, "", "tail"], [172, 4, 1, "", "thread_pool_size"], [173, 4, 1, "", "threadpool_size"], [796, 4, 1, "", "time"], [797, 4, 1, "", "time_range"], [798, 4, 1, "", "time_ranges"], [174, 4, 1, "", "using_string_cache"], [799, 4, 1, "", "var"], [800, 4, 1, "", "when"], [801, 4, 1, "", "zeros"]], "polars.Config": [[2, 0, 1, "", "load"], [3, 0, 1, "", "load_from_file"], [4, 0, 1, "", "restore_defaults"], [5, 0, 1, "", "save"], [6, 0, 1, "", "save_to_file"], [7, 0, 1, "", "set_ascii_tables"], [8, 0, 1, "", "set_auto_structify"], [9, 0, 1, "", "set_decimal_separator"], [10, 0, 1, "", "set_float_precision"], [11, 0, 1, "", "set_fmt_float"], [12, 0, 1, "", "set_fmt_str_lengths"], [13, 0, 1, "", "set_fmt_table_cell_list_len"], [14, 0, 1, "", "set_streaming_chunk_size"], [15, 0, 1, "", "set_tbl_cell_alignment"], [16, 0, 1, "", "set_tbl_cell_numeric_alignment"], [17, 0, 1, "", "set_tbl_cols"], [18, 0, 1, "", "set_tbl_column_data_type_inline"], [19, 0, 1, "", "set_tbl_dataframe_shape_below"], [20, 0, 1, "", "set_tbl_formatting"], [21, 0, 1, "", "set_tbl_hide_column_data_types"], [22, 0, 1, "", "set_tbl_hide_column_names"], [23, 0, 1, "", "set_tbl_hide_dataframe_shape"], [24, 0, 1, "", "set_tbl_hide_dtype_separator"], [25, 0, 1, "", "set_tbl_rows"], [26, 0, 1, "", "set_tbl_width_chars"], [27, 0, 1, "", "set_thousands_separator"], [28, 0, 1, "", "set_trim_decimal_zeros"], [29, 0, 1, "", "set_verbose"], [30, 0, 1, "", "state"]], "polars.CredentialProvider": [[31, 0, 1, "", "__init__"]], "polars.CredentialProviderAWS": [[32, 0, 1, "", "__init__"]], "polars.CredentialProviderAzure": [[33, 0, 1, "", "__init__"]], "polars.CredentialProviderGCP": [[34, 0, 1, "", "__init__"]], "polars.DataFrame": [[177, 0, 1, "", "__array__"], [178, 0, 1, "", "__arrow_c_stream__"], [179, 0, 1, "", "__dataframe__"], [180, 0, 1, "", "__getitem__"], [181, 0, 1, "", "approx_n_unique"], [182, 0, 1, "", "bottom_k"], [183, 0, 1, "", "cast"], [184, 0, 1, "", "clear"], [185, 0, 1, "", "clone"], [186, 0, 1, "", "collect_schema"], [187, 2, 1, "", "columns"], [188, 0, 1, "", "corr"], [189, 0, 1, "", "count"], [190, 0, 1, "", "describe"], [191, 0, 1, "", "deserialize"], [192, 0, 1, "", "drop"], [193, 0, 1, "", "drop_in_place"], [194, 0, 1, "", "drop_nans"], [195, 0, 1, "", "drop_nulls"], [196, 2, 1, "", "dtypes"], [197, 0, 1, "", "equals"], [198, 0, 1, "", "estimated_size"], [199, 0, 1, "", "explode"], [200, 0, 1, "", "extend"], [201, 0, 1, "", "fill_nan"], [202, 0, 1, "", "fill_null"], [203, 0, 1, "", "filter"], [204, 2, 1, "", "flags"], [205, 0, 1, "", "fold"], [206, 0, 1, "", "gather_every"], [207, 0, 1, "", "get_column"], [208, 0, 1, "", "get_column_index"], [209, 0, 1, "", "get_columns"], [210, 0, 1, "", "glimpse"], [211, 0, 1, "", "group_by"], [212, 0, 1, "", "group_by_dynamic"], [213, 0, 1, "", "hash_rows"], [214, 0, 1, "", "head"], [215, 2, 1, "", "height"], [216, 0, 1, "", "hstack"], [217, 0, 1, "", "insert_column"], [218, 0, 1, "", "interpolate"], [219, 0, 1, "", "is_duplicated"], [220, 0, 1, "", "is_empty"], [221, 0, 1, "", "is_unique"], [222, 0, 1, "", "item"], [223, 0, 1, "", "iter_columns"], [224, 0, 1, "", "iter_rows"], [225, 0, 1, "", "iter_slices"], [226, 0, 1, "", "join"], [227, 0, 1, "", "join_asof"], [228, 0, 1, "", "join_where"], [229, 0, 1, "", "lazy"], [230, 0, 1, "", "limit"], [231, 0, 1, "", "map_rows"], [232, 0, 1, "", "max"], [233, 0, 1, "", "max_horizontal"], [234, 0, 1, "", "mean"], [235, 0, 1, "", "mean_horizontal"], [236, 0, 1, "", "median"], [237, 0, 1, "", "melt"], [238, 0, 1, "", "merge_sorted"], [239, 0, 1, "", "min"], [240, 0, 1, "", "min_horizontal"], [241, 0, 1, "", "n_chunks"], [242, 0, 1, "", "n_unique"], [243, 0, 1, "", "null_count"], [244, 0, 1, "", "partition_by"], [245, 0, 1, "", "pipe"], [246, 0, 1, "", "pivot"], [324, 2, 1, "", "plot"], [247, 0, 1, "", "product"], [248, 0, 1, "", "quantile"], [249, 0, 1, "", "rechunk"], [250, 0, 1, "", "rename"], [251, 0, 1, "", "replace_column"], [252, 0, 1, "", "reverse"], [253, 0, 1, "", "rolling"], [254, 0, 1, "", "row"], [255, 0, 1, "", "rows"], [256, 0, 1, "", "rows_by_key"], [257, 0, 1, "", "sample"], [258, 2, 1, "", "schema"], [259, 0, 1, "", "select"], [260, 0, 1, "", "select_seq"], [261, 0, 1, "", "serialize"], [262, 0, 1, "", "set_sorted"], [263, 2, 1, "", "shape"], [264, 0, 1, "", "shift"], [265, 0, 1, "", "shrink_to_fit"], [266, 0, 1, "", "slice"], [267, 0, 1, "", "sort"], [268, 0, 1, "", "sql"], [269, 0, 1, "", "std"], [325, 2, 1, "", "style"], [270, 0, 1, "", "sum"], [271, 0, 1, "", "sum_horizontal"], [272, 0, 1, "", "tail"], [273, 0, 1, "", "to_arrow"], [274, 0, 1, "", "to_dict"], [275, 0, 1, "", "to_dicts"], [276, 0, 1, "", "to_dummies"], [277, 0, 1, "", "to_init_repr"], [278, 0, 1, "", "to_jax"], [279, 0, 1, "", "to_numpy"], [280, 0, 1, "", "to_pandas"], [281, 0, 1, "", "to_series"], [282, 0, 1, "", "to_struct"], [283, 0, 1, "", "to_torch"], [284, 0, 1, "", "top_k"], [285, 0, 1, "", "transpose"], [286, 0, 1, "", "unique"], [287, 0, 1, "", "unnest"], [288, 0, 1, "", "unpivot"], [289, 0, 1, "", "unstack"], [290, 0, 1, "", "update"], [291, 0, 1, "", "upsample"], [292, 0, 1, "", "var"], [293, 0, 1, "", "vstack"], [294, 2, 1, "", "width"], [295, 0, 1, "", "with_columns"], [296, 0, 1, "", "with_columns_seq"], [297, 0, 1, "", "with_row_count"], [298, 0, 1, "", "with_row_index"], [35, 0, 1, "", "write_avro"], [36, 0, 1, "", "write_clipboard"], [37, 0, 1, "", "write_csv"], [38, 0, 1, "", "write_database"], [39, 0, 1, "", "write_delta"], [40, 0, 1, "", "write_excel"], [41, 0, 1, "", "write_ipc"], [42, 0, 1, "", "write_ipc_stream"], [43, 0, 1, "", "write_json"], [44, 0, 1, "", "write_ndjson"], [45, 0, 1, "", "write_parquet"]], "polars.Expr": [[329, 0, 1, "", "abs"], [330, 0, 1, "", "add"], [331, 0, 1, "", "agg_groups"], [332, 0, 1, "", "alias"], [333, 0, 1, "", "all"], [334, 0, 1, "", "and_"], [335, 0, 1, "", "any"], [336, 0, 1, "", "append"], [337, 0, 1, "", "approx_n_unique"], [338, 0, 1, "", "arccos"], [339, 0, 1, "", "arccosh"], [340, 0, 1, "", "arcsin"], [341, 0, 1, "", "arcsinh"], [342, 0, 1, "", "arctan"], [343, 0, 1, "", "arctanh"], [344, 0, 1, "", "arg_max"], [345, 0, 1, "", "arg_min"], [346, 0, 1, "", "arg_sort"], [347, 0, 1, "", "arg_true"], [348, 0, 1, "", "arg_unique"], [373, 0, 1, "", "backward_fill"], [381, 0, 1, "", "bitwise_and"], [382, 0, 1, "", "bitwise_count_ones"], [383, 0, 1, "", "bitwise_count_zeros"], [384, 0, 1, "", "bitwise_leading_ones"], [385, 0, 1, "", "bitwise_leading_zeros"], [386, 0, 1, "", "bitwise_or"], [387, 0, 1, "", "bitwise_trailing_ones"], [388, 0, 1, "", "bitwise_trailing_zeros"], [389, 0, 1, "", "bitwise_xor"], [390, 0, 1, "", "bottom_k"], [391, 0, 1, "", "bottom_k_by"], [392, 0, 1, "", "cast"], [398, 0, 1, "", "cbrt"], [399, 0, 1, "", "ceil"], [400, 0, 1, "", "clip"], [401, 0, 1, "", "cos"], [402, 0, 1, "", "cosh"], [403, 0, 1, "", "cot"], [404, 0, 1, "", "count"], [405, 0, 1, "", "cum_count"], [406, 0, 1, "", "cum_max"], [407, 0, 1, "", "cum_min"], [408, 0, 1, "", "cum_prod"], [409, 0, 1, "", "cum_sum"], [410, 0, 1, "", "cumulative_eval"], [411, 0, 1, "", "cut"], [412, 0, 1, "", "degrees"], [413, 0, 1, "", "deserialize"], [414, 0, 1, "", "diff"], [415, 0, 1, "", "dot"], [416, 0, 1, "", "drop_nans"], [417, 0, 1, "", "drop_nulls"], [463, 0, 1, "", "entropy"], [464, 0, 1, "", "eq"], [465, 0, 1, "", "eq_missing"], [466, 0, 1, "", "ewm_mean"], [467, 0, 1, "", "ewm_mean_by"], [468, 0, 1, "", "ewm_std"], [469, 0, 1, "", "ewm_var"], [470, 0, 1, "", "exclude"], [471, 0, 1, "", "exp"], [472, 0, 1, "", "explode"], [473, 0, 1, "", "extend_constant"], [474, 0, 1, "", "fill_nan"], [475, 0, 1, "", "fill_null"], [476, 0, 1, "", "filter"], [477, 0, 1, "", "first"], [478, 0, 1, "", "flatten"], [479, 0, 1, "", "floor"], [480, 0, 1, "", "floordiv"], [481, 0, 1, "", "forward_fill"], [482, 0, 1, "", "from_json"], [483, 0, 1, "", "gather"], [484, 0, 1, "", "gather_every"], [485, 0, 1, "", "ge"], [486, 0, 1, "", "get"], [487, 0, 1, "", "gt"], [488, 0, 1, "", "has_nulls"], [489, 0, 1, "", "hash"], [490, 0, 1, "", "head"], [491, 0, 1, "", "hist"], [492, 0, 1, "", "implode"], [493, 0, 1, "", "index_of"], [494, 0, 1, "", "inspect"], [495, 0, 1, "", "interpolate"], [496, 0, 1, "", "interpolate_by"], [497, 0, 1, "", "is_between"], [498, 0, 1, "", "is_duplicated"], [499, 0, 1, "", "is_finite"], [500, 0, 1, "", "is_first_distinct"], [501, 0, 1, "", "is_in"], [502, 0, 1, "", "is_infinite"], [503, 0, 1, "", "is_last_distinct"], [504, 0, 1, "", "is_nan"], [505, 0, 1, "", "is_not_nan"], [506, 0, 1, "", "is_not_null"], [507, 0, 1, "", "is_null"], [508, 0, 1, "", "is_unique"], [509, 0, 1, "", "kurtosis"], [510, 0, 1, "", "last"], [511, 0, 1, "", "le"], [512, 0, 1, "", "len"], [513, 0, 1, "", "limit"], [554, 0, 1, "", "log"], [555, 0, 1, "", "log10"], [556, 0, 1, "", "log1p"], [557, 0, 1, "", "lower_bound"], [558, 0, 1, "", "lt"], [559, 0, 1, "", "map_batches"], [560, 0, 1, "", "map_elements"], [561, 0, 1, "", "max"], [562, 0, 1, "", "mean"], [563, 0, 1, "", "median"], [579, 0, 1, "", "min"], [580, 0, 1, "", "mod"], [581, 0, 1, "", "mode"], [582, 0, 1, "", "mul"], [583, 0, 1, "", "n_unique"], [593, 0, 1, "", "nan_max"], [594, 0, 1, "", "nan_min"], [595, 0, 1, "", "ne"], [596, 0, 1, "", "ne_missing"], [597, 0, 1, "", "neg"], [598, 0, 1, "", "not_"], [599, 0, 1, "", "null_count"], [600, 0, 1, "", "or_"], [601, 0, 1, "", "over"], [602, 0, 1, "", "pct_change"], [603, 0, 1, "", "peak_max"], [604, 0, 1, "", "peak_min"], [605, 0, 1, "", "pipe"], [606, 0, 1, "", "pow"], [607, 0, 1, "", "product"], [608, 0, 1, "", "qcut"], [609, 0, 1, "", "quantile"], [610, 0, 1, "", "radians"], [611, 0, 1, "", "rank"], [612, 0, 1, "", "rechunk"], [613, 0, 1, "", "reinterpret"], [614, 0, 1, "", "repeat_by"], [615, 0, 1, "", "replace"], [616, 0, 1, "", "replace_strict"], [617, 0, 1, "", "reshape"], [618, 0, 1, "", "reverse"], [619, 0, 1, "", "rle"], [620, 0, 1, "", "rle_id"], [621, 0, 1, "", "rolling"], [622, 0, 1, "", "rolling_map"], [623, 0, 1, "", "rolling_max"], [624, 0, 1, "", "rolling_max_by"], [625, 0, 1, "", "rolling_mean"], [626, 0, 1, "", "rolling_mean_by"], [627, 0, 1, "", "rolling_median"], [628, 0, 1, "", "rolling_median_by"], [629, 0, 1, "", "rolling_min"], [630, 0, 1, "", "rolling_min_by"], [631, 0, 1, "", "rolling_quantile"], [632, 0, 1, "", "rolling_quantile_by"], [633, 0, 1, "", "rolling_skew"], [634, 0, 1, "", "rolling_std"], [635, 0, 1, "", "rolling_std_by"], [636, 0, 1, "", "rolling_sum"], [637, 0, 1, "", "rolling_sum_by"], [638, 0, 1, "", "rolling_var"], [639, 0, 1, "", "rolling_var_by"], [640, 0, 1, "", "round"], [641, 0, 1, "", "round_sig_figs"], [642, 0, 1, "", "sample"], [643, 0, 1, "", "search_sorted"], [644, 0, 1, "", "set_sorted"], [645, 0, 1, "", "shift"], [646, 0, 1, "", "shrink_dtype"], [647, 0, 1, "", "shuffle"], [648, 0, 1, "", "sign"], [649, 0, 1, "", "sin"], [650, 0, 1, "", "sinh"], [651, 0, 1, "", "skew"], [652, 0, 1, "", "slice"], [653, 0, 1, "", "sort"], [654, 0, 1, "", "sort_by"], [655, 0, 1, "", "sqrt"], [656, 0, 1, "", "std"], [711, 0, 1, "", "sub"], [712, 0, 1, "", "sum"], [713, 0, 1, "", "tail"], [714, 0, 1, "", "tan"], [715, 0, 1, "", "tanh"], [716, 0, 1, "", "to_physical"], [717, 0, 1, "", "top_k"], [718, 0, 1, "", "top_k_by"], [719, 0, 1, "", "truediv"], [720, 0, 1, "", "unique"], [721, 0, 1, "", "unique_counts"], [722, 0, 1, "", "upper_bound"], [723, 0, 1, "", "value_counts"], [724, 0, 1, "", "var"], [725, 0, 1, "", "where"], [726, 0, 1, "", "xor"]], "polars.Expr.arr": [[349, 0, 1, "", "all"], [350, 0, 1, "", "any"], [351, 0, 1, "", "arg_max"], [352, 0, 1, "", "arg_min"], [353, 0, 1, "", "contains"], [354, 0, 1, "", "count_matches"], [355, 0, 1, "", "explode"], [356, 0, 1, "", "first"], [357, 0, 1, "", "get"], [358, 0, 1, "", "join"], [359, 0, 1, "", "last"], [360, 0, 1, "", "max"], [361, 0, 1, "", "median"], [362, 0, 1, "", "min"], [363, 0, 1, "", "n_unique"], [364, 0, 1, "", "reverse"], [365, 0, 1, "", "shift"], [366, 0, 1, "", "sort"], [367, 0, 1, "", "std"], [368, 0, 1, "", "sum"], [369, 0, 1, "", "to_list"], [370, 0, 1, "", "to_struct"], [371, 0, 1, "", "unique"], [372, 0, 1, "", "var"]], "polars.Expr.bin": [[374, 0, 1, "", "contains"], [375, 0, 1, "", "decode"], [376, 0, 1, "", "encode"], [377, 0, 1, "", "ends_with"], [378, 0, 1, "", "reinterpret"], [379, 0, 1, "", "size"], [380, 0, 1, "", "starts_with"]], "polars.Expr.cat": [[393, 0, 1, "", "ends_with"], [394, 0, 1, "", "get_categories"], [395, 0, 1, "", "len_bytes"], [396, 0, 1, "", "len_chars"], [397, 0, 1, "", "starts_with"]], "polars.Expr.dt": [[418, 0, 1, "", "add_business_days"], [419, 0, 1, "", "base_utc_offset"], [420, 0, 1, "", "cast_time_unit"], [421, 0, 1, "", "century"], [422, 0, 1, "", "combine"], [423, 0, 1, "", "convert_time_zone"], [424, 0, 1, "", "date"], [425, 0, 1, "", "datetime"], [426, 0, 1, "", "day"], [427, 0, 1, "", "dst_offset"], [428, 0, 1, "", "epoch"], [429, 0, 1, "", "hour"], [430, 0, 1, "", "is_leap_year"], [431, 0, 1, "", "iso_year"], [432, 0, 1, "", "microsecond"], [433, 0, 1, "", "millennium"], [434, 0, 1, "", "millisecond"], [435, 0, 1, "", "minute"], [436, 0, 1, "", "month"], [437, 0, 1, "", "month_end"], [438, 0, 1, "", "month_start"], [439, 0, 1, "", "nanosecond"], [440, 0, 1, "", "offset_by"], [441, 0, 1, "", "ordinal_day"], [442, 0, 1, "", "quarter"], [443, 0, 1, "", "replace"], [444, 0, 1, "", "replace_time_zone"], [445, 0, 1, "", "round"], [446, 0, 1, "", "second"], [447, 0, 1, "", "strftime"], [448, 0, 1, "", "time"], [449, 0, 1, "", "timestamp"], [450, 0, 1, "", "to_string"], [451, 0, 1, "", "total_days"], [452, 0, 1, "", "total_hours"], [453, 0, 1, "", "total_microseconds"], [454, 0, 1, "", "total_milliseconds"], [455, 0, 1, "", "total_minutes"], [456, 0, 1, "", "total_nanoseconds"], [457, 0, 1, "", "total_seconds"], [458, 0, 1, "", "truncate"], [459, 0, 1, "", "week"], [460, 0, 1, "", "weekday"], [461, 0, 1, "", "with_time_unit"], [462, 0, 1, "", "year"]], "polars.Expr.list": [[514, 0, 1, "", "all"], [515, 0, 1, "", "any"], [516, 0, 1, "", "arg_max"], [517, 0, 1, "", "arg_min"], [518, 0, 1, "", "concat"], [519, 0, 1, "", "contains"], [520, 0, 1, "", "count_matches"], [521, 0, 1, "", "diff"], [522, 0, 1, "", "drop_nulls"], [523, 0, 1, "", "eval"], [524, 0, 1, "", "explode"], [525, 0, 1, "", "first"], [526, 0, 1, "", "gather"], [527, 0, 1, "", "gather_every"], [528, 0, 1, "", "get"], [529, 0, 1, "", "head"], [530, 0, 1, "", "join"], [531, 0, 1, "", "last"], [532, 0, 1, "", "len"], [533, 0, 1, "", "max"], [534, 0, 1, "", "mean"], [535, 0, 1, "", "median"], [536, 0, 1, "", "min"], [537, 0, 1, "", "n_unique"], [538, 0, 1, "", "reverse"], [539, 0, 1, "", "sample"], [540, 0, 1, "", "set_difference"], [541, 0, 1, "", "set_intersection"], [542, 0, 1, "", "set_symmetric_difference"], [543, 0, 1, "", "set_union"], [544, 0, 1, "", "shift"], [545, 0, 1, "", "slice"], [546, 0, 1, "", "sort"], [547, 0, 1, "", "std"], [548, 0, 1, "", "sum"], [549, 0, 1, "", "tail"], [550, 0, 1, "", "to_array"], [551, 0, 1, "", "to_struct"], [552, 0, 1, "", "unique"], [553, 0, 1, "", "var"]], "polars.Expr.meta": [[564, 0, 1, "", "eq"], [565, 0, 1, "", "has_multiple_outputs"], [566, 0, 1, "", "is_column"], [567, 0, 1, "", "is_column_selection"], [568, 0, 1, "", "is_literal"], [569, 0, 1, "", "is_regex_projection"], [570, 0, 1, "", "ne"], [571, 0, 1, "", "output_name"], [572, 0, 1, "", "pop"], [573, 0, 1, "", "root_names"], [574, 0, 1, "", "serialize"], [575, 0, 1, "", "show_graph"], [576, 0, 1, "", "tree_format"], [577, 0, 1, "", "undo_aliases"], [578, 0, 1, "", "write_json"]], "polars.Expr.name": [[584, 0, 1, "", "keep"], [585, 0, 1, "", "map"], [586, 0, 1, "", "map_fields"], [587, 0, 1, "", "prefix"], [588, 0, 1, "", "prefix_fields"], [589, 0, 1, "", "suffix"], [590, 0, 1, "", "suffix_fields"], [591, 0, 1, "", "to_lowercase"], [592, 0, 1, "", "to_uppercase"]], "polars.Expr.str": [[657, 0, 1, "", "concat"], [658, 0, 1, "", "contains"], [659, 0, 1, "", "contains_any"], [660, 0, 1, "", "count_matches"], [661, 0, 1, "", "decode"], [662, 0, 1, "", "encode"], [663, 0, 1, "", "ends_with"], [664, 0, 1, "", "escape_regex"], [665, 0, 1, "", "explode"], [666, 0, 1, "", "extract"], [667, 0, 1, "", "extract_all"], [668, 0, 1, "", "extract_groups"], [669, 0, 1, "", "extract_many"], [670, 0, 1, "", "find"], [671, 0, 1, "", "find_many"], [672, 0, 1, "", "head"], [673, 0, 1, "", "join"], [674, 0, 1, "", "json_decode"], [675, 0, 1, "", "json_path_match"], [676, 0, 1, "", "len_bytes"], [677, 0, 1, "", "len_chars"], [678, 0, 1, "", "normalize"], [679, 0, 1, "", "pad_end"], [680, 0, 1, "", "pad_start"], [681, 0, 1, "", "replace"], [682, 0, 1, "", "replace_all"], [683, 0, 1, "", "replace_many"], [684, 0, 1, "", "reverse"], [685, 0, 1, "", "slice"], [686, 0, 1, "", "split"], [687, 0, 1, "", "split_exact"], [688, 0, 1, "", "splitn"], [689, 0, 1, "", "starts_with"], [690, 0, 1, "", "strip_chars"], [691, 0, 1, "", "strip_chars_end"], [692, 0, 1, "", "strip_chars_start"], [693, 0, 1, "", "strip_prefix"], [694, 0, 1, "", "strip_suffix"], [695, 0, 1, "", "strptime"], [696, 0, 1, "", "tail"], [697, 0, 1, "", "to_date"], [698, 0, 1, "", "to_datetime"], [699, 0, 1, "", "to_decimal"], [700, 0, 1, "", "to_integer"], [701, 0, 1, "", "to_lowercase"], [702, 0, 1, "", "to_time"], [703, 0, 1, "", "to_titlecase"], [704, 0, 1, "", "to_uppercase"], [705, 0, 1, "", "zfill"]], "polars.Expr.struct": [[706, 0, 1, "", "field"], [707, 0, 1, "", "json_encode"], [708, 0, 1, "", "rename_fields"], [709, 0, 1, "", "unnest"], [710, 0, 1, "", "with_fields"]], "polars.LazyFrame": [[825, 0, 1, "", "approx_n_unique"], [826, 0, 1, "", "bottom_k"], [827, 0, 1, "", "cache"], [828, 0, 1, "", "cast"], [829, 0, 1, "", "clear"], [830, 0, 1, "", "clone"], [831, 0, 1, "", "collect"], [832, 0, 1, "", "collect_async"], [833, 0, 1, "", "collect_schema"], [834, 2, 1, "", "columns"], [835, 0, 1, "", "count"], [836, 0, 1, "", "describe"], [837, 0, 1, "", "deserialize"], [838, 0, 1, "", "drop"], [839, 0, 1, "", "drop_nans"], [840, 0, 1, "", "drop_nulls"], [841, 2, 1, "", "dtypes"], [842, 0, 1, "", "explain"], [843, 0, 1, "", "explode"], [844, 0, 1, "", "fill_nan"], [845, 0, 1, "", "fill_null"], [846, 0, 1, "", "filter"], [847, 0, 1, "", "first"], [848, 0, 1, "", "gather_every"], [849, 0, 1, "", "group_by"], [850, 0, 1, "", "group_by_dynamic"], [851, 0, 1, "", "head"], [852, 0, 1, "", "inspect"], [853, 0, 1, "", "interpolate"], [854, 0, 1, "", "join"], [855, 0, 1, "", "join_asof"], [856, 0, 1, "", "join_where"], [857, 0, 1, "", "last"], [858, 0, 1, "", "lazy"], [859, 0, 1, "", "limit"], [860, 0, 1, "", "map_batches"], [861, 0, 1, "", "max"], [862, 0, 1, "", "mean"], [863, 0, 1, "", "median"], [864, 0, 1, "", "melt"], [865, 0, 1, "", "merge_sorted"], [866, 0, 1, "", "min"], [867, 0, 1, "", "null_count"], [868, 0, 1, "", "pipe"], [869, 0, 1, "", "profile"], [870, 0, 1, "", "quantile"], [871, 0, 1, "", "rename"], [872, 0, 1, "", "reverse"], [873, 0, 1, "", "rolling"], [874, 2, 1, "", "schema"], [875, 0, 1, "", "select"], [876, 0, 1, "", "select_seq"], [877, 0, 1, "", "serialize"], [878, 0, 1, "", "set_sorted"], [879, 0, 1, "", "shift"], [880, 0, 1, "", "show_graph"], [46, 0, 1, "", "sink_csv"], [47, 0, 1, "", "sink_ipc"], [48, 0, 1, "", "sink_ndjson"], [49, 0, 1, "", "sink_parquet"], [881, 0, 1, "", "slice"], [882, 0, 1, "", "sort"], [883, 0, 1, "", "sql"], [884, 0, 1, "", "std"], [885, 0, 1, "", "sum"], [886, 0, 1, "", "tail"], [887, 0, 1, "", "top_k"], [888, 0, 1, "", "unique"], [889, 0, 1, "", "unnest"], [890, 0, 1, "", "unpivot"], [891, 0, 1, "", "update"], [892, 0, 1, "", "var"], [893, 2, 1, "", "width"], [894, 0, 1, "", "with_columns"], [895, 0, 1, "", "with_columns_seq"], [896, 0, 1, "", "with_context"], [897, 0, 1, "", "with_row_count"], [898, 0, 1, "", "with_row_index"]], "polars.SQLContext": [[1347, 0, 1, "", "__enter__"], [1347, 0, 1, "", "__exit__"], [1347, 0, 1, "", "__init__"], [1328, 0, 1, "", "execute"], [1329, 0, 1, "", "execute_global"], [1330, 0, 1, "", "register"], [1331, 0, 1, "", "register_globals"], [1332, 0, 1, "", "register_many"], [1333, 0, 1, "", "tables"], [1334, 0, 1, "", "unregister"]], "polars.Series": [[932, 0, 1, "", "__array__"], [933, 0, 1, "", "__arrow_c_stream__"], [934, 0, 1, "", "__getitem__"], [935, 0, 1, "", "abs"], [936, 0, 1, "", "alias"], [937, 0, 1, "", "all"], [938, 0, 1, "", "any"], [939, 0, 1, "", "append"], [940, 0, 1, "", "approx_n_unique"], [941, 0, 1, "", "arccos"], [942, 0, 1, "", "arccosh"], [943, 0, 1, "", "arcsin"], [944, 0, 1, "", "arcsinh"], [945, 0, 1, "", "arctan"], [946, 0, 1, "", "arctanh"], [947, 0, 1, "", "arg_max"], [948, 0, 1, "", "arg_min"], [949, 0, 1, "", "arg_sort"], [950, 0, 1, "", "arg_true"], [951, 0, 1, "", "arg_unique"], [983, 0, 1, "", "bitwise_and"], [984, 0, 1, "", "bitwise_count_ones"], [985, 0, 1, "", "bitwise_count_zeros"], [986, 0, 1, "", "bitwise_leading_ones"], [987, 0, 1, "", "bitwise_leading_zeros"], [988, 0, 1, "", "bitwise_or"], [989, 0, 1, "", "bitwise_trailing_ones"], [990, 0, 1, "", "bitwise_trailing_zeros"], [991, 0, 1, "", "bitwise_xor"], [992, 0, 1, "", "bottom_k"], [993, 0, 1, "", "cast"], [1002, 0, 1, "", "cbrt"], [1003, 0, 1, "", "ceil"], [1004, 0, 1, "", "chunk_lengths"], [1005, 0, 1, "", "clear"], [1006, 0, 1, "", "clip"], [1007, 0, 1, "", "clone"], [1008, 0, 1, "", "cos"], [1009, 0, 1, "", "cosh"], [1010, 0, 1, "", "cot"], [1011, 0, 1, "", "count"], [1012, 0, 1, "", "cum_count"], [1013, 0, 1, "", "cum_max"], [1014, 0, 1, "", "cum_min"], [1015, 0, 1, "", "cum_prod"], [1016, 0, 1, "", "cum_sum"], [1017, 0, 1, "", "cumulative_eval"], [1018, 0, 1, "", "cut"], [1019, 0, 1, "", "describe"], [1020, 0, 1, "", "diff"], [1021, 0, 1, "", "dot"], [1022, 0, 1, "", "drop_nans"], [1023, 0, 1, "", "drop_nulls"], [1073, 2, 1, "", "dtype"], [1074, 0, 1, "", "entropy"], [1075, 0, 1, "", "eq"], [1076, 0, 1, "", "eq_missing"], [1077, 0, 1, "", "equals"], [1078, 0, 1, "", "estimated_size"], [1079, 0, 1, "", "ewm_mean"], [1080, 0, 1, "", "ewm_mean_by"], [1081, 0, 1, "", "ewm_std"], [1082, 0, 1, "", "ewm_var"], [1083, 0, 1, "", "exp"], [1084, 0, 1, "", "explode"], [1085, 0, 1, "", "extend"], [1086, 0, 1, "", "extend_constant"], [1087, 0, 1, "", "fill_nan"], [1088, 0, 1, "", "fill_null"], [1089, 0, 1, "", "filter"], [1090, 0, 1, "", "first"], [1091, 2, 1, "", "flags"], [1092, 0, 1, "", "floor"], [1093, 0, 1, "", "gather"], [1094, 0, 1, "", "gather_every"], [1095, 0, 1, "", "ge"], [1096, 0, 1, "", "get_chunks"], [1097, 0, 1, "", "gt"], [1098, 0, 1, "", "has_nulls"], [1099, 0, 1, "", "has_validity"], [1100, 0, 1, "", "hash"], [1101, 0, 1, "", "head"], [1102, 0, 1, "", "hist"], [1103, 0, 1, "", "implode"], [1104, 0, 1, "", "index_of"], [1105, 0, 1, "", "interpolate"], [1106, 0, 1, "", "interpolate_by"], [1107, 0, 1, "", "is_between"], [1108, 0, 1, "", "is_duplicated"], [1109, 0, 1, "", "is_empty"], [1110, 0, 1, "", "is_finite"], [1111, 0, 1, "", "is_first_distinct"], [1112, 0, 1, "", "is_in"], [1113, 0, 1, "", "is_infinite"], [1114, 0, 1, "", "is_last_distinct"], [1115, 0, 1, "", "is_nan"], [1116, 0, 1, "", "is_not_nan"], [1117, 0, 1, "", "is_not_null"], [1118, 0, 1, "", "is_null"], [1119, 0, 1, "", "is_sorted"], [1120, 0, 1, "", "is_unique"], [1121, 0, 1, "", "item"], [1122, 0, 1, "", "kurtosis"], [1123, 0, 1, "", "last"], [1124, 0, 1, "", "le"], [1125, 0, 1, "", "len"], [1126, 0, 1, "", "limit"], [1167, 0, 1, "", "log"], [1168, 0, 1, "", "log10"], [1169, 0, 1, "", "log1p"], [1170, 0, 1, "", "lower_bound"], [1171, 0, 1, "", "lt"], [1172, 0, 1, "", "map_elements"], [1173, 0, 1, "", "max"], [1174, 0, 1, "", "mean"], [1175, 0, 1, "", "median"], [1176, 0, 1, "", "min"], [1177, 0, 1, "", "mode"], [1178, 0, 1, "", "n_chunks"], [1179, 0, 1, "", "n_unique"], [1180, 2, 1, "", "name"], [1181, 0, 1, "", "nan_max"], [1182, 0, 1, "", "nan_min"], [1183, 0, 1, "", "ne"], [1184, 0, 1, "", "ne_missing"], [1185, 0, 1, "", "new_from_index"], [1186, 0, 1, "", "not_"], [1187, 0, 1, "", "null_count"], [1188, 0, 1, "", "pct_change"], [1189, 0, 1, "", "peak_max"], [1190, 0, 1, "", "peak_min"], [1324, 2, 1, "", "plot"], [1191, 0, 1, "", "pow"], [1192, 0, 1, "", "product"], [1193, 0, 1, "", "qcut"], [1194, 0, 1, "", "quantile"], [1195, 0, 1, "", "rank"], [1196, 0, 1, "", "rechunk"], [1197, 0, 1, "", "reinterpret"], [1198, 0, 1, "", "rename"], [1199, 0, 1, "", "replace"], [1200, 0, 1, "", "replace_strict"], [1201, 0, 1, "", "reshape"], [1202, 0, 1, "", "reverse"], [1203, 0, 1, "", "rle"], [1204, 0, 1, "", "rle_id"], [1205, 0, 1, "", "rolling_map"], [1206, 0, 1, "", "rolling_max"], [1207, 0, 1, "", "rolling_mean"], [1208, 0, 1, "", "rolling_median"], [1209, 0, 1, "", "rolling_min"], [1210, 0, 1, "", "rolling_quantile"], [1211, 0, 1, "", "rolling_skew"], [1212, 0, 1, "", "rolling_std"], [1213, 0, 1, "", "rolling_sum"], [1214, 0, 1, "", "rolling_var"], [1215, 0, 1, "", "round"], [1216, 0, 1, "", "round_sig_figs"], [1217, 0, 1, "", "sample"], [1218, 0, 1, "", "scatter"], [1219, 0, 1, "", "search_sorted"], [1220, 0, 1, "", "set"], [1221, 0, 1, "", "set_sorted"], [1222, 2, 1, "", "shape"], [1223, 0, 1, "", "shift"], [1224, 0, 1, "", "shrink_dtype"], [1225, 0, 1, "", "shrink_to_fit"], [1226, 0, 1, "", "shuffle"], [1227, 0, 1, "", "sign"], [1228, 0, 1, "", "sin"], [1229, 0, 1, "", "sinh"], [1230, 0, 1, "", "skew"], [1231, 0, 1, "", "slice"], [1232, 0, 1, "", "sort"], [1233, 0, 1, "", "sqrt"], [1234, 0, 1, "", "std"], [1290, 0, 1, "", "sum"], [1291, 0, 1, "", "tail"], [1292, 0, 1, "", "tan"], [1293, 0, 1, "", "tanh"], [1294, 0, 1, "", "to_arrow"], [1295, 0, 1, "", "to_dummies"], [1296, 0, 1, "", "to_frame"], [1297, 0, 1, "", "to_init_repr"], [1298, 0, 1, "", "to_jax"], [1299, 0, 1, "", "to_list"], [1300, 0, 1, "", "to_numpy"], [1301, 0, 1, "", "to_pandas"], [1302, 0, 1, "", "to_physical"], [1303, 0, 1, "", "to_torch"], [1304, 0, 1, "", "top_k"], [1305, 0, 1, "", "unique"], [1306, 0, 1, "", "unique_counts"], [1307, 0, 1, "", "upper_bound"], [1308, 0, 1, "", "value_counts"], [1309, 0, 1, "", "var"], [1310, 0, 1, "", "zip_with"]], "polars.Series.arr": [[952, 0, 1, "", "all"], [953, 0, 1, "", "any"], [954, 0, 1, "", "arg_max"], [955, 0, 1, "", "arg_min"], [956, 0, 1, "", "contains"], [957, 0, 1, "", "count_matches"], [958, 0, 1, "", "explode"], [959, 0, 1, "", "first"], [960, 0, 1, "", "get"], [961, 0, 1, "", "join"], [962, 0, 1, "", "last"], [963, 0, 1, "", "max"], [964, 0, 1, "", "median"], [965, 0, 1, "", "min"], [966, 0, 1, "", "n_unique"], [967, 0, 1, "", "reverse"], [968, 0, 1, "", "shift"], [969, 0, 1, "", "sort"], [970, 0, 1, "", "std"], [971, 0, 1, "", "sum"], [972, 0, 1, "", "to_list"], [973, 0, 1, "", "to_struct"], [974, 0, 1, "", "unique"], [975, 0, 1, "", "var"]], "polars.Series.bin": [[976, 0, 1, "", "contains"], [977, 0, 1, "", "decode"], [978, 0, 1, "", "encode"], [979, 0, 1, "", "ends_with"], [980, 0, 1, "", "reinterpret"], [981, 0, 1, "", "size"], [982, 0, 1, "", "starts_with"]], "polars.Series.cat": [[994, 0, 1, "", "ends_with"], [995, 0, 1, "", "get_categories"], [996, 0, 1, "", "is_local"], [997, 0, 1, "", "len_bytes"], [998, 0, 1, "", "len_chars"], [999, 0, 1, "", "starts_with"], [1000, 0, 1, "", "to_local"], [1001, 0, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[1024, 0, 1, "", "add_business_days"], [1025, 0, 1, "", "base_utc_offset"], [1026, 0, 1, "", "cast_time_unit"], [1027, 0, 1, "", "century"], [1028, 0, 1, "", "combine"], [1029, 0, 1, "", "convert_time_zone"], [1030, 0, 1, "", "date"], [1031, 0, 1, "", "datetime"], [1032, 0, 1, "", "day"], [1033, 0, 1, "", "dst_offset"], [1034, 0, 1, "", "epoch"], [1035, 0, 1, "", "hour"], [1036, 0, 1, "", "is_leap_year"], [1037, 0, 1, "", "iso_year"], [1038, 0, 1, "", "max"], [1039, 0, 1, "", "mean"], [1040, 0, 1, "", "median"], [1041, 0, 1, "", "microsecond"], [1042, 0, 1, "", "millennium"], [1043, 0, 1, "", "millisecond"], [1044, 0, 1, "", "min"], [1045, 0, 1, "", "minute"], [1046, 0, 1, "", "month"], [1047, 0, 1, "", "month_end"], [1048, 0, 1, "", "month_start"], [1049, 0, 1, "", "nanosecond"], [1050, 0, 1, "", "offset_by"], [1051, 0, 1, "", "ordinal_day"], [1052, 0, 1, "", "quarter"], [1053, 0, 1, "", "replace"], [1054, 0, 1, "", "replace_time_zone"], [1055, 0, 1, "", "round"], [1056, 0, 1, "", "second"], [1057, 0, 1, "", "strftime"], [1058, 0, 1, "", "time"], [1059, 0, 1, "", "timestamp"], [1060, 0, 1, "", "to_string"], [1061, 0, 1, "", "total_days"], [1062, 0, 1, "", "total_hours"], [1063, 0, 1, "", "total_microseconds"], [1064, 0, 1, "", "total_milliseconds"], [1065, 0, 1, "", "total_minutes"], [1066, 0, 1, "", "total_nanoseconds"], [1067, 0, 1, "", "total_seconds"], [1068, 0, 1, "", "truncate"], [1069, 0, 1, "", "week"], [1070, 0, 1, "", "weekday"], [1071, 0, 1, "", "with_time_unit"], [1072, 0, 1, "", "year"]], "polars.Series.list": [[1127, 0, 1, "", "all"], [1128, 0, 1, "", "any"], [1129, 0, 1, "", "arg_max"], [1130, 0, 1, "", "arg_min"], [1131, 0, 1, "", "concat"], [1132, 0, 1, "", "contains"], [1133, 0, 1, "", "count_matches"], [1134, 0, 1, "", "diff"], [1135, 0, 1, "", "drop_nulls"], [1136, 0, 1, "", "eval"], [1137, 0, 1, "", "explode"], [1138, 0, 1, "", "first"], [1139, 0, 1, "", "gather"], [1140, 0, 1, "", "gather_every"], [1141, 0, 1, "", "get"], [1142, 0, 1, "", "head"], [1143, 0, 1, "", "join"], [1144, 0, 1, "", "last"], [1145, 0, 1, "", "len"], [1146, 0, 1, "", "max"], [1147, 0, 1, "", "mean"], [1148, 0, 1, "", "median"], [1149, 0, 1, "", "min"], [1150, 0, 1, "", "n_unique"], [1151, 0, 1, "", "reverse"], [1152, 0, 1, "", "sample"], [1153, 0, 1, "", "set_difference"], [1154, 0, 1, "", "set_intersection"], [1155, 0, 1, "", "set_symmetric_difference"], [1156, 0, 1, "", "set_union"], [1157, 0, 1, "", "shift"], [1158, 0, 1, "", "slice"], [1159, 0, 1, "", "sort"], [1160, 0, 1, "", "std"], [1161, 0, 1, "", "sum"], [1162, 0, 1, "", "tail"], [1163, 0, 1, "", "to_array"], [1164, 0, 1, "", "to_struct"], [1165, 0, 1, "", "unique"], [1166, 0, 1, "", "var"]], "polars.Series.str": [[1235, 0, 1, "", "concat"], [1236, 0, 1, "", "contains"], [1237, 0, 1, "", "contains_any"], [1238, 0, 1, "", "count_matches"], [1239, 0, 1, "", "decode"], [1240, 0, 1, "", "encode"], [1241, 0, 1, "", "ends_with"], [1242, 0, 1, "", "escape_regex"], [1243, 0, 1, "", "explode"], [1244, 0, 1, "", "extract"], [1245, 0, 1, "", "extract_all"], [1246, 0, 1, "", "extract_groups"], [1247, 0, 1, "", "extract_many"], [1248, 0, 1, "", "find"], [1249, 0, 1, "", "find_many"], [1250, 0, 1, "", "head"], [1251, 0, 1, "", "join"], [1252, 0, 1, "", "json_decode"], [1253, 0, 1, "", "json_path_match"], [1254, 0, 1, "", "len_bytes"], [1255, 0, 1, "", "len_chars"], [1256, 0, 1, "", "normalize"], [1257, 0, 1, "", "pad_end"], [1258, 0, 1, "", "pad_start"], [1259, 0, 1, "", "replace"], [1260, 0, 1, "", "replace_all"], [1261, 0, 1, "", "replace_many"], [1262, 0, 1, "", "reverse"], [1263, 0, 1, "", "slice"], [1264, 0, 1, "", "split"], [1265, 0, 1, "", "split_exact"], [1266, 0, 1, "", "splitn"], [1267, 0, 1, "", "starts_with"], [1268, 0, 1, "", "strip_chars"], [1269, 0, 1, "", "strip_chars_end"], [1270, 0, 1, "", "strip_chars_start"], [1271, 0, 1, "", "strip_prefix"], [1272, 0, 1, "", "strip_suffix"], [1273, 0, 1, "", "strptime"], [1274, 0, 1, "", "tail"], [1275, 0, 1, "", "to_date"], [1276, 0, 1, "", "to_datetime"], [1277, 0, 1, "", "to_decimal"], [1278, 0, 1, "", "to_integer"], [1279, 0, 1, "", "to_lowercase"], [1280, 0, 1, "", "to_time"], [1281, 0, 1, "", "to_titlecase"], [1282, 0, 1, "", "to_uppercase"], [1283, 0, 1, "", "zfill"]], "polars.Series.struct": [[1284, 0, 1, "", "field"], [1285, 3, 1, "", "fields"], [1286, 0, 1, "", "json_encode"], [1287, 0, 1, "", "rename_fields"], [1288, 3, 1, "", "schema"], [1289, 0, 1, "", "unnest"]], "polars.StringCache": [[50, 0, 1, "", "__init__"]], "polars.api": [[52, 4, 1, "", "register_dataframe_namespace"], [53, 4, 1, "", "register_expr_namespace"], [54, 4, 1, "", "register_lazyframe_namespace"], [55, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[299, 0, 1, "", "__iter__"], [300, 0, 1, "", "agg"], [301, 0, 1, "", "all"], [302, 0, 1, "", "count"], [303, 0, 1, "", "first"], [304, 0, 1, "", "head"], [305, 0, 1, "", "last"], [306, 0, 1, "", "len"], [307, 0, 1, "", "map_groups"], [308, 0, 1, "", "max"], [309, 0, 1, "", "mean"], [310, 0, 1, "", "median"], [311, 0, 1, "", "min"], [312, 0, 1, "", "n_unique"], [313, 0, 1, "", "quantile"], [314, 0, 1, "", "sum"], [315, 0, 1, "", "tail"]], "polars.datatypes": [[60, 1, 1, "", "Array"], [61, 1, 1, "", "Binary"], [62, 1, 1, "", "Boolean"], [63, 1, 1, "", "Categorical"], [64, 1, 1, "", "DataType"], [65, 1, 1, "", "Date"], [66, 1, 1, "", "Datetime"], [67, 1, 1, "", "Decimal"], [68, 1, 1, "", "Duration"], [69, 1, 1, "", "Enum"], [70, 1, 1, "", "Field"], [71, 1, 1, "", "Float32"], [72, 1, 1, "", "Float64"], [73, 1, 1, "", "Int128"], [74, 1, 1, "", "Int16"], [75, 1, 1, "", "Int32"], [76, 1, 1, "", "Int64"], [77, 1, 1, "", "Int8"], [78, 1, 1, "", "List"], [79, 1, 1, "", "Null"], [80, 1, 1, "", "Object"], [81, 1, 1, "", "String"], [82, 1, 1, "", "Struct"], [83, 1, 1, "", "Time"], [84, 1, 1, "", "UInt16"], [85, 1, 1, "", "UInt32"], [86, 1, 1, "", "UInt64"], [87, 1, 1, "", "UInt8"], [88, 1, 1, "", "Unknown"], [89, 3, 1, "", "Utf8"]], "polars.datatypes.Array": [[60, 0, 1, "", "__init__"]], "polars.datatypes.Binary": [[61, 0, 1, "", "__init__"]], "polars.datatypes.Boolean": [[62, 0, 1, "", "__init__"]], "polars.datatypes.Categorical": [[63, 0, 1, "", "__init__"]], "polars.datatypes.DataType": [[64, 0, 1, "", "__init__"]], "polars.datatypes.Date": [[65, 0, 1, "", "__init__"]], "polars.datatypes.Datetime": [[66, 0, 1, "", "__init__"]], "polars.datatypes.Decimal": [[67, 0, 1, "", "__init__"]], "polars.datatypes.Duration": [[68, 0, 1, "", "__init__"]], "polars.datatypes.Enum": [[69, 0, 1, "", "__init__"]], "polars.datatypes.Field": [[70, 0, 1, "", "__init__"]], "polars.datatypes.Float32": [[71, 0, 1, "", "__init__"]], "polars.datatypes.Float64": [[72, 0, 1, "", "__init__"]], "polars.datatypes.Int128": [[73, 0, 1, "", "__init__"]], "polars.datatypes.Int16": [[74, 0, 1, "", "__init__"]], "polars.datatypes.Int32": [[75, 0, 1, "", "__init__"]], "polars.datatypes.Int64": [[76, 0, 1, "", "__init__"]], "polars.datatypes.Int8": [[77, 0, 1, "", "__init__"]], "polars.datatypes.List": [[78, 0, 1, "", "__init__"]], "polars.datatypes.Null": [[79, 0, 1, "", "__init__"]], "polars.datatypes.Object": [[80, 0, 1, "", "__init__"]], "polars.datatypes.String": [[81, 0, 1, "", "__init__"]], "polars.datatypes.Struct": [[82, 0, 1, "", "__init__"]], "polars.datatypes.Time": [[83, 0, 1, "", "__init__"]], "polars.datatypes.UInt16": [[84, 0, 1, "", "__init__"]], "polars.datatypes.UInt32": [[85, 0, 1, "", "__init__"]], "polars.datatypes.UInt64": [[86, 0, 1, "", "__init__"]], "polars.datatypes.UInt8": [[87, 0, 1, "", "__init__"]], "polars.datatypes.Unknown": [[88, 0, 1, "", "__init__"]], "polars.exceptions": [[93, 5, 1, "", "CategoricalRemappingWarning"], [94, 5, 1, "", "ChronoFormatWarning"], [95, 5, 1, "", "ColumnNotFoundError"], [96, 5, 1, "", "ComputeError"], [97, 5, 1, "", "CustomUFuncWarning"], [98, 5, 1, "", "DataOrientationWarning"], [99, 5, 1, "", "DuplicateError"], [100, 5, 1, "", "InvalidOperationError"], [101, 5, 1, "", "MapWithoutReturnDtypeWarning"], [102, 5, 1, "", "ModuleUpgradeRequiredError"], [103, 5, 1, "", "NoDataError"], [104, 5, 1, "", "NoRowsReturnedError"], [105, 5, 1, "", "OutOfBoundsError"], [106, 5, 1, "", "PanicException"], [107, 5, 1, "", "ParameterCollisionError"], [108, 5, 1, "", "PerformanceWarning"], [109, 5, 1, "", "PolarsError"], [110, 5, 1, "", "PolarsInefficientMapWarning"], [111, 5, 1, "", "PolarsWarning"], [112, 5, 1, "", "RowsError"], [113, 5, 1, "", "SQLInterfaceError"], [114, 5, 1, "", "SQLSyntaxError"], [115, 5, 1, "", "SchemaError"], [116, 5, 1, "", "SchemaFieldNotFoundError"], [117, 5, 1, "", "ShapeError"], [118, 5, 1, "", "StringCacheMismatchError"], [119, 5, 1, "", "StructFieldNotFoundError"], [120, 5, 1, "", "TooManyRowsReturnedError"], [121, 5, 1, "", "UnstableWarning"], [122, 5, 1, "", "UnsuitableSQLError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[132, 0, 1, "", "next_batches"]], "polars.lazyframe.engine_config": [[899, 1, 1, "", "GPUEngine"]], "polars.lazyframe.engine_config.GPUEngine": [[899, 0, 1, "", "__init__"]], "polars.lazyframe.group_by.LazyGroupBy": [[900, 0, 1, "", "agg"], [901, 0, 1, "", "all"], [902, 0, 1, "", "count"], [903, 0, 1, "", "first"], [904, 0, 1, "", "head"], [905, 0, 1, "", "last"], [906, 0, 1, "", "len"], [907, 0, 1, "", "map_groups"], [908, 0, 1, "", "max"], [909, 0, 1, "", "mean"], [910, 0, 1, "", "median"], [911, 0, 1, "", "min"], [912, 0, 1, "", "n_unique"], [913, 0, 1, "", "quantile"], [914, 0, 1, "", "sum"], [915, 0, 1, "", "tail"]], "polars.lazyframe.in_process.InProcessQuery": [[916, 0, 1, "", "cancel"], [917, 0, 1, "", "fetch"], [918, 0, 1, "", "fetch_blocking"]], "polars.plugins": [[928, 4, 1, "", "register_plugin_function"]], "polars.selectors": [[930, 4, 1, "", "all"], [930, 4, 1, "", "alpha"], [930, 4, 1, "", "alphanumeric"], [930, 4, 1, "", "binary"], [930, 4, 1, "", "boolean"], [930, 4, 1, "", "by_dtype"], [930, 4, 1, "", "by_index"], [930, 4, 1, "", "by_name"], [930, 4, 1, "", "categorical"], [930, 4, 1, "", "contains"], [930, 4, 1, "", "date"], [930, 4, 1, "", "datetime"], [930, 4, 1, "", "decimal"], [930, 4, 1, "", "digit"], [930, 4, 1, "", "duration"], [930, 4, 1, "", "ends_with"], [930, 4, 1, "", "exclude"], [930, 4, 1, "", "expand_selector"], [930, 4, 1, "", "first"], [930, 4, 1, "", "float"], [930, 4, 1, "", "integer"], [930, 4, 1, "", "is_selector"], [930, 4, 1, "", "last"], [930, 4, 1, "", "matches"], [930, 4, 1, "", "numeric"], [930, 4, 1, "", "signed_integer"], [930, 4, 1, "", "starts_with"], [930, 4, 1, "", "string"], [930, 4, 1, "", "temporal"], [930, 4, 1, "", "time"], [930, 4, 1, "", "unsigned_integer"]], "polars.testing": [[159, 4, 1, "", "assert_frame_equal"], [160, 4, 1, "", "assert_frame_not_equal"], [161, 4, 1, "", "assert_series_equal"], [162, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[163, 1, 1, "", "column"], [164, 4, 1, "", "columns"], [165, 4, 1, "", "create_list_strategy"], [166, 4, 1, "", "dataframes"], [167, 4, 1, "", "dtypes"], [168, 4, 1, "", "lists"], [169, 4, 1, "", "load_profile"], [170, 4, 1, "", "series"], [171, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[163, 0, 1, "", "__init__"]]}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "objtypes": {"0": "py:method", "1": "py:class", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "terms": {"": [1, 11, 37, 38, 39, 40, 45, 46, 55, 60, 70, 82, 92, 94, 100, 123, 130, 136, 137, 138, 139, 141, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 170, 182, 183, 194, 195, 198, 203, 206, 211, 212, 217, 223, 226, 227, 237, 244, 246, 251, 253, 256, 259, 260, 267, 276, 279, 284, 286, 287, 288, 289, 290, 295, 296, 321, 358, 391, 423, 428, 447, 450, 470, 476, 480, 493, 509, 530, 559, 560, 572, 581, 586, 593, 594, 601, 602, 613, 620, 654, 658, 666, 667, 668, 670, 672, 681, 682, 685, 686, 688, 695, 696, 697, 698, 702, 706, 708, 710, 718, 727, 728, 729, 730, 735, 742, 745, 748, 749, 758, 759, 761, 762, 768, 771, 772, 773, 774, 776, 778, 779, 781, 788, 790, 792, 793, 794, 800, 806, 810, 826, 828, 839, 840, 849, 850, 855, 864, 875, 876, 882, 887, 888, 889, 890, 891, 894, 895, 907, 924, 929, 930, 934, 935, 936, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1032, 1033, 1034, 1036, 1038, 1039, 1040, 1042, 1043, 1044, 1047, 1048, 1051, 1053, 1055, 1056, 1057, 1060, 1068, 1070, 1071, 1072, 1073, 1078, 1079, 1081, 1082, 1083, 1084, 1086, 1087, 1088, 1089, 1091, 1092, 1093, 1094, 1096, 1098, 1100, 1101, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1125, 1126, 1127, 1128, 1129, 1130, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1165, 1166, 1167, 1168, 1169, 1170, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1236, 1237, 1238, 1239, 1240, 1241, 1243, 1244, 1245, 1246, 1247, 1248, 1250, 1251, 1252, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1286, 1287, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1319, 1324, 1328, 1332, 1335, 1342, 1343], "0": [1, 7, 9, 11, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 38, 39, 40, 45, 49, 51, 52, 53, 55, 59, 67, 78, 124, 133, 136, 137, 138, 139, 141, 142, 144, 145, 146, 147, 148, 150, 153, 154, 155, 156, 158, 163, 164, 165, 166, 167, 168, 170, 173, 179, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 196, 197, 201, 202, 203, 205, 206, 209, 210, 211, 212, 213, 217, 218, 222, 224, 225, 226, 229, 231, 233, 234, 235, 236, 237, 240, 241, 242, 243, 246, 247, 248, 251, 253, 255, 256, 257, 258, 259, 266, 267, 268, 269, 271, 276, 277, 278, 279, 280, 281, 283, 285, 289, 291, 292, 295, 297, 298, 300, 302, 303, 305, 307, 308, 309, 310, 311, 312, 313, 314, 321, 324, 325, 329, 331, 332, 334, 338, 339, 340, 341, 342, 343, 346, 347, 348, 351, 352, 354, 357, 367, 370, 372, 379, 381, 386, 389, 392, 398, 399, 400, 401, 402, 403, 410, 411, 412, 416, 417, 418, 424, 425, 429, 432, 434, 435, 439, 443, 446, 448, 450, 453, 454, 456, 457, 461, 464, 465, 466, 467, 468, 469, 471, 473, 474, 475, 476, 479, 480, 482, 484, 485, 487, 489, 491, 495, 496, 499, 502, 504, 505, 506, 507, 509, 511, 516, 517, 520, 523, 526, 527, 528, 534, 535, 547, 551, 553, 554, 555, 556, 558, 559, 561, 562, 563, 567, 572, 575, 578, 579, 580, 582, 584, 593, 594, 595, 596, 597, 599, 600, 602, 605, 606, 608, 609, 610, 611, 615, 616, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 648, 649, 650, 651, 655, 656, 657, 660, 665, 666, 667, 670, 671, 710, 711, 712, 714, 715, 716, 719, 724, 725, 727, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 744, 746, 753, 757, 760, 766, 767, 769, 772, 775, 776, 777, 781, 783, 784, 788, 789, 796, 797, 798, 799, 800, 801, 806, 810, 825, 828, 829, 830, 833, 835, 836, 838, 839, 841, 842, 844, 845, 846, 848, 849, 850, 853, 854, 858, 860, 863, 864, 867, 869, 870, 874, 875, 880, 882, 883, 884, 892, 894, 896, 897, 898, 900, 902, 903, 905, 907, 908, 909, 910, 911, 912, 913, 914, 924, 929, 930, 934, 941, 942, 943, 944, 945, 946, 947, 949, 951, 954, 960, 970, 973, 975, 981, 993, 1000, 1002, 1003, 1005, 1008, 1009, 1010, 1017, 1018, 1019, 1021, 1022, 1023, 1024, 1031, 1035, 1039, 1040, 1041, 1043, 1045, 1049, 1053, 1056, 1060, 1063, 1064, 1066, 1067, 1071, 1074, 1079, 1080, 1081, 1082, 1087, 1092, 1094, 1099, 1100, 1102, 1105, 1106, 1110, 1113, 1115, 1116, 1117, 1118, 1121, 1122, 1129, 1130, 1133, 1136, 1139, 1140, 1141, 1147, 1148, 1160, 1164, 1166, 1167, 1168, 1169, 1170, 1174, 1175, 1181, 1182, 1188, 1191, 1193, 1194, 1195, 1199, 1200, 1204, 1205, 1207, 1208, 1210, 1211, 1212, 1214, 1215, 1216, 1217, 1219, 1227, 1228, 1229, 1230, 1233, 1234, 1235, 1238, 1243, 1244, 1245, 1248, 1249, 1253, 1259, 1292, 1293, 1295, 1298, 1300, 1301, 1302, 1303, 1307, 1309, 1319, 1324, 1328, 1334, 1336, 1337, 1338, 1341, 1344, 1345, 1347, 1349, 1350], "00": [27, 40, 66, 183, 190, 212, 291, 321, 419, 420, 423, 427, 437, 438, 440, 444, 445, 447, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 624, 626, 628, 630, 632, 635, 637, 639, 695, 698, 702, 753, 754, 755, 756, 796, 797, 798, 810, 828, 836, 850, 924, 930, 1025, 1026, 1029, 1030, 1031, 1033, 1034, 1035, 1040, 1041, 1045, 1047, 1048, 1049, 1050, 1054, 1055, 1058, 1059, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1071, 1259, 1273, 1276, 1280, 1342], "000": [9, 10, 27, 40, 321, 1259, 1350], "0000": [283, 321, 1303, 1319, 1350], "000000": [375, 376, 450, 661, 977, 978, 1239], "00000001": [11, 726, 810], "00000010": [726, 810], "00000011": [726, 810], "00000100": [726, 810], "00001000": [726, 810], "00001010": [726, 810], "00001011": [726, 810], "0000e": 11, "0000ff": [375, 376, 661, 977, 978, 1239], "0001": 450, "000100": 450, "000101": 450, "0005": 930, "00050": 930, "000800": 1060, "001": [53, 705, 756, 1063, 1064, 1066, 1283], "002": [756, 1063, 1064, 1066], "005": [1074, 1319], "00prefix": 930, "00z": [695, 698, 1273, 1276], "01": [28, 51, 65, 66, 166, 183, 190, 210, 212, 227, 253, 291, 321, 418, 419, 420, 421, 422, 423, 424, 425, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 467, 621, 624, 626, 628, 630, 632, 635, 637, 639, 695, 697, 698, 702, 737, 750, 751, 752, 753, 754, 755, 756, 810, 828, 836, 850, 855, 873, 924, 930, 1024, 1026, 1028, 1029, 1030, 1031, 1034, 1035, 1040, 1041, 1045, 1047, 1048, 1049, 1050, 1053, 1054, 1055, 1057, 1058, 1059, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1071, 1273, 1275, 1276, 1280, 1342, 1345], "010": [9, 700, 1278], "01000": 28, "01000010": [726, 810], "01000110": [726, 810], "012": [641, 678, 810, 1216, 1256, 1319], "0123": [705, 1283], "01234": [641, 810, 1216, 1319], "012345": 1060, "015625": [1191, 1319], "01\u00b2": [678, 1256], "02": [51, 183, 190, 210, 212, 253, 291, 321, 418, 420, 422, 428, 437, 438, 440, 444, 449, 450, 452, 455, 457, 461, 621, 624, 626, 628, 630, 632, 635, 637, 639, 640, 695, 697, 698, 702, 737, 750, 751, 752, 753, 754, 755, 756, 810, 828, 836, 850, 873, 924, 930, 973, 1026, 1028, 1030, 1031, 1034, 1035, 1040, 1041, 1045, 1047, 1048, 1049, 1053, 1054, 1055, 1058, 1059, 1062, 1065, 1067, 1068, 1164, 1273, 1275, 1276, 1280, 1342, 1343], "03": [51, 130, 136, 183, 212, 227, 253, 291, 321, 420, 422, 423, 428, 437, 438, 440, 443, 444, 445, 447, 449, 450, 451, 452, 455, 457, 458, 461, 467, 480, 621, 624, 626, 628, 630, 632, 635, 637, 639, 697, 702, 750, 751, 752, 753, 754, 755, 756, 810, 828, 850, 855, 873, 924, 930, 1026, 1028, 1029, 1034, 1035, 1040, 1041, 1047, 1048, 1049, 1054, 1055, 1057, 1059, 1061, 1062, 1065, 1067, 1275, 1280], "037037": [1191, 1319], "04": [156, 183, 190, 212, 291, 321, 422, 423, 437, 438, 443, 444, 445, 447, 451, 452, 455, 457, 461, 624, 626, 628, 630, 632, 635, 637, 639, 695, 737, 750, 753, 754, 756, 810, 828, 836, 850, 924, 930, 1029, 1041, 1045, 1047, 1048, 1049, 1054, 1057, 1061, 1062, 1065, 1067, 1071, 1273, 1342], "047198": 1344, "05": [16, 156, 159, 160, 161, 162, 166, 183, 190, 291, 321, 418, 421, 422, 423, 424, 425, 429, 432, 433, 434, 435, 437, 438, 439, 444, 446, 447, 448, 450, 451, 737, 750, 751, 753, 754, 828, 836, 924, 930, 1028, 1029, 1030, 1031, 1054, 1055, 1057, 1058, 1060, 1061, 1068, 1342, 1343, 1345], "050545": 130, "0522623626787952": [1122, 1319], "0545": [1030, 1031, 1058], "05t10": 1060, "06": [166, 183, 291, 321, 418, 422, 436, 442, 444, 445, 446, 458, 459, 750, 753, 828, 924, 930, 1024, 1054, 1055, 1060, 1068], "060": [424, 425, 429, 432, 434, 435, 439, 446, 448], "0601749420166": [198, 321], "06293300616044681": [1074, 1319], "07": [16, 136, 166, 190, 321, 418, 421, 422, 433, 444, 445, 450, 458, 695, 750, 751, 753, 754, 762, 836, 924, 930, 1024, 1028, 1054, 1060, 1273, 1342, 1345], "071068": [190, 321, 836, 924], "08": [136, 159, 160, 161, 162, 190, 227, 253, 268, 321, 418, 422, 437, 438, 445, 450, 621, 695, 754, 756, 810, 836, 855, 873, 924, 930, 1024, 1055, 1068, 1273, 1342, 1343], "085537": [1083, 1319], "09": [51, 136, 190, 253, 321, 418, 422, 437, 438, 450, 601, 621, 699, 750, 751, 753, 798, 810, 836, 873, 924, 930, 1024, 1277], "090909": [602, 810], "094395": 1344, "098612": [556, 810, 1167, 1169, 1319, 1341], "0999": [421, 433], "0_": [40, 321], "0m": [427, 1033], "0x11bc0ad80": 929, "0\u00b5": 450, "1": [1, 7, 8, 9, 11, 12, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 51, 52, 53, 54, 55, 59, 60, 78, 82, 95, 98, 99, 100, 123, 124, 125, 126, 127, 128, 129, 130, 133, 136, 137, 140, 141, 142, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 166, 170, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 321, 324, 325, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 379, 381, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 568, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 663, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 681, 682, 683, 687, 688, 689, 690, 691, 692, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 806, 810, 825, 826, 828, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 924, 930, 934, 935, 936, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 954, 955, 956, 957, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 981, 992, 993, 997, 998, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1077, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1091, 1092, 1093, 1094, 1096, 1098, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1125, 1126, 1129, 1130, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1244, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1254, 1255, 1259, 1260, 1261, 1265, 1266, 1283, 1284, 1286, 1287, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1319, 1324, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1341, 1342, 1343, 1344, 1345, 1347, 1348, 1349, 1350], "10": [13, 16, 17, 27, 35, 37, 39, 40, 41, 42, 45, 49, 51, 59, 130, 136, 137, 139, 150, 158, 185, 190, 194, 200, 209, 210, 212, 214, 216, 217, 218, 223, 227, 230, 241, 245, 247, 251, 253, 259, 268, 272, 295, 300, 303, 305, 308, 309, 310, 311, 312, 313, 314, 321, 332, 336, 344, 345, 346, 348, 400, 406, 409, 414, 418, 419, 421, 422, 424, 425, 427, 429, 432, 433, 434, 435, 437, 438, 439, 443, 444, 445, 446, 448, 450, 458, 461, 467, 488, 489, 490, 495, 501, 513, 521, 527, 529, 535, 545, 547, 549, 553, 555, 571, 573, 584, 599, 601, 602, 605, 615, 616, 621, 652, 700, 710, 713, 726, 737, 738, 746, 751, 753, 754, 757, 760, 762, 764, 770, 771, 795, 798, 810, 831, 832, 836, 839, 850, 851, 853, 855, 859, 868, 869, 873, 875, 885, 886, 894, 900, 903, 905, 908, 909, 910, 911, 912, 913, 914, 924, 930, 1006, 1020, 1024, 1025, 1027, 1028, 1033, 1042, 1054, 1060, 1068, 1071, 1074, 1080, 1101, 1112, 1126, 1134, 1142, 1148, 1158, 1160, 1162, 1166, 1168, 1172, 1188, 1200, 1218, 1220, 1278, 1291, 1298, 1300, 1303, 1319, 1328, 1335, 1336, 1337, 1338, 1339, 1341, 1342, 1343, 1345, 1350], "100": [10, 17, 27, 40, 126, 129, 133, 136, 137, 138, 141, 145, 146, 147, 150, 154, 228, 246, 264, 321, 450, 615, 616, 645, 659, 669, 671, 674, 683, 699, 755, 810, 856, 879, 924, 930, 1076, 1168, 1184, 1199, 1200, 1206, 1207, 1209, 1223, 1237, 1249, 1252, 1261, 1277, 1319, 1339, 1350], "1000": [138, 198, 277, 298, 321, 337, 810, 898, 924, 1063, 1168, 1297, 1319, 1350], "10000": [136, 225, 321], "100000": [10, 27], "1000000": [11, 1066], "1001": [298, 321, 898, 924], "1002": [298, 321, 898, 924], "10047419486152048166": [213, 321], "1005": [337, 810], "100_000": [788, 860, 924], "100\u00b5": 450, "101": [9, 27, 228, 321, 422, 450, 700, 856, 924, 930, 1278, 1350], "101000": 422, "10101": [27, 1345], "1010101": 9, "101514": [190, 321, 836, 924], "102": [228, 321, 856, 924], "1024": [37, 45, 46, 49, 136, 137, 138, 146, 154, 321, 379, 924, 981], "1040361802642726": [1122, 1319], "107149": 1344, "10734580197236529959": [1100, 1319], "1073741824": [646, 810], "10783150408545073287": [213, 321], "107_930_000": 1328, "10_000": [40, 321], "10i": [212, 321, 850, 924], "10m": [445, 458, 1055, 1068], "10t00": 450, "11": [10, 16, 45, 49, 158, 166, 181, 190, 227, 253, 321, 332, 437, 438, 440, 445, 458, 482, 495, 527, 578, 602, 611, 621, 622, 636, 652, 726, 793, 798, 806, 810, 825, 831, 832, 836, 851, 855, 859, 869, 873, 886, 924, 930, 1050, 1055, 1068, 1172, 1205, 1319, 1337], "110": [194, 321, 683, 700, 839, 924, 1278], "1101441246220388612": [489, 810], "111": [10, 1339], "11111": 1056, "111110": 1056, "11111001": [726, 810], "11111010": [726, 810], "11111111": 10, "112": [646, 810, 1350], "11330": 165, "1152921504606846976": [1197, 1319], "116": 165, "11638928888656214026": [489, 810], "118034": [884, 924], "11aa": 1342, "11aabb": 1342, "11h": [419, 1025], "12": [26, 40, 51, 130, 136, 158, 166, 190, 212, 223, 227, 228, 253, 268, 291, 321, 332, 408, 419, 421, 422, 426, 433, 436, 437, 438, 440, 441, 442, 443, 445, 450, 458, 459, 460, 467, 495, 527, 559, 575, 602, 610, 621, 636, 646, 660, 681, 699, 747, 750, 753, 754, 755, 771, 796, 797, 798, 810, 836, 850, 851, 855, 856, 859, 873, 880, 886, 924, 930, 1025, 1027, 1028, 1039, 1040, 1042, 1046, 1053, 1055, 1060, 1068, 1080, 1172, 1215, 1238, 1260, 1277, 1319, 1341, 1342, 1343, 1345, 1347, 1350], "120": [228, 321, 756, 856, 924, 1344], "1200": [641, 810], "120134": [699, 1277], "121": 1350, "123": [9, 568, 660, 667, 682, 705, 800, 930, 1238, 1245, 1283, 1296, 1319], "123000": 930, "1232e": [1008, 1010, 1319], "1234": [27, 641, 810], "12345": [762, 1003, 1060, 1092, 1215, 1319], "1234500": 930, "123456": [9, 930], "1234567": 27, "123456780": 130, "12346": 762, "123465": 930, "123a123": 682, "123abc": [681, 1259, 1260], "125": [1, 40, 55, 321, 330, 606, 789, 810, 883, 924, 1188, 1191, 1319], "127": [1307, 1319, 1338], "128": [53, 67, 73, 1188, 1319], "129": [646, 810], "13": [184, 185, 190, 201, 202, 209, 217, 228, 229, 241, 253, 295, 303, 305, 308, 309, 310, 311, 312, 313, 314, 321, 332, 418, 424, 425, 429, 432, 434, 435, 439, 446, 448, 571, 573, 621, 699, 740, 746, 749, 753, 760, 794, 796, 799, 810, 829, 830, 836, 844, 845, 856, 858, 873, 894, 903, 905, 908, 909, 910, 911, 912, 913, 914, 924, 1024, 1055, 1068, 1069, 1172, 1277, 1319, 1338], "130": [133, 228, 321, 856, 924], "13382926553367784577": [489, 810], "134821952": 1328, "134_821_952": 1328, "135": [734, 1344], "13614470193936745724": [489, 810], "13756996518000038261": [1100, 1319], "13d": 450, "13h": [419, 1025], "14": [39, 158, 190, 228, 231, 303, 305, 308, 309, 310, 311, 312, 313, 314, 321, 419, 424, 425, 429, 432, 434, 435, 439, 446, 448, 450, 495, 568, 611, 753, 796, 797, 810, 836, 856, 903, 905, 908, 909, 910, 911, 912, 913, 914, 924, 930, 1025, 1055, 1060], "140": [228, 321, 856, 924], "141592653589793": 10, "141593": [610, 810, 941, 1319, 1341, 1344], "142857": [1188, 1319], "143": [699, 1277, 1350], "1433": [38, 321], "1436e16": 166, "1438741209321515184": [213, 321], "1440": [455, 1065], "1443e235": 1350, "149": 1350, "14d": 930, "14h": 450, "15": [10, 40, 158, 190, 212, 217, 228, 231, 253, 321, 410, 414, 438, 443, 445, 450, 458, 467, 605, 621, 636, 678, 747, 753, 796, 797, 810, 836, 850, 856, 873, 924, 930, 1017, 1020, 1055, 1060, 1068, 1080, 1256, 1319, 1338, 1342], "150": [228, 321, 856, 924, 1207, 1319], "1500": [158, 169], "15000": [225, 321], "153061": [509, 810], "15836": 166, "15_000": [225, 321], "16": [1, 40, 53, 74, 84, 158, 172, 190, 212, 228, 253, 295, 321, 406, 409, 443, 450, 495, 575, 582, 601, 606, 621, 700, 710, 746, 756, 757, 760, 810, 836, 850, 856, 873, 880, 894, 924, 930, 1055, 1068, 1188, 1228, 1278, 1292, 1319, 1338, 1341, 1342, 1347], "160": [228, 321, 856, 924], "165": [1055, 1068], "1656e15": [1010, 1319], "166667": [1188, 1319], "1666683077": 762, "1666683099": 762, "167": 51, "16996": 1350, "16h": 930, "17": [158, 166, 198, 227, 300, 321, 467, 493, 601, 622, 640, 742, 762, 797, 810, 855, 900, 924, 1008, 1010, 1055, 1080, 1104, 1205, 1319, 1350], "170": [228, 321, 856, 924], "17293822569102704640": [1197, 1319], "174": 1350, "175201": [650, 810, 1229, 1319], "1755e": [163, 166], "1764": 55, "17888890": [198, 321], "179": 1350, "17_500": [225, 321], "18": [38, 130, 141, 190, 238, 253, 321, 409, 445, 458, 461, 495, 584, 601, 621, 710, 810, 836, 865, 869, 873, 924, 930, 1060, 1071, 1336, 1347], "180": [412, 610, 810, 1344], "1800": [443, 1053], "1844": 166, "18446744073709551614": [1197, 1319], "185_000_000": 1328, "186": 1350, "1875": [638, 810, 892, 924], "1897": [421, 433, 1027, 1042], "18d": 930, "19": [166, 227, 253, 321, 421, 445, 621, 626, 628, 630, 632, 699, 810, 855, 873, 924, 1027, 1055, 1068, 1277], "1920": 1342, "196": 1343, "1964": [869, 924], "1969": [1342, 1343], "1970": [65, 66, 156, 1328], "1972": 1328, "1976": [431, 462], "1977": [431, 462], "1978": [424, 425, 429, 431, 432, 434, 435, 439, 446, 448, 462, 1343], "1979": [431, 462], "1980": 450, "1985": [751, 754], "1990": [136, 1328], "1993": 1328, "1994": 1328, "1995": 136, "1998": [440, 1050], "1999": [268, 321, 440, 450, 930, 1050, 1060, 1345], "199992": [860, 924], "199994": [860, 924], "199996": [860, 924], "199998": [860, 924], "1_000_000": [198, 321, 1078, 1319], "1_234_500": 930, "1d": [212, 227, 253, 291, 321, 420, 440, 445, 450, 452, 455, 458, 461, 467, 621, 624, 626, 628, 630, 632, 635, 637, 639, 751, 752, 754, 755, 756, 770, 797, 798, 810, 850, 855, 873, 924, 930, 1026, 1034, 1040, 1050, 1055, 1059, 1062, 1065, 1068, 1080, 1319], "1e": [11, 159, 160, 161, 162], "1e6": 11, "1h": [212, 227, 253, 291, 321, 427, 440, 445, 458, 467, 621, 624, 626, 628, 630, 632, 635, 637, 639, 754, 755, 797, 798, 810, 850, 855, 873, 924, 1033, 1035, 1050, 1055, 1068, 1080, 1319], "1i": [212, 253, 291, 321, 467, 621, 624, 626, 628, 630, 632, 635, 637, 639, 810, 850, 873, 924, 1080, 1319], "1m": [212, 227, 253, 291, 321, 440, 445, 457, 458, 467, 621, 624, 626, 628, 630, 632, 635, 637, 639, 754, 755, 797, 798, 810, 850, 855, 873, 924, 1050, 1055, 1063, 1064, 1066, 1067, 1068, 1080, 1319], "1mo": [212, 227, 253, 291, 321, 423, 437, 438, 440, 444, 445, 451, 458, 467, 621, 624, 626, 628, 630, 632, 635, 637, 639, 751, 752, 754, 755, 797, 798, 810, 850, 855, 873, 924, 1029, 1046, 1047, 1048, 1050, 1051, 1052, 1054, 1055, 1061, 1068, 1069, 1080, 1319], "1n": [212, 227, 253, 291, 321, 440, 445, 458, 467, 621, 624, 626, 628, 630, 632, 635, 637, 639, 754, 755, 797, 798, 810, 850, 855, 873, 924, 1050, 1055, 1068, 1080, 1319], "1q": [212, 227, 253, 291, 321, 440, 445, 458, 621, 624, 626, 628, 630, 632, 635, 637, 639, 751, 752, 754, 755, 797, 798, 810, 850, 855, 873, 924, 1050, 1055, 1068], "1st_col": 930, "1u": [212, 227, 253, 291, 321, 440, 445, 458, 467, 621, 624, 626, 628, 630, 632, 635, 637, 639, 754, 755, 797, 798, 810, 850, 855, 873, 924, 1050, 1055, 1068, 1080, 1319], "1w": [212, 227, 253, 291, 321, 440, 445, 458, 467, 621, 624, 626, 628, 630, 632, 635, 637, 639, 751, 752, 754, 755, 797, 798, 810, 850, 855, 873, 924, 1050, 1055, 1068, 1080, 1319], "1w2d": [751, 752], "1y": [212, 227, 253, 291, 321, 440, 445, 458, 621, 624, 626, 628, 630, 632, 635, 637, 639, 751, 752, 754, 755, 797, 798, 810, 850, 855, 873, 924, 1050, 1055, 1068], "1y2mo": [440, 1050], "1zy3": [660, 1238], "2": [1, 7, 8, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 35, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 59, 60, 78, 82, 95, 98, 100, 123, 124, 125, 126, 127, 128, 129, 130, 133, 136, 139, 145, 146, 148, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 168, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 321, 324, 325, 329, 330, 331, 332, 334, 336, 337, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 378, 379, 381, 386, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 414, 415, 418, 419, 421, 422, 423, 424, 425, 426, 427, 430, 433, 436, 437, 438, 440, 441, 442, 443, 444, 445, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 575, 576, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 651, 652, 653, 654, 655, 657, 659, 660, 661, 662, 663, 664, 666, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 725, 726, 727, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 780, 781, 784, 788, 789, 790, 791, 792, 793, 795, 798, 799, 800, 806, 810, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 924, 929, 930, 934, 935, 936, 939, 942, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 980, 981, 992, 998, 1000, 1002, 1003, 1004, 1005, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1024, 1025, 1028, 1030, 1031, 1033, 1035, 1038, 1039, 1040, 1042, 1044, 1045, 1046, 1047, 1048, 1052, 1053, 1054, 1055, 1058, 1068, 1070, 1071, 1072, 1073, 1074, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1091, 1092, 1093, 1094, 1096, 1098, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1122, 1125, 1126, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1226, 1228, 1230, 1231, 1232, 1233, 1234, 1235, 1238, 1244, 1246, 1248, 1249, 1250, 1252, 1253, 1255, 1256, 1259, 1260, 1265, 1266, 1268, 1269, 1270, 1273, 1274, 1276, 1277, 1278, 1279, 1282, 1284, 1286, 1287, 1289, 1290, 1291, 1292, 1294, 1295, 1296, 1297, 1299, 1300, 1301, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1319, 1324, 1328, 1329, 1331, 1332, 1334, 1335, 1336, 1337, 1338, 1339, 1341, 1342, 1343, 1344, 1345, 1347, 1348, 1349, 1350], "20": [38, 39, 40, 136, 141, 158, 163, 164, 165, 166, 170, 173, 181, 190, 194, 200, 216, 217, 238, 245, 247, 251, 268, 278, 279, 283, 297, 302, 321, 344, 345, 346, 400, 414, 421, 424, 425, 429, 432, 433, 434, 435, 439, 445, 446, 448, 450, 458, 461, 482, 489, 495, 559, 567, 578, 605, 624, 626, 628, 630, 632, 635, 637, 639, 665, 710, 725, 753, 762, 770, 789, 797, 810, 825, 836, 839, 842, 865, 868, 883, 897, 902, 924, 930, 1020, 1027, 1031, 1042, 1055, 1060, 1068, 1071, 1083, 1099, 1199, 1243, 1298, 1300, 1303, 1319, 1335, 1336, 1339, 1345], "200": [453, 454, 456, 615, 616, 810, 930, 1076, 1184, 1199, 1200, 1206, 1207, 1209, 1319, 1339], "2000": [421, 430, 433, 437, 438, 440, 930, 1027, 1036, 1042, 1047, 1048, 1050, 1056, 1328, 1342], "200000": [453, 860, 924], "200000000": 456, "2001": [16, 420, 421, 426, 428, 430, 433, 436, 440, 441, 442, 445, 449, 458, 459, 460, 461, 624, 626, 628, 630, 632, 635, 637, 639, 695, 810, 930, 1026, 1027, 1032, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1050, 1051, 1052, 1055, 1059, 1068, 1069, 1070, 1071, 1072, 1273], "2002": [136, 430, 440, 1036, 1050, 1072], "2003": [440, 762, 1050], "2004": [440, 1050], "2005": [440, 1050], "2006": [440, 1050], "2008": 1328, "200m": [453, 454, 456], "2010": [268, 321, 450, 930], "2011": [419, 1025], "2012": [419, 1025, 1345], "2013": 1053, "2016": [227, 321, 855, 924], "2017": [227, 321, 855, 924], "2018": [227, 321, 444, 855, 924, 1054], "2019": [227, 321, 855, 924], "202": 1343, "2020": [140, 151, 183, 190, 210, 227, 253, 321, 324, 418, 423, 427, 444, 447, 450, 451, 452, 453, 454, 455, 456, 457, 467, 621, 695, 697, 698, 737, 810, 828, 836, 855, 873, 924, 930, 1024, 1029, 1033, 1054, 1057, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1080, 1273, 1275, 1276, 1319, 1343], "2021": [183, 190, 210, 212, 291, 321, 695, 770, 828, 836, 850, 924, 930, 1030, 1031, 1037, 1058, 1273, 1342], "2022": [51, 183, 190, 210, 321, 422, 445, 458, 695, 751, 752, 754, 755, 756, 762, 828, 836, 924, 930, 1028, 1037, 1055, 1068, 1273], "2023": [16, 40, 130, 158, 225, 321, 422, 756, 770, 930, 1028], "2024": [158, 418, 424, 425, 429, 432, 434, 435, 439, 443, 446, 448, 601, 737, 750, 751, 753, 754, 756, 810, 930, 1024, 1053, 1342, 1345], "2025": [418, 443, 737, 930, 1024], "2026": 1343, "2030": 1342, "2031": 930, "2040": 450, "2047317070637311557": [213, 321], "2055938745": 130, "2065": [424, 425, 429, 432, 434, 435, 439, 446, 448], "2068": 166, "207": 1343, "2077": [268, 321, 450, 930, 1060, 1342, 1343], "2095": 166, "20_000": [40, 321], "20t08": 450, "20t18": 1060, "20word": 139, "21": [158, 190, 238, 270, 321, 421, 624, 626, 628, 630, 632, 635, 637, 639, 753, 762, 810, 836, 865, 924, 930, 1027, 1336], "213": 1350, "2147483647": 1350, "2147483648": [1170, 1319], "21d": 930, "22": [45, 49, 158, 166, 321, 426, 441, 445, 458, 460, 461, 622, 624, 626, 628, 630, 632, 635, 637, 639, 695, 753, 806, 810, 924, 930, 1055, 1068, 1071, 1205, 1273, 1319, 1342, 1343, 1350], "221": 1350, "2246e": [1228, 1292, 1319], "225": [445, 458, 1344], "22500": 788, "22_000_000": 1328, "22_500": 788, "23": [10, 166, 190, 212, 253, 283, 321, 422, 426, 429, 441, 443, 445, 450, 460, 621, 624, 626, 628, 630, 632, 635, 637, 639, 753, 756, 796, 797, 798, 810, 836, 850, 873, 883, 924, 930, 1028, 1035, 1053, 1303, 1319, 1349, 1350], "230498": 11, "230498095872587": 11, "2304980958725870923": 11, "232338648": 1328, "2337": [40, 321], "234": 27, "2345": 930, "23456789": 10, "235": 1350, "23h": 930, "24": [53, 158, 212, 227, 231, 253, 268, 291, 321, 408, 410, 426, 440, 441, 445, 452, 458, 460, 582, 621, 624, 626, 628, 630, 632, 635, 637, 639, 678, 751, 752, 754, 755, 756, 797, 798, 810, 850, 855, 873, 924, 1017, 1050, 1055, 1062, 1068, 1121, 1319, 1342, 1349], "24030": 165, "249": [726, 810], "25": [1, 27, 40, 55, 130, 190, 194, 212, 227, 253, 278, 283, 291, 295, 321, 379, 414, 426, 427, 441, 445, 450, 458, 460, 467, 606, 608, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 719, 753, 754, 755, 756, 762, 772, 797, 798, 810, 836, 839, 850, 855, 862, 873, 892, 894, 924, 930, 981, 1019, 1020, 1033, 1055, 1060, 1068, 1074, 1080, 1102, 1188, 1193, 1259, 1319, 1336, 1341, 1347, 1348], "250": [726, 810, 1207, 1319, 1339, 1350], "2500": [225, 283, 321], "254508": [467, 810, 1080, 1319], "255": 1350, "256": [231, 321, 379, 981, 1188, 1319, 1341], "2560": 981, "259921": [398, 810, 1002, 1319, 1341], "25_000_000": 1328, "26": [38, 40, 158, 163, 164, 165, 166, 170, 190, 321, 427, 459, 836, 924, 1033], "266667": [190, 321, 836, 924], "27": [1, 55, 278, 314, 321, 409, 436, 442, 459, 710, 810, 914, 930, 1191, 1298, 1319, 1349, 1350], "270": 1344, "28": [274, 279, 321, 330, 444, 461, 810, 1054, 1071, 1300, 1319, 1342, 1344, 1349, 1350], "283185": [610, 810], "2846": 321, "285714": [496, 810, 1106, 1319], "289962": 1344, "28_341_469": 1328, "29": [16, 158, 419, 437, 1025, 1047], "29096": 1350, "290994": [884, 924], "292432": [942, 1319], "292893": [467, 810, 1080, 1319], "2_color_scal": [40, 321], "2d": [253, 278, 279, 321, 440, 621, 770, 810, 873, 924, 1025, 1032], "2h": [624, 626, 628, 630, 632, 635, 637, 639, 810], "2i": [212, 321, 850, 924], "2m": [930, 1045], "2x": 165, "3": [1, 7, 8, 9, 10, 11, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 35, 37, 39, 40, 41, 42, 43, 44, 45, 51, 52, 53, 54, 55, 59, 60, 78, 95, 98, 100, 123, 124, 125, 126, 127, 128, 129, 130, 133, 136, 139, 141, 145, 146, 147, 150, 156, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 321, 324, 325, 330, 331, 332, 333, 335, 346, 347, 348, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 404, 405, 406, 407, 408, 409, 410, 411, 414, 415, 416, 417, 418, 420, 422, 423, 424, 425, 428, 429, 430, 431, 432, 433, 434, 435, 436, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 458, 459, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 554, 555, 556, 557, 558, 559, 560, 580, 581, 582, 583, 584, 585, 587, 589, 591, 592, 595, 598, 599, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 651, 653, 654, 655, 658, 659, 661, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 696, 697, 702, 703, 706, 707, 708, 709, 710, 711, 713, 717, 718, 721, 722, 723, 725, 726, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 806, 810, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 900, 901, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 924, 929, 930, 935, 936, 939, 941, 943, 944, 945, 947, 948, 949, 950, 951, 954, 955, 956, 957, 958, 959, 960, 962, 963, 964, 965, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 982, 992, 993, 994, 995, 997, 998, 999, 1000, 1002, 1003, 1004, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1028, 1029, 1032, 1034, 1035, 1036, 1038, 1039, 1040, 1042, 1044, 1045, 1046, 1051, 1054, 1055, 1056, 1057, 1059, 1060, 1061, 1063, 1064, 1066, 1068, 1070, 1071, 1073, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1091, 1092, 1093, 1094, 1096, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1122, 1125, 1126, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1145, 1146, 1147, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1161, 1162, 1163, 1164, 1165, 1167, 1168, 1169, 1170, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1226, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1237, 1239, 1240, 1241, 1244, 1245, 1246, 1249, 1250, 1251, 1252, 1254, 1255, 1259, 1260, 1261, 1262, 1263, 1267, 1274, 1275, 1280, 1281, 1284, 1286, 1287, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1299, 1300, 1301, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1319, 1324, 1328, 1329, 1331, 1332, 1334, 1335, 1336, 1337, 1338, 1339, 1341, 1342, 1343, 1344, 1345, 1347, 1348, 1349, 1350], "30": [40, 190, 200, 212, 216, 245, 251, 274, 295, 321, 324, 344, 345, 346, 414, 422, 424, 425, 429, 432, 434, 435, 436, 437, 439, 442, 444, 445, 446, 448, 450, 451, 458, 459, 489, 567, 646, 753, 770, 796, 797, 810, 836, 842, 850, 868, 894, 924, 930, 1020, 1028, 1047, 1054, 1055, 1060, 1061, 1068, 1099, 1319, 1324, 1335, 1336, 1339, 1341, 1342, 1344, 1345, 1348, 1350], "300": [274, 321, 488, 599, 616, 810, 930, 1200, 1206, 1207, 1209, 1319, 1339], "3000": 930, "3002": [421, 433, 1027, 1042], "30103": [555, 810, 1341], "3022416320763508302": [1100, 1319], "30_000": [40, 321], "30m": [212, 321, 445, 458, 850, 924, 1055, 1068], "30t16": 450, "31": [55, 190, 268, 321, 421, 422, 426, 433, 437, 440, 443, 451, 665, 695, 750, 753, 762, 770, 789, 836, 924, 930, 1025, 1027, 1028, 1032, 1042, 1047, 1053, 1060, 1061, 1199, 1243, 1273, 1319, 1343, 1345, 1350], "31t06": 1060, "32": [53, 65, 71, 75, 85, 222, 227, 253, 321, 582, 621, 646, 810, 855, 873, 924, 1021, 1051, 1188, 1210, 1319, 1336, 1342], "321": [27, 1350], "3212": [699, 1277], "321cba": 1342, "3265500": 930, "32971": [461, 1071], "32974": [461, 1071], "32976": [461, 1071], "32bit": [278, 321], "33": [190, 238, 321, 640, 810, 836, 865, 924, 1210, 1319, 1343], "333": [16, 641, 810, 1076, 1184, 1216, 1319], "33333": 1345, "333333": [218, 321, 584, 853, 924, 1188, 1214, 1319, 1336], "34": [190, 321, 681, 695, 836, 924, 1260, 1273], "3420": [699, 1277], "343622": [651, 810], "345": [395, 396, 676, 677, 997, 998, 1254, 1255], "3450": [1216, 1319], "3456": 930, "34776706224699483": [1230, 1319], "35": [40, 321, 414, 450, 753, 810, 1020, 1319], "350": [321, 324, 488, 599, 810, 1207, 1319, 1324], "3500": [1216, 1319], "356": [426, 441, 460], "356194": [733, 734, 1344], "357": [426, 441, 460], "358": [426, 441, 460], "359": [426, 441, 460], "36": [190, 321, 836, 924, 1347], "360": [412, 610, 810, 1344], "361": 1350, "363961": [547, 1160], "366": [441, 1051], "37": [12, 930], "370h": [467, 810, 1080, 1319], "37338": 1350, "38": [40, 130, 163, 166, 321], "38180177416060584": [633, 810, 1211, 1319], "381802": [633, 810, 1211, 1319], "386294": [556, 810, 1169, 1319, 1341], "389056": [471, 810, 1083, 1319, 1341], "39": [637, 762, 810], "39m": 930, "3_color_scal": [40, 321], "3d12h4m25": [212, 227, 253, 291, 321, 445, 458, 467, 621, 754, 755, 797, 798, 810, 850, 855, 873, 924, 1055, 1068, 1080, 1319], "3f": [139, 695, 698, 1273, 1276], "3i": [212, 253, 321, 850, 924], "3rd": [1250, 1274], "3xy": [660, 1238], "4": [1, 8, 13, 17, 25, 35, 37, 39, 40, 41, 42, 45, 51, 52, 53, 54, 55, 59, 60, 78, 98, 123, 124, 125, 126, 127, 128, 129, 130, 133, 150, 158, 170, 179, 180, 181, 182, 183, 184, 185, 189, 191, 195, 199, 200, 201, 202, 203, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 238, 240, 241, 242, 244, 245, 246, 247, 253, 255, 256, 263, 264, 267, 271, 272, 273, 274, 275, 276, 279, 282, 284, 285, 287, 288, 289, 290, 291, 293, 294, 295, 297, 298, 300, 301, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 321, 324, 325, 329, 330, 331, 332, 334, 336, 348, 355, 356, 357, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 372, 373, 379, 390, 391, 392, 395, 396, 398, 399, 400, 404, 405, 408, 409, 410, 412, 415, 422, 425, 426, 433, 441, 442, 443, 444, 445, 446, 447, 450, 452, 455, 457, 458, 460, 464, 465, 467, 471, 472, 474, 475, 476, 478, 479, 480, 481, 483, 484, 485, 486, 487, 490, 492, 494, 495, 496, 497, 506, 507, 511, 512, 513, 520, 521, 522, 523, 524, 526, 527, 529, 537, 539, 540, 541, 542, 543, 544, 545, 549, 550, 555, 558, 559, 560, 580, 582, 584, 585, 587, 589, 591, 592, 595, 596, 597, 600, 601, 603, 604, 605, 606, 609, 611, 615, 616, 617, 618, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 645, 648, 652, 653, 654, 655, 658, 660, 664, 667, 670, 672, 676, 677, 678, 679, 680, 681, 682, 685, 686, 687, 688, 693, 694, 695, 696, 700, 705, 706, 708, 709, 710, 711, 713, 716, 717, 718, 719, 725, 726, 728, 730, 731, 733, 734, 735, 736, 738, 739, 740, 741, 742, 744, 746, 747, 748, 749, 750, 753, 754, 755, 757, 759, 760, 764, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 806, 810, 825, 826, 828, 829, 830, 831, 832, 835, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 868, 869, 870, 873, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 897, 898, 900, 901, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 924, 929, 930, 934, 939, 942, 949, 956, 958, 959, 960, 962, 963, 964, 965, 966, 968, 970, 971, 972, 973, 974, 975, 981, 992, 997, 998, 1003, 1004, 1006, 1012, 1017, 1019, 1021, 1031, 1035, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1052, 1054, 1055, 1057, 1062, 1065, 1067, 1068, 1069, 1070, 1077, 1080, 1084, 1085, 1087, 1088, 1093, 1094, 1096, 1101, 1102, 1105, 1106, 1107, 1108, 1112, 1115, 1116, 1117, 1118, 1120, 1126, 1133, 1134, 1135, 1136, 1137, 1142, 1146, 1149, 1150, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1162, 1163, 1178, 1181, 1182, 1185, 1188, 1189, 1190, 1191, 1195, 1196, 1199, 1200, 1201, 1204, 1208, 1210, 1211, 1212, 1213, 1214, 1217, 1219, 1223, 1224, 1227, 1230, 1231, 1232, 1236, 1238, 1242, 1245, 1248, 1250, 1254, 1255, 1257, 1258, 1263, 1265, 1266, 1271, 1272, 1273, 1274, 1278, 1283, 1284, 1287, 1289, 1291, 1297, 1300, 1302, 1304, 1310, 1319, 1324, 1328, 1329, 1331, 1332, 1334, 1335, 1336, 1337, 1338, 1339, 1341, 1342, 1343, 1344, 1347, 1348, 1349, 1350], "40": [40, 190, 200, 227, 245, 321, 445, 450, 458, 489, 553, 699, 710, 810, 836, 855, 868, 924, 930, 1037, 1068, 1166, 1277, 1335, 1336, 1339, 1342], "400": [290, 321, 453, 454, 456, 891, 924, 1206, 1207, 1209, 1319, 1339], "4000000": [1078, 1319], "404": [228, 321, 666, 668, 856, 924, 1244, 1246], "4096": 1341, "41": [190, 321, 637, 810, 836, 924, 1336, 1350], "412277": 166, "414214": [655, 810, 1233, 1319, 1341], "4160": 55, "416147": 1344, "4164": [227, 321, 855, 924], "42": [55, 190, 213, 238, 253, 321, 450, 621, 810, 836, 865, 873, 924, 1100, 1319, 1335, 1349], "424778": [610, 810], "428571": [466, 810, 1079, 1319], "429101": 1336, "4294967296": [45, 321], "43": [190, 253, 321, 409, 621, 637, 810, 836, 873, 924], "4321": 930, "433013": [634, 810, 884, 924], "44": [10, 238, 321, 415, 810, 865, 924], "4411": [227, 321, 855, 924], "44225": [1002, 1319], "444": 10, "44444444444": 10, "45": [40, 190, 253, 321, 422, 445, 458, 621, 637, 660, 667, 707, 734, 753, 770, 796, 797, 810, 836, 873, 924, 930, 1028, 1055, 1060, 1068, 1238, 1245, 1286, 1341, 1342, 1344, 1348, 1350], "450": [1207, 1319], "45000": 788, "4500000": 930, "456": [9, 10, 422, 930, 1028, 1296, 1319], "456000": [422, 1028], "456001\u00b5": 930, "4566": [227, 321, 855, 924], "456789": [450, 930, 1056], "456789\u00b5": 930, "456m": 930, "457658": 1344, "459148": [463, 810], "46": 930, "4696": [227, 321, 855, 924], "47": [51, 190, 321, 637, 810, 836, 924, 930, 1336], "470": [869, 924], "47033": [633, 810, 1211, 1319], "47033046033698594": [633, 810, 1211, 1319], "475": [869, 924], "48": [12, 166, 253, 321, 621, 710, 810, 873, 924, 930], "4827": [227, 321, 855, 924], "485": 1350, "49": [190, 321, 836, 924, 930], "492474": [467, 810, 1080, 1319], "498": [228, 321, 856, 924], "4_500_000": 930, "4ab4a": 1342, "4d": [467, 810, 1080, 1319], "4f6228": [40, 321], "4f71": [40, 321], "4x": [224, 321], "5": [1, 7, 8, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 35, 37, 39, 41, 42, 45, 51, 52, 54, 55, 59, 98, 123, 126, 127, 128, 129, 130, 132, 137, 158, 159, 161, 164, 166, 170, 180, 183, 184, 185, 190, 191, 194, 199, 200, 201, 202, 203, 205, 206, 207, 209, 210, 211, 212, 214, 215, 217, 218, 220, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 240, 241, 242, 244, 246, 247, 248, 253, 256, 263, 264, 267, 268, 271, 272, 273, 274, 275, 276, 278, 279, 282, 283, 285, 288, 289, 290, 291, 294, 295, 297, 298, 300, 302, 303, 304, 305, 308, 309, 310, 311, 312, 313, 314, 315, 321, 324, 325, 330, 331, 334, 349, 350, 355, 356, 357, 359, 361, 365, 370, 372, 378, 379, 390, 391, 392, 395, 396, 399, 400, 410, 411, 412, 414, 415, 418, 421, 422, 423, 424, 425, 429, 432, 433, 434, 435, 439, 444, 446, 447, 448, 450, 451, 457, 461, 465, 467, 469, 470, 473, 475, 479, 480, 484, 485, 487, 490, 492, 495, 497, 500, 503, 504, 505, 506, 507, 511, 513, 520, 523, 524, 526, 527, 529, 532, 534, 535, 539, 540, 541, 542, 543, 544, 548, 549, 553, 559, 580, 582, 584, 596, 600, 601, 602, 603, 604, 605, 606, 608, 609, 611, 615, 616, 617, 618, 620, 621, 622, 623, 625, 626, 627, 628, 629, 631, 634, 636, 637, 638, 639, 640, 643, 654, 660, 670, 671, 672, 675, 676, 677, 696, 700, 711, 713, 717, 718, 719, 731, 733, 734, 736, 737, 738, 739, 740, 742, 744, 746, 747, 748, 749, 750, 751, 753, 756, 757, 758, 759, 760, 764, 766, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 788, 789, 791, 793, 794, 795, 799, 806, 810, 828, 829, 830, 831, 832, 836, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 862, 863, 869, 873, 879, 880, 881, 882, 883, 884, 885, 886, 890, 891, 893, 894, 897, 898, 900, 902, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 924, 930, 939, 942, 946, 949, 952, 953, 956, 958, 959, 960, 962, 964, 968, 973, 974, 975, 980, 981, 992, 997, 1004, 1006, 1013, 1017, 1018, 1019, 1020, 1021, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1042, 1054, 1056, 1057, 1058, 1060, 1061, 1067, 1069, 1070, 1071, 1077, 1080, 1082, 1084, 1085, 1086, 1096, 1101, 1102, 1105, 1107, 1111, 1114, 1126, 1133, 1136, 1137, 1142, 1145, 1148, 1152, 1153, 1154, 1155, 1156, 1157, 1161, 1162, 1166, 1170, 1178, 1185, 1188, 1189, 1190, 1193, 1194, 1195, 1196, 1200, 1201, 1204, 1205, 1206, 1207, 1209, 1210, 1213, 1217, 1219, 1224, 1230, 1233, 1238, 1248, 1249, 1250, 1253, 1254, 1274, 1278, 1291, 1298, 1300, 1303, 1304, 1307, 1310, 1319, 1324, 1329, 1332, 1334, 1336, 1337, 1338, 1341, 1342, 1343, 1344, 1347, 1349, 1350], "50": [12, 27, 40, 190, 200, 210, 321, 400, 445, 450, 458, 751, 752, 810, 836, 924, 930, 1006, 1019, 1068, 1259, 1319, 1335, 1336], "500": [40, 290, 321, 324, 424, 425, 429, 432, 434, 435, 439, 446, 448, 891, 924, 1041, 1043, 1049, 1206, 1207, 1209, 1319, 1324], "5000": [283, 321, 1303, 1319], "50000": 137, "500000": [432, 1041], "500000000": [439, 1049], "5000555": 930, "500_000": [424, 425, 429, 432, 434, 435, 439, 446, 448], "500m": [1041, 1043, 1049], "51": 930, "512": [45, 138, 224, 321, 379, 606, 810, 981, 1188, 1319], "51966": [700, 1278], "52": [295, 321, 459, 640, 810, 894, 924], "523599": 1344, "527525": [1212, 1319], "53": [459, 1069, 1347], "533316061": 1328, "533_316_061": 1328, "54": [471, 810, 1122, 1319, 1341, 1350], "540": [412, 610, 810], "540302": 1344, "543": 9, "543081": [402, 810, 1009, 1319], "5432": 138, "54321": 9, "544": 1350, "544705": 742, "549306": [946, 1319], "55": [40, 53, 321, 493, 810, 1104, 1319, 1338, 1342, 1343], "5555": 930, "55550": 930, "56": [130, 681, 714, 810, 1260], "566371": [610, 810], "567": 27, "56789": [1003, 1092, 1215, 1319], "57": [637, 810, 1215, 1319, 1344, 1350], "570796": [338, 340, 810, 941, 943, 1319, 1344], "575050513": [163, 166], "58": [246, 321], "581139": [1019, 1319], "584963": [554, 810], "587401": [398, 810, 1341], "59": [130, 190, 321, 422, 435, 443, 446, 450, 480, 753, 796, 797, 798, 810, 836, 924, 930, 1028, 1045, 1053, 1056], "59815": [471, 810, 1341], "5_000_555": 930, "5th": [40, 321], "6": [1, 8, 13, 35, 37, 39, 40, 41, 42, 43, 44, 45, 50, 52, 54, 59, 90, 91, 98, 123, 126, 127, 128, 129, 145, 146, 158, 180, 183, 186, 187, 191, 192, 193, 195, 196, 197, 199, 200, 203, 206, 207, 208, 209, 210, 212, 214, 216, 217, 218, 220, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 236, 239, 240, 243, 246, 247, 248, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 264, 266, 267, 269, 270, 271, 272, 273, 275, 276, 277, 279, 280, 281, 285, 287, 288, 289, 291, 292, 293, 294, 295, 297, 298, 304, 314, 315, 321, 324, 325, 330, 334, 355, 356, 357, 359, 365, 373, 391, 392, 395, 396, 408, 409, 415, 418, 422, 426, 436, 440, 441, 442, 453, 454, 456, 459, 460, 463, 465, 474, 475, 480, 481, 484, 490, 492, 495, 513, 514, 515, 524, 527, 540, 541, 542, 543, 547, 559, 560, 596, 600, 607, 610, 611, 612, 617, 619, 621, 623, 625, 627, 629, 631, 634, 636, 637, 638, 643, 648, 654, 660, 665, 676, 677, 700, 711, 713, 718, 726, 728, 730, 737, 739, 746, 747, 748, 750, 753, 757, 760, 766, 771, 772, 776, 789, 793, 806, 810, 828, 831, 832, 833, 834, 837, 838, 840, 841, 842, 843, 846, 847, 848, 850, 851, 853, 854, 855, 857, 859, 860, 867, 869, 871, 873, 874, 875, 877, 879, 880, 881, 882, 883, 886, 889, 890, 893, 894, 897, 898, 904, 914, 915, 924, 930, 956, 958, 959, 960, 962, 968, 997, 1004, 1008, 1010, 1015, 1016, 1021, 1024, 1050, 1060, 1070, 1077, 1084, 1096, 1102, 1127, 1128, 1137, 1140, 1153, 1154, 1155, 1156, 1160, 1178, 1192, 1195, 1196, 1201, 1203, 1208, 1210, 1212, 1214, 1219, 1224, 1227, 1238, 1243, 1254, 1278, 1290, 1300, 1319, 1324, 1329, 1332, 1334, 1336, 1337, 1341, 1347, 1348, 1350], "60": [40, 133, 200, 246, 321, 429, 434, 435, 446, 457, 480, 637, 695, 810, 1051, 1056, 1067, 1197, 1273, 1319, 1344], "600": [290, 321, 453, 454, 456, 891, 924, 930], "60000": 432, "600000": 930, "60000000": 439, "60206": [555, 810, 1341], "605551": 791, "605551275463989": 791, "609438": 1341, "60_000": [424, 425, 429, 432, 434, 435, 439, 446, 448], "61": [246, 321], "625": [631, 810], "626172": [662, 1240], "63": [637, 810], "63204": 1350, "6331e16": [1292, 1319, 1344], "636253": 1344, "64": [1, 53, 55, 66, 68, 72, 76, 83, 86, 157, 179, 283, 321, 403, 582, 606, 810, 1188, 1191, 1319, 1341], "64030": [700, 1278], "642093": 1344, "647961": 166, "64bit": [158, 613, 810, 1197, 1319], "65": [194, 321, 839, 924, 1074, 1319], "650": [488, 599, 810], "65280": [700, 1278], "654": [27, 789, 883, 924], "65432": 1345, "654321": 568, "65536": 1341, "65552": [378, 980], "66": [227, 290, 321, 637, 726, 810, 855, 891, 924, 1122, 1210, 1319], "663053": 130, "666": 930, "666000": 930, "666667": [190, 218, 292, 309, 321, 466, 775, 810, 836, 853, 892, 909, 924, 1079, 1319], "666f6f": [662, 1240], "67500": 788, "676": [228, 321, 856, 924], "678": [660, 667, 1238, 1245], "6789": [28, 930], "67890": 28, "686241": 1336, "69": [637, 810, 1122, 1319], "693147": [556, 810, 1167, 1169, 1319, 1341], "6_000_000": 1328, "7": [1, 16, 27, 35, 37, 39, 40, 41, 42, 43, 44, 45, 52, 54, 59, 145, 146, 158, 173, 180, 183, 186, 187, 188, 190, 192, 193, 196, 197, 199, 203, 206, 208, 212, 214, 216, 218, 226, 230, 232, 234, 236, 238, 239, 243, 246, 248, 250, 251, 253, 254, 256, 257, 258, 259, 261, 264, 266, 269, 270, 271, 272, 277, 279, 280, 281, 289, 291, 292, 293, 321, 324, 325, 330, 334, 356, 357, 359, 368, 409, 421, 422, 426, 433, 441, 444, 445, 450, 458, 460, 471, 484, 490, 495, 496, 513, 527, 540, 541, 542, 543, 600, 601, 611, 617, 621, 636, 637, 654, 670, 699, 713, 737, 746, 747, 750, 753, 754, 760, 765, 771, 772, 789, 793, 810, 828, 833, 834, 836, 838, 841, 843, 846, 848, 850, 851, 853, 854, 859, 865, 867, 870, 871, 873, 874, 875, 879, 883, 886, 924, 930, 946, 959, 960, 962, 971, 1027, 1028, 1032, 1037, 1042, 1054, 1055, 1060, 1068, 1070, 1083, 1106, 1121, 1140, 1153, 1154, 1155, 1156, 1200, 1201, 1213, 1219, 1248, 1277, 1319, 1324, 1329, 1334, 1336, 1337, 1338, 1341, 1343, 1347, 1350], "70": [190, 321, 726, 754, 810, 836, 924, 1122, 1319, 1336], "700": [290, 321, 891, 924], "702963": [40, 321], "7051579356916758811": 152, "707107": [367, 468, 634, 635, 733, 810, 970, 1081, 1319, 1344], "712389": 1344, "714": 1350, "714286": [496, 810, 1106, 1319], "718281828459045": [10, 463, 554, 810, 1074, 1167, 1319], "718282": [471, 810, 1083, 1319, 1341], "720": [412, 610, 810], "7264": 1350, "732051": [1233, 1319], "7415e16": 166, "742": [228, 321, 856, 924], "75": [40, 190, 194, 321, 334, 600, 608, 623, 625, 627, 629, 634, 636, 638, 772, 810, 836, 839, 924, 930, 1019, 1102, 1122, 1193, 1259, 1319, 1336, 1344, 1350], "7500": [225, 321], "7508": 1350, "754": [719, 810], "754888": [463, 810], "761594": [715, 810, 1293, 1319], "7654": 930, "765431": 1056, "7654321": 27, "76933c": [40, 321], "77": 1060, "78": [9, 681, 1260], "780": 9, "784": [227, 321, 855, 924], "785398": [342, 733, 734, 810, 945, 1319, 1344], "789": [10, 930], "79": [1122, 1319], "7d": 930, "8": [1, 11, 35, 37, 39, 41, 42, 43, 44, 45, 46, 51, 52, 54, 55, 59, 77, 81, 87, 145, 146, 158, 180, 183, 186, 187, 188, 190, 192, 193, 195, 196, 197, 199, 203, 206, 208, 210, 214, 216, 223, 226, 227, 228, 230, 231, 232, 234, 236, 239, 248, 250, 251, 253, 254, 256, 257, 258, 259, 261, 264, 266, 268, 269, 270, 272, 277, 279, 280, 281, 289, 292, 293, 295, 321, 334, 336, 348, 356, 357, 359, 406, 409, 410, 422, 450, 484, 491, 495, 496, 521, 523, 527, 540, 541, 542, 543, 582, 600, 601, 606, 617, 618, 622, 646, 652, 654, 678, 679, 680, 695, 726, 731, 737, 742, 744, 747, 749, 757, 759, 764, 765, 768, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 789, 791, 794, 795, 799, 810, 828, 833, 834, 836, 838, 840, 841, 843, 846, 848, 851, 854, 855, 856, 859, 860, 869, 871, 874, 875, 879, 883, 886, 894, 924, 930, 959, 960, 962, 1010, 1017, 1037, 1102, 1106, 1121, 1134, 1136, 1140, 1153, 1154, 1155, 1156, 1188, 1191, 1201, 1204, 1205, 1208, 1210, 1212, 1214, 1257, 1258, 1273, 1319, 1328, 1329, 1334, 1336, 1337, 1338, 1341, 1342, 1343, 1347, 1350], "80": [40, 194, 321, 839, 924], "800": [453, 454, 456, 1060], "8000": 138, "803065983": 130, "81": 1341, "814697265625": [1078, 1319], "816497": [269, 321], "8192": 136, "82": [227, 321, 855, 924], "8257e14": 1350, "83": [227, 321, 855, 924], "833": [227, 321, 855, 924], "833333": [309, 909], "848062": 1344, "848808": 166, "85": [40, 321, 1122, 1319, 1350], "850": [488, 599, 810], "8568409950394724": [1074, 1319], "8589934592": [646, 810], "86": 1350, "8601": 1342, "87": 1350, "876": 9, "88": [190, 321, 836, 924], "881374": [341, 810, 944, 1319], "888": [789, 883, 924], "8_000_000": 1328, "8a": [977, 978], "8nin": 1350, "9": [1, 9, 35, 37, 39, 40, 41, 42, 45, 51, 59, 180, 188, 190, 203, 205, 214, 218, 228, 230, 231, 246, 253, 255, 256, 259, 271, 272, 289, 293, 295, 314, 321, 330, 334, 336, 348, 356, 357, 359, 364, 366, 406, 409, 412, 422, 450, 476, 484, 495, 501, 521, 527, 538, 546, 584, 600, 601, 610, 617, 621, 622, 633, 636, 637, 648, 652, 667, 699, 707, 710, 740, 746, 747, 750, 753, 765, 798, 810, 836, 846, 851, 853, 856, 859, 873, 875, 886, 894, 914, 924, 930, 954, 955, 959, 960, 962, 967, 969, 1019, 1032, 1041, 1043, 1049, 1055, 1068, 1069, 1112, 1121, 1134, 1140, 1151, 1159, 1201, 1205, 1211, 1213, 1215, 1227, 1245, 1277, 1286, 1319, 1328, 1329, 1334, 1337, 1338, 1347], "90": [190, 228, 321, 699, 836, 856, 924, 1277, 1336, 1344], "90000": 788, "901234": [1003, 1092, 1215, 1319], "909": [227, 321, 855, 924], "910": [227, 321, 667, 855, 924, 1245], "910t": [660, 667, 1238, 1245], "914": [227, 321, 855, 924], "9223372036854775807": [722, 810], "9223372036854775808": [557, 810], "927295": 1344, "928571": [469, 810, 1082, 1319], "93": [1122, 1319], "94": [331, 810], "9477376373212048": [1122, 1319], "95": [17, 331, 810, 930], "95b3d7": [40, 321], "96": [17, 190, 321, 331, 810, 836, 924, 1122, 1319], "961": 55, "963624": [468, 810, 1081, 1319], "964028": [246, 321], "96_067_179": 1328, "97": [17, 217, 321, 331, 810, 1122, 1319], "9774092659964970114": [489, 810], "978307200": [428, 1034], "978307200000": 449, "978307200000000": [428, 449, 1034, 1059], "978307200000000000": 1059, "978393600": [428, 1034], "978393600000": 449, "978393600000000": [428, 449, 1034, 1059], "978393600000000000": 1059, "978480000": [428, 1034], "978480000000": 449, "978480000000000": [428, 449, 1034, 1059], "978480000000000000": 1059, "98": [17, 217, 246, 321, 390, 483, 486, 653, 699, 717, 810, 1277], "987": [27, 568], "987000": 930, "9876": 9, "987654": [27, 930], "987654321": 10, "9876543210": 130, "987m": 930, "988": 10, "99": [17, 40, 201, 202, 217, 220, 246, 290, 321, 331, 390, 473, 475, 483, 486, 653, 717, 800, 810, 844, 845, 891, 924, 1060, 1074, 1086, 1319, 1341], "9914e218": 166, "993": [1102, 1319], "998347": [246, 321], "999": [421, 433, 930, 1027, 1042, 1339, 1350], "999000": 930, "999954": [246, 321], "999999": [443, 705, 753, 796, 797, 798, 930, 1053, 1060, 1283], "999999\u00b5": 930, "9bbb59": [40, 321], "A": [13, 37, 40, 45, 46, 57, 58, 63, 69, 130, 136, 137, 138, 139, 150, 152, 157, 172, 187, 196, 205, 212, 227, 233, 235, 240, 246, 271, 274, 289, 290, 291, 295, 296, 321, 329, 396, 416, 417, 422, 447, 450, 464, 465, 473, 485, 487, 499, 502, 504, 505, 511, 551, 558, 559, 572, 586, 595, 596, 618, 623, 625, 627, 629, 631, 634, 636, 638, 658, 659, 660, 666, 667, 668, 669, 670, 671, 672, 675, 677, 681, 682, 683, 685, 696, 705, 740, 756, 757, 761, 810, 834, 841, 850, 855, 871, 891, 894, 895, 924, 930, 998, 1022, 1023, 1028, 1057, 1060, 1076, 1086, 1184, 1206, 1207, 1209, 1212, 1213, 1214, 1236, 1237, 1238, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1253, 1255, 1259, 1260, 1261, 1263, 1274, 1283, 1319, 1328, 1329, 1332, 1345, 1347], "AND": [727, 728, 789, 930, 1338], "ANDs": [381, 810, 983, 1319], "AS": [268, 321, 789, 790, 883, 924, 1328, 1335, 1336, 1337, 1338, 1339, 1341, 1342, 1343, 1344, 1345, 1347, 1349], "And": [703, 1281], "As": [12, 50, 90, 91, 123, 125, 126, 127, 129, 141, 145, 146, 154, 203, 278, 283, 321, 551, 800, 846, 924], "At": [45, 246, 321], "BY": [789, 883, 924, 1328, 1331, 1337, 1346, 1347], "Be": 924, "By": [5, 12, 14, 30, 51, 136, 137, 150, 212, 226, 227, 253, 255, 264, 269, 291, 292, 321, 365, 440, 445, 458, 544, 547, 553, 601, 616, 621, 624, 626, 628, 630, 632, 635, 637, 639, 645, 656, 724, 744, 751, 752, 754, 755, 756, 770, 791, 797, 798, 799, 810, 831, 850, 854, 855, 873, 879, 884, 892, 924, 968, 1050, 1055, 1068, 1157, 1200, 1223, 1234, 1309, 1319], "For": [14, 39, 40, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 194, 195, 200, 226, 227, 246, 253, 278, 307, 321, 324, 437, 438, 450, 466, 468, 469, 480, 551, 560, 572, 613, 651, 658, 666, 667, 668, 670, 672, 696, 746, 756, 760, 761, 806, 810, 839, 840, 855, 873, 907, 924, 928, 1060, 1079, 1081, 1082, 1085, 1172, 1197, 1230, 1236, 1244, 1245, 1246, 1248, 1250, 1274, 1298, 1319, 1324], "IF": 1340, "If": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 59, 67, 123, 124, 125, 126, 127, 128, 129, 133, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 150, 151, 153, 154, 155, 156, 159, 160, 161, 162, 167, 168, 169, 179, 183, 195, 200, 203, 210, 212, 214, 222, 223, 224, 227, 230, 231, 235, 242, 246, 253, 255, 256, 257, 261, 264, 266, 268, 271, 272, 275, 276, 278, 279, 285, 286, 288, 289, 290, 321, 324, 333, 335, 358, 365, 370, 378, 392, 418, 422, 423, 437, 438, 447, 450, 476, 491, 497, 509, 530, 539, 544, 545, 551, 559, 560, 567, 568, 574, 576, 601, 606, 608, 611, 613, 615, 616, 617, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 645, 647, 651, 652, 657, 667, 668, 670, 672, 673, 674, 685, 686, 687, 688, 690, 691, 692, 695, 696, 697, 698, 702, 705, 723, 727, 729, 732, 736, 737, 741, 742, 746, 751, 752, 754, 755, 756, 759, 760, 766, 767, 768, 770, 772, 776, 782, 785, 786, 787, 792, 794, 797, 798, 800, 801, 810, 831, 832, 840, 842, 846, 850, 854, 855, 860, 864, 871, 873, 877, 879, 881, 883, 888, 890, 891, 899, 907, 917, 924, 928, 929, 930, 937, 938, 961, 968, 973, 980, 993, 1006, 1024, 1028, 1029, 1047, 1048, 1057, 1060, 1085, 1101, 1102, 1107, 1121, 1122, 1126, 1143, 1152, 1157, 1158, 1164, 1172, 1191, 1193, 1195, 1197, 1199, 1200, 1201, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1217, 1219, 1221, 1223, 1226, 1230, 1231, 1235, 1245, 1246, 1248, 1250, 1251, 1252, 1259, 1263, 1264, 1265, 1266, 1268, 1269, 1270, 1273, 1274, 1275, 1276, 1280, 1283, 1291, 1294, 1298, 1300, 1308, 1319, 1324, 1328, 1329, 1331, 1339, 1347], "In": [51, 58, 138, 140, 151, 152, 155, 166, 170, 175, 180, 198, 200, 203, 212, 227, 228, 231, 242, 246, 253, 279, 288, 321, 324, 559, 560, 621, 681, 682, 810, 832, 846, 850, 855, 856, 873, 890, 924, 1078, 1085, 1191, 1196, 1260, 1319, 1324], "It": [31, 32, 33, 34, 37, 41, 45, 46, 47, 48, 49, 50, 57, 58, 67, 69, 73, 91, 133, 146, 148, 150, 153, 154, 155, 156, 163, 164, 166, 167, 168, 169, 170, 171, 177, 190, 228, 238, 245, 268, 278, 283, 289, 290, 298, 307, 321, 324, 325, 410, 411, 445, 491, 551, 560, 571, 608, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 739, 786, 787, 806, 810, 827, 831, 832, 836, 842, 856, 860, 865, 883, 891, 898, 907, 924, 932, 1001, 1017, 1018, 1055, 1102, 1193, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1218, 1220, 1298, 1303, 1319, 1324], "Its": [213, 321, 489, 810, 1100, 1319], "NO": 930, "NOT": [126, 223, 262, 321, 551, 570, 644, 810, 878, 924, 1347], "No": [20, 226, 321, 854, 924], "Not": [201, 226, 321, 474, 504, 505, 810, 831, 844, 854, 924, 1087, 1319], "ON": 1347, "OR": [729, 730, 846, 924, 930, 1338], "ORs": [386, 810, 988, 1319], "On": [719, 810, 858, 924], "One": [51, 190, 242, 278, 283, 321, 334, 600, 731, 743, 759, 765, 768, 775, 777, 780, 781, 790, 810, 836, 924, 930, 1019, 1319], "Or": [211, 212, 227, 253, 267, 291, 300, 321, 324, 467, 621, 654, 751, 752, 754, 755, 797, 798, 800, 806, 810, 849, 850, 855, 873, 882, 900, 924, 1080, 1319], "That": [142, 860, 924], "The": [20, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 56, 57, 60, 65, 66, 68, 69, 70, 78, 82, 83, 91, 92, 94, 123, 125, 126, 127, 129, 136, 137, 138, 139, 141, 145, 146, 147, 148, 150, 152, 153, 154, 155, 156, 159, 160, 161, 162, 166, 167, 168, 170, 172, 182, 190, 191, 193, 194, 195, 196, 199, 200, 203, 210, 211, 212, 213, 218, 224, 226, 227, 228, 231, 238, 244, 246, 253, 254, 255, 256, 259, 260, 261, 268, 278, 279, 284, 287, 291, 295, 296, 298, 299, 300, 307, 321, 332, 373, 374, 375, 376, 390, 391, 411, 413, 416, 417, 418, 426, 436, 440, 441, 445, 447, 450, 458, 459, 470, 473, 476, 480, 481, 489, 522, 526, 559, 560, 574, 601, 608, 611, 614, 615, 616, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 648, 651, 657, 661, 662, 666, 671, 672, 673, 674, 679, 680, 681, 682, 690, 691, 692, 693, 694, 695, 696, 706, 710, 716, 717, 718, 737, 740, 758, 762, 770, 772, 786, 787, 788, 789, 792, 800, 802, 803, 805, 806, 810, 811, 812, 815, 817, 818, 819, 826, 831, 836, 837, 839, 840, 842, 843, 846, 849, 850, 853, 854, 855, 856, 860, 865, 869, 873, 875, 876, 877, 883, 887, 889, 894, 895, 898, 900, 907, 924, 928, 929, 930, 936, 939, 976, 977, 978, 992, 1005, 1018, 1019, 1022, 1023, 1024, 1032, 1046, 1050, 1051, 1055, 1057, 1060, 1068, 1069, 1085, 1086, 1089, 1100, 1135, 1139, 1172, 1191, 1193, 1195, 1199, 1200, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1227, 1230, 1235, 1239, 1240, 1249, 1250, 1251, 1252, 1257, 1258, 1259, 1260, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1300, 1302, 1304, 1311, 1313, 1315, 1319, 1320, 1325, 1326, 1327, 1328, 1333, 1347, 1348, 1350], "Then": 155, "There": 1347, "These": [1, 32, 40, 132, 138, 139, 175, 285, 321, 458, 809, 810, 928, 1055, 1068], "To": [39, 58, 201, 321, 400, 416, 417, 474, 475, 658, 665, 666, 667, 670, 681, 682, 691, 692, 693, 694, 703, 810, 844, 924, 1006, 1022, 1023, 1087, 1236, 1243, 1244, 1245, 1248, 1259, 1260, 1281, 1300, 1319, 1347], "Will": [57, 58, 831, 832, 842, 869, 880, 924, 1319], "With": [145, 222, 264, 321, 365, 544, 645, 810, 831, 879, 924, 968, 1121, 1157, 1223, 1319], "_": [1, 51, 55, 175, 246, 276, 280, 321, 358, 395, 396, 530, 659, 667, 669, 671, 676, 677, 683, 686, 687, 997, 998, 1000, 1237, 1245, 1249, 1254, 1255, 1261, 1265, 1295, 1319], "__array_ufunc__": 932, "__call__": 806, "__dataframe__": 124, "__enter__": 1347, "__exit__": 1347, "__getattr__": 806, "__getitem__": 706, "__init__": [1, 31, 32, 33, 34, 50, 52, 53, 54, 55, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 163, 899, 1347], "__name__": [225, 321], "_bar_": 761, "_btm_by_a": [391, 810], "_btm_by_b": [391, 810], "_by_ca": [391, 718, 810], "_by_cb": [391, 718, 810], "_check_ord": [57, 58, 831, 832, 842, 869, 880, 924], "_df": [1, 52], "_diff": [295, 321, 894, 924], "_eager": [551, 831, 924], "_expr": [1, 53], "_foo": 565, "_geventdataframeresult": [58, 832, 924], "_is_not_nan": [505, 810], "_is_odd": [259, 321, 875, 924], "_isnan": [504, 810], "_isnul": [507, 810], "_kwarg": [831, 924], "_ldf": 1, "_lf": 54, "_lower_boundari": [212, 321, 850, 924], "_mean_squar": [300, 900], "_not_nul": [506, 810], "_o": [395, 396, 676, 677, 997, 998, 1254, 1255], "_revers": [585, 589, 618, 810], "_right": [226, 227, 228, 321, 854, 855, 856, 924], "_storage_account": 33, "_suffix": 590, "_sum": [300, 900], "_top_by_a": [718, 810], "_top_by_b": [718, 810], "_train": [896, 924], "_type_check": [46, 47, 48, 49, 57, 58, 831, 832, 842, 869, 880, 924], "_upper_boundari": [212, 321, 850, 924], "_verbos": 33, "_world": 761, "a1": [40, 52, 54, 321], "a101": 1350, "a123": [40, 321], "a2": [40, 52, 54, 321], "a_1": [687, 1265, 1295, 1319], "a_2": [1295, 1319], "a_3": [1295, 1319], "a_a": 790, "a_agg_list": [212, 321, 850, 924], "a_b_doubl": 757, "a_btm_by_a": [391, 810], "a_btm_by_b": [391, 810], "a_by_ca": [391, 718, 810], "a_by_cb": [391, 718, 810], "a_div_2": 1341, "a_div_5": 1341, "a_interpol": [496, 810], "a_is_even": [268, 321, 789, 883, 924], "a_isnul": [507, 810], "a_lag_": 740, "a_log2": 1341, "a_mod_2": 1341, "a_not_nul": [506, 810], "a_revers": [585, 589, 618, 810], "a_rol": 740, "a_suffix": 590, "a_times_2": [560, 810], "a_times_b": [559, 810], "a_top_by_a": [718, 810], "a_top_by_b": [718, 810], "a_txt": 790, "aa": [470, 658, 670, 758, 810, 930, 1019, 1236, 1248, 1319, 1342], "aaa": [1, 40, 321, 658, 670, 706, 708, 709, 930, 1236, 1248], "aaaa": [977, 978], "aabcdef": 692, "aad": [977, 978], "aag": 26, "aazz": 1342, "ab": [214, 230, 272, 295, 321, 682, 706, 708, 709, 810, 894, 924, 930, 1101, 1126, 1291, 1319, 1340, 1342], "ab12": 682, "ab12cd34ef": 682, "abc": [7, 16, 18, 19, 20, 21, 22, 23, 24, 25, 330, 664, 667, 681, 691, 810, 930, 1242, 1245, 1259, 1260], "abc123": 1342, "abc456": [681, 1259, 1260, 1342], "abcabc": 682, "abcd": 1342, "abcdeff": 691, "abf": [140, 151, 152], "abl": [98, 138, 551], "about": [98, 138, 651, 658, 666, 667, 670, 681, 682, 810, 928, 1230, 1236, 1244, 1245, 1248, 1259, 1260, 1319, 1350], "abov": [40, 227, 246, 321, 324, 800, 855, 924], "abs_a": 1341, "absolut": [140, 151, 152, 159, 160, 161, 162, 329, 466, 468, 469, 810, 935, 1079, 1081, 1082, 1319, 1341], "acc": [746, 747, 760, 784], "accent": 930, "accept": [37, 41, 45, 46, 47, 48, 49, 134, 136, 137, 140, 142, 144, 146, 148, 150, 153, 154, 155, 166, 182, 192, 211, 259, 260, 264, 267, 284, 295, 296, 300, 321, 330, 391, 400, 470, 497, 601, 615, 616, 654, 683, 710, 718, 726, 728, 730, 735, 738, 739, 740, 741, 749, 758, 774, 776, 779, 788, 792, 794, 800, 806, 810, 826, 838, 849, 875, 876, 879, 882, 887, 894, 895, 900, 924, 928, 929, 1006, 1107, 1191, 1199, 1200, 1223, 1261, 1319], "access": [37, 41, 45, 46, 47, 48, 49, 52, 53, 54, 55, 142, 146, 148, 150, 152, 153, 154, 155, 179, 186, 224, 254, 255, 268, 321, 668, 706, 833, 883, 896, 924, 929, 1246, 1350], "accord": [254, 321, 608, 751, 752, 754, 755, 797, 798, 810, 1037, 1193, 1319], "accordingli": [134, 136, 137, 142, 143, 144, 145, 146, 147, 148, 149], "account": [40, 130, 139, 152, 321, 440, 466, 468, 469, 810, 1050, 1079, 1081, 1082, 1319], "accumul": [746, 747, 760, 784], "acg": 26, "achiev": [231, 246, 307, 321, 396, 560, 677, 810, 998, 1172, 1255, 1319], "aco": 1340, "acosd": 1340, "across": [40, 51, 139, 141, 191, 213, 226, 233, 235, 240, 261, 271, 321, 413, 489, 574, 728, 730, 746, 747, 749, 774, 776, 779, 794, 810, 837, 854, 877, 924, 1100, 1319], "action": [39, 321], "activ": [7, 8, 18, 19, 21, 22, 23, 24, 28, 29, 523, 667, 1136, 1245], "actual": [40, 126, 166, 170, 256, 321, 1225, 1319, 1342, 1349], "ad": [38, 40, 126, 141, 212, 268, 278, 283, 285, 290, 295, 296, 321, 336, 450, 473, 567, 568, 710, 746, 747, 789, 810, 850, 883, 891, 894, 895, 924, 930, 1060, 1086, 1298, 1303, 1319], "adbc": [38, 138, 139, 321], "adbc_driver_manag": 158, "adbc_ingest": [38, 321], "add": [39, 40, 137, 200, 212, 231, 295, 296, 297, 298, 321, 324, 411, 587, 588, 589, 590, 608, 710, 756, 760, 800, 810, 850, 854, 894, 895, 896, 897, 898, 924, 1085, 1319, 1324], "add_calendar_dai": 756, "add_calendar_month": 756, "add_calendar_year": 756, "add_chart": [40, 321], "add_dai": 756, "add_format": [40, 321], "add_hour": 756, "add_milli": 756, "add_second": 756, "add_seri": [40, 321], "add_week": 756, "add_worksheet": [40, 321], "addit": [29, 36, 38, 39, 40, 126, 135, 140, 141, 151, 152, 164, 166, 168, 170, 195, 199, 211, 229, 244, 259, 260, 267, 280, 287, 295, 296, 300, 321, 330, 427, 470, 473, 601, 654, 658, 666, 667, 670, 681, 682, 706, 710, 735, 738, 739, 740, 741, 758, 788, 789, 792, 806, 810, 843, 849, 875, 876, 882, 889, 894, 895, 900, 924, 930, 1025, 1033, 1086, 1236, 1244, 1245, 1248, 1259, 1260, 1301, 1319, 1329, 1347], "addition": [59, 141, 254, 321, 930], "address": 667, "adjac": [40, 321], "adjust": [466, 468, 469, 651, 810, 1079, 1081, 1082, 1230, 1319], "adl": [140, 151, 152], "adlf": 152, "advanc": [40, 246, 321, 370, 551, 584, 587, 589, 591, 592, 973, 1164, 1350], "advantag": [40, 175, 245, 321], "advis": [40, 50, 91, 321], "aedt": 753, "aeiuo": [670, 1248], "af1": 51, "af2": 51, "af3": 51, "affect": [38, 159, 160, 161, 162, 321], "afm": 152, "afoo": [896, 924], "after": [40, 59, 126, 134, 136, 137, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 182, 183, 200, 284, 287, 321, 390, 391, 392, 470, 601, 611, 705, 717, 718, 810, 826, 887, 889, 924, 992, 1085, 1195, 1283, 1304, 1319, 1334], "afterward": [50, 800], "ag": [238, 321, 865, 924, 1348], "again": [560, 810], "against": [38, 100, 136, 138, 203, 268, 321, 523, 670, 789, 846, 883, 924, 1136, 1248, 1328, 1347, 1349, 1350], "agg": [211, 212, 246, 253, 321, 331, 381, 386, 389, 391, 476, 478, 483, 486, 559, 560, 601, 653, 654, 718, 725, 751, 754, 772, 810, 831, 832, 842, 849, 850, 869, 873, 880, 924, 930], "agg_group": [763, 810], "agg_list": [559, 810], "aggreg": [136, 137, 140, 148, 151, 205, 211, 212, 232, 234, 236, 239, 242, 246, 247, 248, 253, 269, 270, 289, 292, 300, 301, 303, 305, 321, 331, 381, 386, 389, 476, 492, 559, 560, 601, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 727, 728, 729, 730, 746, 747, 748, 749, 760, 765, 773, 774, 776, 778, 779, 784, 793, 794, 810, 850, 860, 861, 862, 863, 866, 867, 870, 873, 884, 885, 892, 900, 901, 903, 905, 924, 928, 983, 988, 991, 1103, 1205, 1206, 1207, 1209, 1212, 1213, 1214, 1319, 1335, 1337, 1340, 1346], "aggregate_funct": [246, 321, 930], "aho": [659, 669, 671, 683, 1237, 1247, 1249, 1261], "aiosqlit": 138, "alchemy_conn": 138, "algorithm": [181, 321, 337, 659, 669, 671, 683, 731, 810, 825, 924, 940, 1237, 1247, 1249, 1261, 1319], "alia": [1, 12, 51, 53, 55, 89, 186, 212, 230, 246, 253, 287, 295, 298, 321, 324, 330, 334, 374, 375, 376, 377, 380, 390, 393, 395, 396, 397, 405, 406, 407, 408, 409, 411, 414, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 457, 458, 459, 460, 461, 464, 465, 478, 480, 485, 487, 493, 494, 497, 500, 503, 511, 513, 535, 547, 553, 558, 560, 564, 567, 568, 570, 572, 577, 580, 582, 584, 595, 596, 600, 602, 606, 608, 611, 613, 641, 643, 658, 659, 660, 661, 663, 664, 666, 667, 669, 670, 671, 672, 676, 677, 683, 684, 685, 686, 687, 688, 689, 693, 694, 696, 706, 707, 708, 709, 711, 716, 717, 719, 725, 726, 732, 733, 734, 738, 739, 740, 741, 751, 754, 756, 757, 760, 761, 766, 769, 771, 772, 784, 788, 792, 797, 800, 810, 850, 852, 859, 873, 889, 894, 898, 924, 1018, 1025, 1026, 1029, 1032, 1033, 1034, 1035, 1040, 1041, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1057, 1059, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1126, 1193, 1198, 1244, 1245, 1249, 1260, 1265, 1266, 1319], "alias": [268, 321, 567, 568, 883, 924], "alic": [136, 1348], "align": [10, 15, 16, 40, 51, 59, 321, 1348], "align_fram": 59, "all": [1, 4, 5, 8, 13, 17, 20, 25, 30, 37, 39, 40, 45, 46, 49, 51, 57, 64, 92, 109, 111, 123, 128, 133, 136, 137, 140, 141, 142, 144, 146, 147, 148, 150, 151, 153, 154, 163, 164, 167, 170, 175, 180, 181, 183, 190, 192, 194, 195, 202, 214, 219, 221, 223, 224, 225, 226, 228, 229, 230, 235, 237, 241, 242, 246, 249, 250, 254, 255, 256, 260, 266, 267, 271, 272, 276, 278, 279, 283, 286, 288, 289, 290, 291, 296, 298, 321, 324, 334, 336, 358, 373, 391, 404, 410, 416, 417, 418, 419, 450, 470, 475, 481, 488, 489, 492, 495, 499, 502, 506, 507, 512, 522, 523, 530, 548, 551, 559, 581, 584, 585, 587, 588, 589, 590, 591, 592, 599, 601, 611, 616, 618, 622, 646, 652, 654, 660, 664, 667, 668, 672, 675, 678, 682, 690, 691, 692, 696, 718, 728, 737, 739, 746, 747, 748, 749, 758, 760, 765, 766, 769, 776, 784, 792, 793, 794, 800, 806, 810, 816, 822, 825, 828, 831, 832, 836, 838, 839, 840, 842, 845, 854, 856, 860, 864, 869, 871, 876, 880, 881, 882, 888, 890, 891, 895, 896, 898, 924, 930, 961, 1017, 1019, 1022, 1023, 1024, 1025, 1060, 1101, 1108, 1120, 1126, 1135, 1136, 1143, 1161, 1164, 1195, 1200, 1205, 1231, 1238, 1242, 1245, 1246, 1250, 1253, 1260, 1268, 1269, 1270, 1274, 1291, 1300, 1319, 1323, 1324, 1329, 1331, 1336, 1337, 1342, 1346, 1347, 1349, 1350], "all_compat": 1331, "all_data": 1347, "all_horizont": [194, 195, 321, 727, 839, 840, 924], "all_stat": 30, "alloc": [136, 137, 198, 249, 321, 810, 899, 928, 1078, 1319], "allow": [1, 8, 39, 40, 46, 47, 48, 49, 50, 91, 100, 124, 138, 141, 150, 153, 154, 155, 156, 163, 166, 167, 170, 175, 179, 224, 227, 229, 254, 255, 257, 279, 280, 283, 286, 299, 321, 393, 397, 440, 447, 450, 539, 559, 560, 567, 568, 613, 642, 695, 697, 698, 810, 854, 855, 860, 864, 888, 896, 924, 928, 930, 1050, 1057, 1060, 1152, 1172, 1197, 1217, 1273, 1275, 1276, 1300, 1301, 1319, 1342, 1350], "allow_alias": [567, 568], "allow_chunk": [166, 170], "allow_copi": [124, 179, 279, 321, 1300, 1319], "allow_dupl": [608, 810, 1193, 1319], "allow_infin": [166, 170], "allow_masked_out": [166, 170], "allow_missing_column": [148, 155], "allow_nul": [163, 166, 170, 1350], "allow_object": 770, "allow_parallel": [227, 321, 854, 855, 924], "allow_pyarrow_filt": 156, "allow_time_zon": [166, 167, 170], "allowed_dtyp": [166, 167, 170, 1350], "almost": [58, 231, 307, 321, 695, 697, 698, 832, 924, 1172, 1273, 1275, 1276, 1319], "along": [37, 41, 45, 46, 47, 48, 49, 146, 148, 150, 153, 154, 155, 321, 924], "alpha": [466, 468, 469, 810, 842, 869, 880, 924, 930, 1079, 1081, 1082, 1319], "alpha_i": [467, 810, 1080, 1319], "alphabet": [930, 1350], "alphanumer": [703, 930, 1281], "alreadi": [38, 39, 99, 278, 321, 410, 523, 575, 723, 810, 880, 924, 1017, 1136, 1308, 1319], "also": [27, 37, 40, 46, 50, 126, 138, 141, 142, 147, 148, 150, 155, 165, 166, 169, 170, 175, 196, 211, 212, 238, 242, 246, 253, 255, 259, 267, 278, 290, 295, 298, 321, 406, 409, 418, 440, 444, 450, 476, 497, 560, 567, 568, 601, 611, 615, 616, 654, 681, 682, 683, 690, 691, 706, 737, 746, 747, 750, 753, 760, 762, 784, 800, 809, 810, 816, 849, 850, 865, 873, 875, 882, 891, 894, 896, 898, 924, 930, 1024, 1054, 1107, 1195, 1199, 1200, 1238, 1259, 1260, 1261, 1268, 1319, 1323, 1329, 1331, 1334, 1338, 1342, 1345, 1347, 1348], "alt": [321, 324, 1319, 1324], "altair": [158, 321, 324, 1319, 1324], "altern": [40, 321, 806, 1339], "although": [268, 321, 883, 924], "alwai": [13, 37, 39, 46, 67, 69, 73, 136, 182, 203, 211, 226, 227, 231, 284, 307, 321, 390, 391, 559, 571, 695, 717, 718, 800, 810, 826, 846, 854, 855, 860, 887, 924, 930, 992, 1172, 1273, 1304, 1319, 1328, 1329, 1347, 1350], "am": [684, 1262], "amarillo": 1342, "amaz": [321, 324, 1319, 1324], "amazonaw": 32, "ambigu": [443, 444, 445, 458, 695, 698, 753, 1053, 1054, 1055, 1068, 1273, 1276], "america": 754, "amount": [50, 68, 91, 146, 150, 153, 154, 560, 756, 810, 1336], "amsterdam": [444, 1054], "an": [1, 30, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 52, 54, 55, 67, 68, 69, 96, 100, 103, 106, 113, 115, 123, 125, 126, 129, 136, 137, 138, 139, 141, 143, 146, 147, 148, 150, 152, 153, 154, 155, 164, 166, 170, 184, 185, 186, 192, 198, 201, 205, 207, 212, 223, 224, 225, 227, 228, 231, 242, 246, 250, 251, 253, 254, 258, 268, 273, 279, 283, 285, 289, 290, 295, 298, 307, 321, 324, 332, 354, 357, 369, 375, 381, 384, 386, 387, 389, 406, 407, 408, 409, 410, 411, 418, 422, 423, 440, 444, 447, 461, 467, 475, 476, 482, 483, 486, 520, 523, 526, 528, 550, 551, 559, 560, 572, 574, 584, 585, 606, 607, 608, 616, 617, 621, 622, 623, 625, 627, 629, 631, 634, 636, 638, 657, 658, 661, 667, 670, 674, 695, 697, 698, 700, 702, 716, 719, 727, 732, 736, 751, 752, 754, 755, 757, 759, 762, 766, 767, 768, 769, 770, 782, 784, 785, 788, 792, 797, 798, 800, 801, 806, 810, 828, 829, 830, 832, 836, 838, 842, 846, 850, 855, 856, 860, 869, 871, 873, 874, 880, 883, 891, 894, 896, 898, 899, 907, 921, 924, 928, 929, 930, 957, 960, 972, 977, 983, 986, 988, 989, 991, 1005, 1007, 1013, 1014, 1015, 1016, 1017, 1024, 1028, 1057, 1071, 1078, 1080, 1121, 1133, 1136, 1139, 1141, 1163, 1172, 1200, 1201, 1205, 1206, 1207, 1208, 1209, 1210, 1212, 1213, 1214, 1218, 1220, 1235, 1236, 1239, 1245, 1248, 1252, 1273, 1275, 1276, 1278, 1280, 1300, 1302, 1319, 1337, 1339, 1342, 1346, 1347, 1349], "ana": [684, 1262], "anan": [684, 1262], "ananab": 1342, "and_": 810, "ang": 1342, "angl": [733, 734], "ani": [4, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 56, 57, 58, 66, 67, 69, 73, 123, 124, 125, 126, 127, 128, 129, 133, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 148, 150, 151, 152, 153, 154, 155, 156, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 177, 180, 182, 188, 192, 194, 195, 200, 202, 203, 205, 207, 222, 224, 225, 226, 227, 228, 231, 235, 245, 250, 254, 255, 256, 268, 271, 274, 275, 278, 279, 280, 283, 284, 286, 289, 290, 298, 321, 324, 325, 330, 333, 334, 358, 390, 391, 392, 410, 411, 445, 446, 464, 465, 475, 476, 480, 483, 485, 487, 491, 501, 511, 518, 523, 530, 558, 559, 560, 567, 577, 580, 582, 584, 585, 587, 589, 591, 592, 595, 596, 600, 605, 608, 615, 616, 617, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 643, 647, 657, 659, 673, 691, 692, 693, 694, 695, 697, 698, 700, 702, 711, 717, 718, 719, 726, 727, 728, 730, 739, 741, 742, 743, 770, 772, 776, 786, 787, 794, 800, 810, 826, 831, 832, 838, 839, 840, 842, 845, 846, 854, 855, 856, 868, 871, 883, 887, 888, 891, 898, 899, 924, 928, 930, 932, 934, 937, 961, 992, 1001, 1017, 1018, 1055, 1056, 1075, 1076, 1085, 1088, 1093, 1095, 1097, 1102, 1112, 1121, 1124, 1131, 1136, 1143, 1171, 1172, 1183, 1184, 1193, 1199, 1200, 1201, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1218, 1219, 1235, 1237, 1251, 1273, 1275, 1276, 1278, 1280, 1298, 1299, 1300, 1301, 1303, 1304, 1319, 1324, 1347, 1350], "anna": [238, 321, 865, 924], "annex": [678, 1256], "anoth": [93, 165, 183, 191, 197, 211, 227, 261, 321, 410, 413, 420, 496, 526, 564, 570, 574, 615, 624, 626, 628, 630, 632, 635, 637, 639, 670, 810, 828, 837, 849, 855, 877, 896, 924, 1017, 1026, 1077, 1085, 1106, 1139, 1199, 1200, 1248, 1319, 1341, 1342], "anti": [226, 321, 854, 907, 924, 1218, 1220, 1319, 1335], "any_horizont": 729, "anyth": [39, 254, 321], "anywher": [377, 380, 695, 697, 698, 1273, 1275, 1276], "ap": 1342, "apach": [35, 41, 42, 45, 134, 138, 139, 142, 144, 152, 178, 321, 933], "apaya": [696, 1274], "api": [0, 32, 37, 41, 45, 46, 47, 48, 49, 124, 146, 148, 150, 153, 154, 155, 156, 179, 231, 307, 321, 560, 772, 810, 907, 924, 1172, 1319, 1346], "apia": [419, 1025], "app": [397, 689, 999, 1267], "appear": [40, 63, 126, 161, 162, 321, 682, 721, 810, 930, 1306, 1319, 1348], "append": [38, 39, 166, 200, 226, 227, 228, 321, 612, 800, 810, 854, 855, 856, 924, 1085, 1319], "appl": [187, 216, 226, 250, 251, 274, 302, 303, 305, 306, 308, 309, 310, 311, 312, 313, 314, 321, 391, 393, 397, 618, 663, 689, 718, 810, 854, 871, 902, 903, 905, 906, 908, 909, 910, 911, 912, 913, 914, 924, 994, 999, 1241, 1267, 1335, 1342], "appli": [10, 20, 37, 40, 46, 59, 138, 150, 163, 166, 170, 175, 190, 205, 228, 231, 245, 267, 268, 278, 307, 321, 346, 421, 424, 425, 426, 429, 430, 431, 432, 433, 434, 435, 436, 439, 441, 442, 446, 448, 459, 460, 462, 468, 469, 559, 560, 605, 623, 624, 625, 626, 629, 630, 636, 637, 654, 681, 682, 695, 697, 698, 702, 735, 746, 747, 760, 771, 772, 784, 789, 800, 810, 836, 856, 860, 868, 882, 883, 907, 924, 1006, 1027, 1030, 1031, 1032, 1035, 1036, 1037, 1041, 1042, 1043, 1045, 1046, 1049, 1051, 1052, 1056, 1058, 1069, 1070, 1072, 1081, 1082, 1172, 1206, 1207, 1209, 1213, 1259, 1260, 1273, 1275, 1276, 1280, 1319, 1328], "applic": [279, 321, 560, 810], "apply_on_context_ent": 175, "appropri": [40, 156, 203, 279, 321, 450, 611, 810, 846, 924, 1060, 1195, 1319], "approx": [337, 810], "approx_n_uniqu": [321, 810, 924, 1319], "approxim": [45, 181, 321, 337, 467, 731, 810, 825, 924, 940, 1080, 1319, 1341, 1350], "april": [447, 1057, 1342, 1343], "ar": [1, 10, 11, 17, 20, 30, 32, 34, 37, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 58, 59, 90, 91, 98, 104, 120, 123, 124, 125, 126, 127, 128, 129, 130, 133, 136, 137, 138, 139, 140, 141, 142, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 164, 166, 167, 168, 170, 175, 179, 182, 183, 188, 190, 194, 195, 198, 201, 203, 204, 205, 210, 211, 212, 224, 226, 227, 228, 229, 231, 237, 238, 244, 246, 253, 254, 255, 256, 259, 260, 262, 264, 267, 274, 278, 279, 280, 283, 284, 288, 290, 291, 295, 296, 299, 300, 321, 333, 335, 349, 365, 370, 390, 391, 392, 400, 406, 408, 409, 418, 445, 450, 458, 463, 465, 466, 467, 468, 469, 474, 476, 497, 499, 501, 502, 504, 505, 506, 507, 509, 514, 544, 551, 559, 596, 601, 608, 611, 614, 615, 616, 617, 621, 624, 626, 628, 630, 632, 633, 635, 637, 639, 645, 648, 651, 653, 654, 659, 668, 672, 674, 675, 679, 680, 681, 682, 683, 685, 696, 698, 700, 705, 710, 712, 716, 717, 718, 727, 728, 730, 735, 738, 739, 740, 741, 742, 749, 751, 752, 754, 755, 774, 776, 779, 788, 792, 794, 797, 798, 800, 802, 803, 805, 809, 810, 811, 812, 815, 816, 817, 818, 819, 822, 826, 831, 832, 836, 839, 840, 844, 846, 849, 850, 854, 855, 856, 860, 864, 865, 869, 871, 873, 875, 876, 878, 879, 882, 887, 890, 891, 894, 895, 896, 900, 924, 928, 930, 937, 938, 952, 968, 973, 992, 996, 1006, 1015, 1016, 1024, 1055, 1060, 1068, 1074, 1076, 1078, 1079, 1080, 1081, 1082, 1087, 1089, 1091, 1107, 1110, 1112, 1113, 1115, 1116, 1117, 1118, 1122, 1127, 1157, 1164, 1184, 1193, 1195, 1199, 1200, 1201, 1211, 1223, 1227, 1230, 1237, 1246, 1250, 1252, 1257, 1258, 1259, 1260, 1263, 1274, 1276, 1278, 1283, 1290, 1298, 1300, 1301, 1302, 1304, 1311, 1313, 1315, 1319, 1320, 1323, 1325, 1326, 1327, 1329, 1331, 1334, 1339, 1347, 1350], "arbitrari": [80, 207, 321, 413, 810, 837, 924, 930], "arbitrarili": [231, 321], "arcco": [810, 1319], "arccosh": [810, 1319], "arcsin": [810, 1319], "arcsinh": [810, 1319], "arctan": [733, 734, 810, 1319], "arctan2": 734, "arctanh": [810, 1319], "aren": [37, 46, 321, 924], "arg": [31, 50, 61, 62, 64, 65, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 83, 84, 85, 86, 87, 88, 203, 245, 321, 346, 605, 735, 761, 810, 846, 868, 924, 928, 1172, 1319, 1332], "arg_max": [810, 1319], "arg_min": [810, 1319], "arg_sort": [810, 1319], "arg_tru": [736, 810, 1319], "arg_uniqu": [810, 1319], "arg_wher": [347, 810], "argmax": [559, 810], "argument": [36, 39, 45, 135, 136, 140, 148, 150, 151, 166, 168, 170, 188, 192, 199, 211, 212, 227, 244, 245, 253, 259, 260, 267, 280, 287, 291, 295, 296, 300, 321, 445, 458, 470, 476, 497, 559, 601, 605, 621, 654, 690, 691, 692, 710, 727, 733, 734, 735, 738, 739, 740, 741, 743, 758, 788, 792, 800, 806, 810, 838, 843, 849, 850, 855, 868, 873, 875, 876, 882, 889, 894, 895, 900, 921, 924, 928, 930, 1055, 1068, 1107, 1268, 1269, 1270, 1301, 1319, 1341, 1342], "aris": 138, "arithmet": [205, 321], "arm": 158, "arm64": 158, "around": [37, 46, 321, 924], "arr": [279, 321, 802, 1300, 1311, 1319], "arr_bar": 1337, "arr_foo": 1337, "arrai": [123, 127, 136, 137, 140, 148, 151, 177, 198, 199, 273, 278, 279, 280, 321, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 378, 406, 407, 408, 409, 518, 533, 534, 535, 536, 538, 547, 548, 550, 553, 555, 559, 617, 623, 625, 627, 629, 631, 634, 636, 638, 644, 716, 739, 757, 789, 810, 843, 924, 929, 932, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 980, 1013, 1014, 1015, 1016, 1021, 1078, 1131, 1146, 1147, 1148, 1149, 1151, 1159, 1160, 1161, 1163, 1166, 1168, 1169, 1201, 1206, 1207, 1209, 1212, 1213, 1214, 1221, 1225, 1294, 1298, 1300, 1301, 1302, 1319, 1340, 1346, 1349], "array_agg": 1340, "array_contain": 1340, "array_get": 1340, "array_length": 1340, "array_low": 1340, "array_mean": 1340, "array_revers": 1340, "array_sum": 1340, "array_to_str": 1340, "array_uniqu": 1340, "array_upp": 1340, "arraylik": [1021, 1319], "arrow": [41, 42, 47, 123, 138, 139, 142, 144, 153, 178, 224, 255, 256, 273, 275, 279, 321, 924, 933, 1294, 1300, 1319], "arrowinvaliderror": [39, 321], "as_": [1319, 1324], "as_dict": [137, 244, 321], "as_expr": 930, "as_seri": [183, 274, 321, 828, 924, 930], "asarrai": [177, 932], "ascend": [212, 253, 321, 621, 810, 850, 873, 924], "ascii": [7, 20, 395, 396, 659, 669, 671, 672, 676, 677, 683, 685, 696, 705, 930, 997, 998, 1237, 1247, 1249, 1250, 1254, 1255, 1261, 1263, 1274, 1283], "ascii_borders_onli": 20, "ascii_borders_only_condens": 20, "ascii_case_insensit": [659, 669, 671, 683, 1237, 1247, 1249, 1261], "ascii_ful": 20, "ascii_full_condens": 20, "ascii_horizontal_onli": 20, "ascii_lett": 1350, "ascii_markdown": 20, "ascii_no_bord": 20, "ascii_onli": 930, "ascii_t": 175, "ascii_uppercas": [289, 321], "asd": [660, 667, 1238, 1245], "asia": [130, 930, 1030, 1031, 1058], "asid": 450, "asin": 1340, "asind": 1340, "asof": [227, 321, 855, 924], "asofjoinstrategi": [227, 321, 855, 924], "assert": [159, 160, 161, 162, 166, 170, 253, 321, 822, 930], "assert_frame_equ": [160, 161, 197, 321, 1350], "assert_frame_not_equ": [159, 162], "assert_series_equ": [159, 162, 1077, 1319, 1350], "assert_series_not_equ": [160, 161], "assert_someth": 164, "assertionerror": [159, 160, 161, 162], "assign": [164, 212, 306, 321, 370, 551, 601, 611, 687, 688, 810, 850, 906, 924, 973, 1164, 1195, 1265, 1266, 1319], "associ": [38, 40, 51, 139, 141, 165, 168, 256, 321, 929, 1330, 1332, 1336], "assum": [32, 256, 321, 860, 907, 924, 1342], "assume_rol": 32, "assumpt": [559, 810], "async": [138, 832, 924], "async_engin": 138, "asynchron": [58, 138, 832, 924], "asyncio": [58, 138, 832, 924], "asyncresult": [58, 832, 924], "ata": 26, "atan": 1340, "atan2": [733, 734, 1340], "atan2_ab": 1344, "atan2d": [734, 1340], "atan2d_ab": 1344, "atand": 1340, "atg": 26, "atgataaaggag": 26, "atol": [159, 160, 161, 162], "attain": [654, 810], "attempt": [1, 413, 810, 837, 924], "attr": [321, 324, 1319, 1324], "attribut": [60, 63, 66, 67, 68, 69, 70, 78, 82, 163, 321, 324, 802, 803, 805, 806, 811, 812, 815, 817, 818, 819, 899, 924, 1311, 1313, 1315, 1319, 1320, 1324, 1325, 1326, 1327], "attributeerror": 1, "audi": [274, 321, 618, 810], "august": 450, "australia": 753, "auth": 34, "authent": [39, 140, 148, 150, 151, 152, 153, 155, 321], "author": 1, "auto": [37, 41, 45, 46, 47, 48, 49, 59, 123, 125, 126, 127, 129, 145, 146, 148, 150, 153, 154, 155, 285, 321, 924, 1350], "auto_structifi": [259, 295, 321, 875, 894, 924], "autofilt": [40, 321], "autofit": [40, 321], "autogener": [136, 137, 141, 147, 150], "automat": [8, 37, 46, 123, 125, 126, 127, 129, 130, 136, 137, 138, 139, 145, 146, 148, 150, 153, 154, 166, 170, 172, 259, 268, 295, 321, 559, 616, 690, 691, 692, 789, 810, 875, 883, 894, 924, 928, 1199, 1200, 1268, 1269, 1270, 1303, 1319, 1329, 1331, 1334, 1347], "autumn": [681, 682], "avail": [40, 45, 49, 132, 138, 139, 140, 151, 152, 164, 175, 246, 268, 320, 321, 450, 611, 789, 802, 803, 805, 809, 810, 811, 812, 815, 816, 817, 818, 819, 822, 883, 922, 923, 924, 928, 930, 1019, 1195, 1311, 1313, 1315, 1319, 1320, 1323, 1325, 1326, 1327, 1338], "available_timezon": [66, 930], "averag": [40, 321, 466, 467, 468, 469, 611, 810, 1079, 1080, 1081, 1082, 1195, 1319, 1336], "avg": 1340, "avocado": 1342, "avoid": [166, 170, 203, 255, 321, 332, 810, 846, 924], "avro": [35, 134, 321, 822], "avrocompress": [35, 321], "aw": [32, 37, 41, 45, 46, 47, 48, 49, 140, 146, 148, 150, 151, 153, 154, 155, 321, 924], "awai": 1341, "await": [58, 138, 832, 918, 924], "awar": [10, 138, 224, 255, 256, 275, 321, 467, 659, 669, 671, 683, 698, 810, 924, 1080, 1237, 1247, 1249, 1261, 1276, 1319], "aws_access_key_id": [39, 140, 151, 155, 321], "aws_region": [39, 151, 155, 321], "aws_secret_access_kei": [39, 140, 151, 155, 321], "awsassumerolekwarg": 32, "axi": [237, 288, 321, 324, 733, 734, 864, 890, 924, 1319, 1324], "aya": [685, 1263, 1274], "az": [140, 151, 152], "azur": [33, 37, 39, 41, 45, 46, 47, 48, 49, 140, 146, 148, 150, 151, 152, 153, 154, 155, 321, 924], "azure_storage_account_kei": [140, 151, 152], "azure_storage_account_nam": [140, 151, 152], "b": [1, 10, 35, 37, 39, 41, 42, 45, 54, 59, 82, 95, 98, 123, 124, 125, 126, 127, 128, 129, 130, 136, 138, 141, 179, 180, 181, 182, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 219, 221, 222, 223, 224, 225, 226, 229, 230, 232, 234, 236, 239, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 254, 255, 256, 257, 258, 259, 264, 266, 267, 268, 269, 270, 272, 273, 274, 276, 277, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 321, 324, 330, 332, 333, 335, 336, 346, 348, 353, 358, 373, 374, 375, 376, 377, 378, 379, 380, 381, 386, 389, 391, 392, 404, 411, 415, 447, 450, 470, 472, 474, 475, 476, 478, 481, 488, 489, 492, 495, 496, 497, 499, 502, 504, 505, 506, 507, 512, 518, 523, 530, 540, 541, 542, 543, 559, 560, 565, 581, 584, 585, 586, 587, 588, 589, 590, 598, 599, 601, 605, 608, 611, 615, 616, 618, 620, 646, 652, 654, 661, 665, 670, 674, 681, 682, 706, 707, 718, 721, 725, 727, 728, 729, 730, 731, 735, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 757, 758, 759, 760, 761, 764, 765, 766, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 786, 787, 789, 791, 792, 793, 794, 795, 799, 806, 810, 825, 826, 829, 830, 831, 832, 833, 834, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 857, 858, 859, 860, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 924, 930, 936, 939, 961, 976, 977, 978, 979, 980, 981, 982, 996, 1000, 1001, 1018, 1021, 1057, 1060, 1074, 1077, 1078, 1085, 1088, 1107, 1112, 1131, 1153, 1154, 1155, 1156, 1193, 1198, 1239, 1243, 1248, 1252, 1259, 1260, 1284, 1286, 1287, 1289, 1301, 1306, 1319, 1329, 1331, 1332, 1334, 1335, 1336, 1337, 1342, 1343, 1344, 1347], "b1": [52, 54], "b2": [52, 54], "b345": [40, 321], "b4": [40, 321], "b_b": [268, 321], "b_btm_by_a": [391, 810], "b_btm_by_b": [391, 810], "b_by_ca": [391, 718, 810], "b_by_cb": [391, 718, 810], "b_is_not_nan": [505, 810], "b_isnan": [504, 810], "b_isnul": [507, 810], "b_not_nul": [506, 810], "b_revers": [585, 589, 618, 810], "b_suffix": 590, "b_sum": [300, 900], "b_top_by_a": [718, 810], "b_top_by_b": [718, 810], "ba": [413, 470, 574, 689, 758, 810, 930], "back": [4, 51, 155, 200, 212, 261, 279, 280, 321, 574, 601, 682, 810, 831, 850, 877, 899, 924, 1085, 1301, 1319], "backend": [39, 138, 139, 140, 151, 152, 321, 324, 1319, 1324], "background": [321, 325, 831, 923, 924], "backward": [45, 49, 202, 227, 321, 373, 418, 438, 475, 810, 845, 855, 924, 1024, 1048, 1088, 1319], "backward_fil": [481, 645, 810], "bad": [681, 682, 1259, 1260], "balanc": [169, 171, 1350], "ballon_dor": [666, 668, 1244, 1246], "banana": [187, 274, 303, 305, 308, 309, 310, 311, 312, 313, 314, 321, 391, 618, 663, 689, 718, 810, 903, 905, 908, 909, 910, 911, 912, 913, 914, 1342], "banded_column": [40, 321], "banded_row": [40, 321], "bar": [35, 37, 39, 41, 42, 43, 44, 45, 133, 145, 146, 183, 186, 187, 188, 192, 193, 194, 195, 196, 197, 200, 203, 205, 207, 208, 209, 214, 216, 217, 218, 220, 226, 230, 231, 232, 233, 234, 235, 236, 239, 240, 243, 246, 248, 250, 251, 254, 257, 258, 259, 261, 266, 269, 270, 271, 272, 273, 275, 276, 277, 279, 280, 281, 286, 287, 292, 293, 294, 299, 321, 324, 394, 413, 494, 564, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 651, 660, 662, 665, 667, 668, 684, 686, 688, 693, 694, 731, 742, 743, 744, 759, 764, 765, 768, 769, 773, 775, 777, 778, 780, 781, 788, 791, 795, 799, 800, 806, 810, 828, 833, 834, 838, 839, 840, 841, 846, 852, 853, 854, 867, 871, 874, 875, 888, 889, 893, 924, 929, 930, 995, 1143, 1230, 1238, 1240, 1243, 1245, 1246, 1262, 1266, 1271, 1272, 1319, 1333, 1335, 1336, 1337, 1339, 1342, 1345], "bar2": 1342, "bar22": [205, 321], "bar_": 686, "bar_3": [276, 321], "bar_4": [276, 321], "bar_a": [246, 321], "bar_at_2": 1337, "bar_avg": 1336, "bar_b": [246, 321], "bar_color": [40, 321], "bar_max": 1336, "bar_median": 1336, "bar_min": 1336, "bar_negative_border_color_sam": [40, 321], "bar_negative_color_sam": [40, 321], "bar_std": 1336, "bar_sum": 1336, "bar_var": 1336, "bare": [567, 568, 930], "base": [31, 40, 64, 109, 111, 141, 168, 195, 203, 212, 228, 253, 321, 419, 427, 463, 466, 467, 468, 469, 476, 491, 496, 554, 555, 559, 560, 606, 608, 616, 621, 624, 626, 628, 630, 632, 635, 637, 639, 700, 810, 846, 850, 856, 873, 924, 930, 1025, 1033, 1074, 1079, 1080, 1081, 1082, 1102, 1106, 1167, 1168, 1172, 1191, 1193, 1199, 1200, 1278, 1310, 1319, 1335, 1341, 1350], "base64": [375, 376, 661, 662, 977, 978, 1239, 1240], "base_nam": [285, 321], "base_utc_offset": [427, 1033], "baseexcept": 1347, "basi": [40, 141, 166, 321], "basic": [40, 177, 321, 566, 932, 1350], "basic_chart": [40, 321], "batch": [42, 57, 58, 132, 137, 138, 144, 146, 154, 156, 255, 283, 321, 831, 832, 860, 924], "batch_siz": [37, 46, 136, 137, 138, 146, 154, 156, 283, 321, 924], "batchedcsvread": 137, "baz": [207, 217, 218, 287, 321, 668, 686, 688, 759, 768, 781, 806, 853, 889, 924, 929, 930, 1246, 1266, 1333, 1339, 1342], "bb": [930, 1019, 1319, 1342, 1347], "bbb": [1, 40, 321, 706, 708, 709, 930], "bc": [670, 682, 793, 1248], "bcbc45": 1342, "bea": 12, "bear": 930, "beauti": 12, "becaus": [146, 154, 198, 212, 229, 231, 289, 307, 321, 480, 523, 551, 810, 850, 907, 924, 1078, 1136, 1172, 1319], "becom": [168, 320, 922, 923], "bed3": [40, 321], "been": [5, 30, 40, 173, 179, 302, 321, 482, 560, 578, 611, 810, 902, 1195, 1319], "beetl": [274, 321, 618, 810], "befor": [40, 65, 66, 136, 138, 141, 150, 156, 159, 160, 161, 162, 172, 175, 200, 212, 227, 268, 278, 283, 287, 321, 384, 385, 387, 388, 408, 409, 410, 559, 601, 602, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 665, 705, 712, 740, 786, 787, 810, 850, 852, 855, 889, 924, 928, 986, 987, 989, 990, 1015, 1016, 1017, 1085, 1188, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1243, 1283, 1290, 1319, 1335], "beforehand": [695, 697, 698, 1273, 1275, 1276], "begin": [12, 40, 321, 466, 468, 469, 666, 696, 810, 1079, 1081, 1082, 1244, 1274, 1319], "behav": [203, 321, 476, 560, 691, 692, 810, 846, 924], "behavior": [45, 49, 148, 155, 194, 195, 203, 226, 227, 321, 357, 482, 526, 528, 665, 759, 768, 810, 839, 840, 846, 854, 855, 921, 924, 960, 1139, 1141, 1243], "behaviour": [10, 51, 59, 194, 195, 268, 321, 658, 666, 667, 670, 681, 682, 719, 789, 810, 839, 840, 883, 924, 1236, 1244, 1245, 1248, 1259, 1260], "behind": 172, "being": [13, 31, 32, 33, 34, 37, 41, 45, 46, 47, 48, 49, 57, 58, 67, 69, 73, 133, 136, 137, 138, 141, 146, 147, 148, 150, 153, 154, 155, 156, 163, 164, 166, 167, 168, 169, 170, 171, 183, 199, 228, 268, 276, 278, 283, 289, 290, 321, 324, 325, 410, 411, 445, 491, 560, 608, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 665, 737, 739, 757, 786, 787, 810, 828, 831, 832, 842, 843, 856, 883, 891, 924, 1001, 1017, 1018, 1055, 1102, 1193, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1243, 1295, 1298, 1303, 1319, 1324, 1350], "belong": [1, 212, 321, 850, 924], "below": [19, 39, 140, 141, 151, 152, 195, 203, 246, 321, 450, 475, 672, 681, 682, 696, 751, 752, 754, 755, 797, 798, 800, 806, 810, 846, 924, 1060, 1250, 1259, 1260, 1274], "benchmark": 136, "best": [231, 307, 321, 560, 810, 1172, 1319], "better": [231, 278, 279, 307, 321, 396, 560, 677, 810, 827, 907, 924, 998, 1218, 1220, 1255, 1319], "between": [24, 59, 94, 163, 164, 166, 170, 180, 188, 226, 248, 255, 313, 321, 358, 392, 414, 415, 450, 497, 521, 530, 540, 541, 542, 543, 602, 608, 609, 631, 632, 657, 673, 733, 734, 737, 742, 744, 783, 786, 787, 810, 854, 870, 913, 924, 961, 993, 1000, 1020, 1021, 1060, 1107, 1134, 1143, 1153, 1154, 1155, 1156, 1188, 1193, 1194, 1210, 1235, 1251, 1319, 1336, 1344], "between_ab": [497, 810], "beyond": [703, 1281], "bia": [468, 469, 509, 633, 651, 810, 1081, 1082, 1122, 1211, 1230, 1319], "bias": [509, 651, 810, 1122, 1230, 1319], "big": [137, 378, 980], "big_fil": 137, "bigidx": 131, "bigqueri": 139, "bin": [411, 491, 608, 700, 726, 803, 810, 1018, 1102, 1193, 1278, 1313, 1319, 1324], "bin2int": 378, "bin_count": [491, 810, 1102, 1319], "bin_i": [726, 810], "bin_x": [726, 810], "bin_xor_xi": [726, 810], "binari": [40, 41, 138, 191, 261, 321, 374, 375, 376, 377, 378, 379, 380, 413, 574, 661, 810, 837, 877, 924, 930, 976, 977, 979, 980, 981, 982, 1239, 1338], "binary_str": [726, 810], "bind": 141, "birthdai": 136, "bit": [65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 83, 84, 85, 86, 87, 382, 383, 384, 385, 387, 388, 613, 658, 810, 984, 986, 987, 989, 990, 1197, 1236, 1319, 1338, 1342], "bit_and": 1340, "bit_count": 1340, "bit_length": 1340, "bit_or": 1340, "bit_xor": 1340, "bitmap": [198, 321, 1078, 1319], "bitwis": [334, 381, 386, 389, 600, 726, 727, 728, 729, 730, 810, 983, 988, 991, 1319, 1338, 1340], "bitwise_and": [810, 1319], "bitwise_count_on": [810, 1319], "bitwise_count_zero": [810, 1319], "bitwise_leading_on": [810, 1319], "bitwise_leading_zero": [810, 1319], "bitwise_or": [810, 1319], "bitwise_trailing_on": [810, 1319], "bitwise_trailing_zero": [810, 1319], "bitwise_xor": [810, 1319], "bla": [660, 667, 1238, 1245], "black": [231, 321, 374, 375, 376, 377, 380], "blindli": [523, 1136], "block": [20, 58, 211, 286, 321, 800, 832, 849, 871, 888, 897, 898, 907, 924, 1218, 1220, 1319], "blue": [50, 90, 91, 374, 375, 376, 377, 380, 723, 810, 1308, 1319], "bob": [136, 238, 321, 865, 924, 1348], "bodi": [40, 321, 325], "bold": [40, 321], "bom": [37, 46, 321, 924], "bool": [5, 7, 8, 9, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 33, 37, 39, 40, 45, 46, 47, 48, 49, 51, 57, 58, 59, 90, 123, 124, 125, 126, 128, 129, 130, 133, 136, 137, 138, 140, 141, 142, 144, 146, 147, 148, 150, 151, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 174, 177, 179, 182, 183, 184, 185, 190, 192, 197, 202, 203, 204, 205, 209, 210, 211, 212, 216, 217, 219, 220, 221, 224, 226, 227, 235, 244, 246, 250, 254, 255, 256, 257, 262, 265, 267, 268, 271, 274, 276, 279, 280, 284, 285, 286, 287, 290, 291, 293, 295, 303, 305, 308, 311, 321, 332, 333, 334, 335, 336, 346, 349, 350, 353, 357, 358, 366, 371, 374, 375, 377, 380, 391, 392, 393, 397, 405, 406, 407, 408, 409, 410, 411, 418, 430, 446, 463, 464, 465, 466, 468, 469, 485, 487, 488, 491, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 514, 515, 519, 523, 526, 528, 530, 539, 546, 551, 552, 558, 559, 560, 564, 565, 566, 567, 568, 569, 570, 571, 575, 576, 595, 596, 598, 600, 603, 604, 608, 611, 613, 622, 623, 625, 627, 629, 631, 633, 634, 636, 638, 642, 644, 646, 651, 653, 654, 657, 658, 659, 660, 661, 663, 669, 670, 671, 673, 681, 682, 683, 686, 687, 689, 695, 697, 698, 700, 702, 706, 708, 709, 718, 720, 723, 726, 727, 728, 729, 730, 732, 735, 736, 737, 741, 742, 745, 746, 751, 752, 754, 755, 766, 767, 770, 772, 776, 782, 785, 788, 789, 792, 794, 797, 798, 800, 801, 810, 826, 828, 829, 831, 832, 836, 838, 842, 845, 846, 849, 850, 854, 855, 860, 864, 869, 871, 878, 880, 882, 883, 887, 888, 889, 890, 891, 894, 899, 903, 905, 908, 911, 924, 928, 929, 930, 932, 937, 938, 949, 952, 953, 956, 960, 961, 969, 974, 976, 977, 979, 982, 993, 994, 996, 999, 1001, 1005, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1024, 1036, 1056, 1074, 1076, 1077, 1079, 1081, 1082, 1089, 1091, 1098, 1099, 1102, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1122, 1127, 1128, 1132, 1136, 1139, 1141, 1143, 1152, 1159, 1165, 1172, 1184, 1186, 1189, 1190, 1193, 1195, 1196, 1197, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1217, 1220, 1221, 1225, 1230, 1232, 1235, 1236, 1237, 1238, 1239, 1241, 1247, 1248, 1249, 1251, 1259, 1260, 1261, 1264, 1265, 1267, 1273, 1275, 1276, 1278, 1280, 1295, 1300, 1301, 1305, 1308, 1319, 1328, 1329, 1331, 1337, 1342, 1347], "boolean": [51, 166, 182, 203, 205, 267, 284, 321, 333, 334, 335, 349, 350, 353, 374, 377, 380, 391, 430, 476, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 514, 515, 519, 598, 600, 603, 604, 654, 674, 718, 725, 726, 735, 736, 792, 800, 810, 826, 846, 882, 887, 924, 930, 937, 938, 950, 952, 953, 956, 976, 1036, 1089, 1107, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1120, 1127, 1128, 1132, 1186, 1189, 1190, 1220, 1236, 1310, 1319, 1339], "border": 20, "both": [10, 25, 37, 46, 50, 90, 91, 138, 141, 155, 186, 212, 226, 227, 228, 238, 253, 254, 280, 290, 321, 336, 400, 411, 450, 470, 497, 608, 621, 624, 626, 628, 630, 632, 635, 637, 639, 685, 751, 752, 754, 755, 797, 798, 806, 810, 821, 850, 854, 855, 856, 865, 873, 891, 924, 930, 1006, 1060, 1107, 1263, 1301, 1319, 1347, 1348], "boto3": 32, "bottom": [182, 321, 391, 810, 826, 924], "bottom_k": [284, 321, 391, 717, 718, 810, 887, 924, 1304, 1319], "bottom_k_bi": [390, 717, 718, 810], "bound": [105, 136, 137, 198, 212, 321, 357, 400, 497, 526, 528, 551, 557, 722, 732, 751, 752, 754, 755, 797, 798, 810, 850, 924, 960, 1006, 1078, 1107, 1139, 1141, 1170, 1307, 1319, 1337], "boundari": [212, 321, 400, 491, 703, 810, 850, 924, 1006, 1102, 1281, 1319], "box": [20, 231, 321], "box_draw": 20, "branch": [57, 58, 831, 832, 842, 869, 880, 924], "break": [31, 32, 33, 34, 37, 41, 45, 46, 47, 48, 49, 57, 58, 67, 69, 73, 133, 146, 148, 150, 153, 154, 155, 156, 163, 164, 166, 167, 168, 169, 170, 171, 226, 228, 268, 278, 283, 289, 290, 321, 324, 325, 410, 411, 445, 491, 560, 608, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 739, 786, 787, 810, 831, 832, 842, 854, 856, 883, 891, 924, 1001, 1017, 1018, 1055, 1102, 1193, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1298, 1303, 1319, 1324], "breakpoint": [411, 491, 608, 810, 1018, 1102, 1193, 1319], "breezah": 150, "breviti": 175, "broadcast": [683, 739, 930, 1261], "broader": 930, "brotli": [45, 49, 321, 924], "brussel": [444, 1054], "bst": [423, 427, 444, 1029, 1033, 1054], "bucket": [39, 140, 151, 152, 155, 321, 445, 458, 491, 810, 1055, 1068, 1102, 1319], "bud": [681, 682, 1259, 1260], "budget": 1328, "buffer": [136, 137, 138, 198, 224, 321, 378, 980, 1078, 1319], "buffer_s": [224, 321], "bug": [559, 560, 810, 860, 907, 924, 1172, 1319], "build": [56, 124, 930, 1350], "built": 94, "builtin": [134, 136, 137, 141, 142, 143, 144, 145, 146, 147, 148, 149, 191, 321, 413, 810, 837, 924], "bundl": 175, "busi": [418, 737, 1024], "business_day_count": [418, 1024], "by_alternate_row": 1, "by_dtyp": 930, "by_first_letter_of_column_nam": 52, "by_first_letter_of_column_valu": 52, "by_index": 930, "by_left": [227, 321, 855, 924], "by_nam": 930, "by_pred": [254, 321], "by_right": [227, 321, 855, 924], "bye": 1, "byi": 1342, "bys": [212, 321, 850, 924], "byte": [35, 37, 40, 41, 42, 45, 46, 49, 134, 135, 136, 137, 142, 143, 144, 145, 146, 149, 150, 153, 154, 191, 198, 261, 321, 378, 395, 396, 413, 574, 670, 671, 672, 676, 677, 685, 696, 810, 837, 877, 924, 980, 997, 998, 1078, 1248, 1249, 1250, 1254, 1255, 1263, 1274, 1319, 1342], "bytesio": [40, 41, 42, 134, 136, 137, 141, 142, 143, 144, 145, 146, 147, 148, 149, 191, 261, 321, 413, 574, 810, 837, 877, 924], "c": [1, 10, 35, 37, 39, 41, 42, 45, 52, 54, 59, 98, 124, 126, 128, 130, 141, 150, 179, 180, 182, 183, 184, 185, 186, 187, 189, 192, 193, 194, 195, 196, 197, 199, 203, 205, 208, 209, 210, 211, 212, 214, 216, 217, 225, 226, 229, 230, 232, 234, 236, 239, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 254, 257, 258, 259, 266, 267, 268, 269, 270, 272, 273, 276, 277, 278, 279, 280, 281, 284, 288, 289, 290, 292, 293, 295, 300, 303, 304, 305, 308, 309, 311, 314, 315, 321, 325, 330, 332, 333, 335, 353, 373, 391, 411, 450, 488, 497, 518, 530, 560, 567, 584, 585, 599, 601, 605, 608, 646, 687, 695, 718, 721, 728, 730, 731, 733, 734, 735, 738, 739, 741, 742, 743, 744, 746, 747, 749, 759, 760, 761, 764, 765, 768, 769, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 789, 791, 793, 794, 795, 799, 806, 810, 826, 828, 829, 830, 831, 832, 833, 834, 835, 838, 839, 840, 841, 842, 843, 846, 849, 850, 854, 858, 867, 869, 871, 872, 874, 875, 880, 881, 882, 883, 887, 890, 891, 894, 896, 900, 903, 904, 905, 908, 909, 911, 914, 915, 924, 928, 930, 1000, 1018, 1107, 1131, 1193, 1265, 1273, 1287, 1306, 1319, 1329, 1331, 1332, 1334, 1335, 1336, 1337, 1342, 1347], "c00": 930, "c01": 930, "c02": 930, "c03": 930, "c05": 930, "c1": 370, "c123": 1342, "c2": 370, "c20": 930, "c25": 930, "c3": 370, "c40": 930, "c45": 1342, "c4d79b": [40, 321], "c50": 930, "c567": [40, 321], "c60": 930, "c75": 930, "c80": 930, "c8ae6d2b276": [40, 321], "c93": 930, "c95": 930, "c96": 930, "c97": 930, "c98": 930, "c99": 930, "c_btm_by_a": [391, 810], "c_btm_by_b": [391, 810], "c_by_ca": [391, 718, 810], "c_by_cb": [391, 718, 810], "c_c_c": [789, 883, 924], "c_contigu": [279, 321], "c_max": [601, 810], "c_mean_squar": [300, 900], "c_min": [601, 810], "c_top_by_a": [718, 810], "c_top_by_b": [718, 810], "c_total": 1347, "cach": [50, 57, 58, 90, 91, 118, 142, 150, 153, 155, 159, 160, 161, 162, 174, 615, 616, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 695, 697, 698, 702, 810, 821, 831, 832, 842, 869, 880, 924, 996, 1199, 1200, 1273, 1275, 1276, 1280, 1319], "cadi": [246, 321], "cafe": [700, 1278], "caf\u00e9": [395, 396, 676, 677, 930, 997, 998, 1254, 1255], "calamin": 141, "calcul": [40, 45, 49, 51, 190, 212, 269, 292, 321, 414, 466, 467, 468, 469, 509, 521, 540, 547, 553, 557, 633, 651, 656, 722, 724, 744, 786, 787, 791, 799, 810, 836, 850, 884, 892, 924, 1019, 1020, 1079, 1080, 1081, 1082, 1122, 1134, 1153, 1211, 1230, 1234, 1309, 1319], "calendar": [65, 66, 212, 227, 253, 291, 321, 421, 431, 433, 440, 445, 458, 462, 467, 621, 624, 626, 628, 630, 632, 635, 637, 639, 751, 752, 754, 755, 756, 797, 798, 810, 850, 855, 873, 924, 1027, 1037, 1042, 1050, 1055, 1068, 1072, 1080, 1319], "calendar_year": [431, 462], "call": [37, 40, 41, 45, 46, 47, 48, 49, 50, 57, 58, 128, 137, 138, 141, 146, 148, 150, 153, 154, 155, 159, 160, 161, 162, 166, 170, 175, 182, 211, 212, 229, 231, 253, 268, 279, 284, 320, 321, 390, 391, 406, 409, 418, 559, 560, 584, 585, 587, 589, 591, 592, 615, 616, 647, 717, 718, 737, 743, 806, 810, 826, 831, 832, 842, 849, 850, 869, 873, 880, 883, 887, 921, 922, 923, 924, 928, 930, 992, 1024, 1172, 1200, 1226, 1300, 1304, 1319, 1329, 1333, 1347], "callabl": [52, 53, 54, 55, 150, 205, 231, 245, 250, 307, 321, 370, 551, 559, 560, 585, 586, 605, 622, 746, 747, 760, 771, 772, 784, 810, 860, 868, 871, 907, 924, 973, 1164, 1172, 1205, 1319], "caller": [139, 238, 321, 551, 860, 865, 907, 924], "cam": [250, 321, 871, 924], "can": [1, 14, 27, 37, 40, 41, 45, 46, 47, 48, 49, 50, 51, 57, 58, 65, 66, 68, 82, 90, 91, 126, 136, 137, 138, 141, 142, 146, 147, 148, 150, 153, 154, 155, 156, 164, 165, 166, 170, 172, 175, 177, 182, 184, 194, 195, 196, 205, 207, 211, 212, 219, 221, 223, 226, 227, 231, 242, 246, 253, 255, 256, 259, 261, 262, 267, 278, 279, 283, 284, 285, 289, 295, 298, 307, 321, 324, 333, 370, 391, 406, 409, 410, 413, 418, 437, 438, 440, 444, 447, 450, 458, 467, 473, 476, 497, 523, 551, 559, 560, 567, 571, 574, 575, 581, 584, 585, 587, 589, 591, 592, 601, 606, 608, 613, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 644, 646, 651, 654, 659, 668, 675, 681, 682, 683, 690, 691, 692, 695, 706, 718, 735, 737, 750, 753, 760, 762, 766, 767, 772, 789, 800, 806, 809, 810, 821, 826, 827, 831, 832, 837, 839, 840, 842, 850, 854, 855, 873, 875, 877, 878, 880, 882, 883, 887, 894, 897, 898, 924, 930, 932, 973, 1017, 1024, 1047, 1048, 1050, 1054, 1055, 1057, 1060, 1068, 1080, 1086, 1107, 1136, 1164, 1172, 1177, 1191, 1193, 1197, 1200, 1218, 1220, 1221, 1224, 1230, 1237, 1238, 1246, 1253, 1259, 1260, 1261, 1268, 1269, 1270, 1273, 1298, 1300, 1319, 1324, 1334, 1347], "cancel": [831, 924], "candid": [666, 668, 1244, 1246], "cannot": [1, 45, 49, 100, 103, 136, 137, 141, 142, 144, 147, 148, 155, 172, 175, 231, 256, 257, 279, 298, 307, 321, 375, 450, 470, 539, 560, 575, 642, 661, 687, 708, 772, 810, 880, 898, 899, 907, 924, 930, 977, 1060, 1152, 1172, 1217, 1239, 1265, 1300, 1319], "capabl": [1, 40, 321], "capac": [198, 265, 321, 1078, 1225, 1319], "capit": [703, 1281, 1342], "captur": [666, 668, 681, 682, 1244, 1246, 1259, 1260], "car": [250, 274, 321, 618, 810, 871, 924], "cardin": [181, 321, 337, 731, 810, 825, 924, 940, 1319], "care": [40, 262, 321, 560, 601, 644, 810, 878, 924, 1221, 1319], "cars_revers": [618, 810], "cartesian": [226, 321, 854, 924], "case": [40, 50, 51, 58, 98, 123, 125, 126, 127, 129, 138, 145, 146, 154, 155, 172, 200, 212, 224, 231, 246, 253, 255, 256, 275, 278, 279, 321, 419, 467, 559, 571, 572, 585, 621, 658, 659, 667, 669, 670, 671, 681, 682, 683, 703, 810, 832, 850, 873, 924, 928, 930, 1025, 1080, 1085, 1236, 1237, 1245, 1247, 1248, 1249, 1259, 1260, 1261, 1281, 1298, 1319], "cast": [1, 39, 53, 54, 123, 125, 126, 129, 159, 160, 161, 162, 205, 212, 245, 253, 278, 279, 283, 295, 321, 336, 408, 409, 420, 447, 450, 461, 600, 605, 606, 613, 615, 621, 674, 675, 705, 712, 716, 740, 741, 790, 810, 850, 868, 873, 894, 924, 928, 930, 1001, 1015, 1016, 1026, 1057, 1060, 1071, 1191, 1197, 1252, 1253, 1283, 1290, 1296, 1300, 1302, 1303, 1319, 1340], "cast_str_to_int": [245, 321, 868, 924], "cast_to_supertyp": [810, 928], "cat": [26, 50, 90, 91, 411, 608, 658, 660, 701, 704, 716, 741, 805, 810, 930, 1018, 1102, 1193, 1236, 1238, 1279, 1282, 1315, 1319], "categor": [39, 50, 69, 90, 91, 93, 159, 160, 161, 162, 226, 276, 321, 393, 394, 395, 396, 397, 411, 608, 615, 616, 716, 810, 930, 994, 995, 996, 997, 998, 999, 1000, 1001, 1018, 1193, 1199, 1200, 1302, 1319], "categori": [40, 50, 69, 91, 276, 321, 394, 411, 491, 608, 810, 995, 1018, 1102, 1193, 1295, 1319], "categorical_as_str": [159, 160, 161, 162], "categoricalord": 63, "categoricaltyp": [273, 321], "caus": [106, 115, 124, 136, 137, 138, 150, 179, 200, 279, 321, 559, 810, 1085, 1300, 1319], "cba": 692, "cbrt": [810, 1319, 1340], "cbrt_a": 1341, "cc": [470, 758, 810, 930, 1019, 1319, 1342], "ccc": [1, 40, 321, 706, 708, 709, 930, 1342], "ccy": 1350, "cd": [682, 706, 708, 709, 930], "cd34": 682, "cdatainterfac": [178, 933], "cde": [930, 1342], "cdt": [445, 458, 1055, 1068], "ceil": [53, 810, 1319, 1340], "ceil_a": 1341, "cell": [15, 16, 40, 246, 321], "cent": [421, 1259], "center": [15, 16, 40, 321, 466, 468, 469, 622, 623, 625, 627, 629, 631, 634, 636, 638, 810, 1079, 1081, 1082, 1205, 1206, 1207, 1208, 1209, 1210, 1212, 1213, 1214, 1319], "central": [151, 152, 175, 509, 651, 810, 1122, 1230, 1319], "centuri": 1343, "certain": [46, 47, 48, 49, 58, 217, 291, 321, 691, 692, 806, 831, 832, 869, 924, 1319], "certainli": [695, 697, 698, 1273, 1275, 1276], "cest": [444, 1054], "cet": [444, 1054], "cfg": [2, 4, 17, 175], "cfg_ascii_fram": 175, "cfg_markdown": 175, "cfg_verbos": 175, "cfoo": [896, 924], "chain": [584, 585, 587, 589, 591, 592, 800], "chanc": [163, 166, 170, 1350], "chang": [30, 31, 32, 33, 34, 37, 41, 45, 46, 47, 48, 49, 51, 57, 58, 67, 69, 73, 133, 136, 137, 138, 141, 146, 148, 150, 153, 154, 155, 156, 163, 164, 166, 167, 168, 169, 170, 171, 228, 268, 278, 283, 289, 290, 297, 321, 324, 325, 410, 411, 414, 445, 450, 491, 560, 601, 602, 608, 615, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 739, 786, 787, 810, 831, 832, 842, 856, 883, 891, 897, 924, 928, 930, 1000, 1001, 1017, 1018, 1055, 1060, 1102, 1188, 1193, 1199, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1225, 1298, 1303, 1319, 1324], "changes_length": [810, 928], "char": [27, 136, 150, 667, 1245], "char_length": 1342, "charact": [7, 9, 12, 20, 26, 27, 28, 37, 38, 46, 92, 135, 136, 137, 139, 150, 321, 395, 396, 440, 664, 665, 667, 672, 676, 677, 679, 680, 681, 682, 685, 686, 687, 690, 691, 692, 693, 694, 696, 703, 705, 869, 924, 930, 997, 998, 1050, 1242, 1243, 1245, 1250, 1254, 1255, 1257, 1258, 1259, 1260, 1263, 1264, 1265, 1268, 1269, 1270, 1274, 1281, 1283, 1342], "character_length": 1342, "characterist": [166, 170], "charli": [136, 1348], "chart": [40, 321, 324, 869, 924, 1319, 1324], "cheap": [184, 185, 260, 296, 321, 829, 830, 876, 895, 924, 1005, 1007, 1319], "cheaper": [526, 1139], "check": [39, 66, 100, 136, 137, 150, 159, 160, 161, 162, 174, 197, 222, 226, 321, 353, 374, 377, 380, 393, 397, 488, 497, 501, 519, 658, 663, 670, 689, 810, 854, 860, 924, 956, 976, 979, 982, 994, 999, 1077, 1098, 1099, 1109, 1112, 1119, 1121, 1132, 1236, 1241, 1248, 1267, 1319], "check_column_ord": [159, 160], "check_dtyp": [159, 160, 161, 162, 929, 1077, 1319], "check_exact": [159, 160, 161, 162], "check_nam": [161, 162, 1077, 1319], "check_ord": [161, 162], "check_row_ord": [159, 160], "choos": [45, 47, 49, 212, 246, 321, 450, 850, 924, 1060], "chrono": [37, 46, 94, 321, 447, 450, 695, 697, 698, 702, 924, 1057, 1060, 1273, 1275, 1276, 1280, 1342, 1343], "chunk": [14, 49, 132, 136, 137, 140, 146, 148, 150, 151, 153, 154, 155, 166, 170, 200, 225, 241, 279, 321, 336, 612, 810, 924, 939, 1004, 1085, 1096, 1178, 1196, 1294, 1300, 1319], "chunk_length": 1319, "chunkedarrai": [123, 241, 321], "citi": [681, 682], "clang": 158, "clariti": [254, 321], "class": [1, 17, 31, 32, 33, 34, 50, 52, 53, 54, 55, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 109, 111, 163, 164, 256, 261, 321, 574, 797, 806, 810, 816, 822, 834, 841, 874, 893, 899, 924, 929, 1299, 1319, 1323, 1331, 1347], "classmethod": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 191, 321, 413, 482, 810, 837, 924, 1329, 1347], "claus": [822, 1337, 1346], "clean": [695, 697, 698, 1273, 1275, 1276], "cleaner": 175, "cleanli": [10, 210, 321, 1347], "clear": [50, 90, 185, 321, 830, 924, 1007, 1319], "clearer": 126, "clickhous": 139, "client": [32, 138], "clip": [810, 1319], "clipboard": [36, 135, 321, 822], "clone": [125, 126, 127, 128, 129, 184, 279, 321, 829, 924, 1005, 1319], "close": [40, 138, 212, 253, 268, 321, 411, 497, 556, 608, 621, 624, 626, 628, 630, 632, 635, 637, 639, 651, 751, 752, 754, 755, 797, 798, 810, 850, 873, 883, 924, 1018, 1107, 1193, 1230, 1319], "closedinterv": [212, 253, 321, 497, 621, 624, 626, 628, 630, 632, 635, 637, 639, 751, 752, 754, 755, 797, 798, 810, 850, 873, 924, 1107, 1319], "closest": [123, 227, 321, 855, 924, 1336, 1341], "closur": [624, 626, 635, 637, 639, 810], "cloud": [34, 37, 39, 41, 45, 46, 47, 48, 49, 138, 140, 146, 148, 150, 151, 152, 153, 154, 155, 156, 321, 822, 924], "cloudi": [681, 682], "cloudpickl": 158, "cluster": 155, "cluster_with_column": [57, 58, 831, 832, 842, 869, 880, 924], "co": [667, 810, 1245, 1319, 1340], "coalesc": [226, 227, 290, 321, 495, 669, 671, 695, 810, 854, 855, 891, 924, 1249, 1273, 1335, 1340], "code": [175, 186, 226, 321, 374, 375, 376, 377, 380, 413, 560, 644, 810, 837, 854, 858, 924, 1221, 1319, 1329], "codebas": 175, "coeffici": [188, 321, 651, 810, 1230, 1319], "coerc": [59, 614, 810], "coercion": [46, 47, 48, 49, 57, 58, 614, 810, 831, 832, 842, 869, 880, 924], "col": [1, 12, 37, 40, 46, 51, 52, 53, 54, 127, 129, 150, 164, 166, 203, 211, 212, 220, 222, 226, 227, 228, 231, 242, 245, 246, 253, 254, 259, 267, 278, 283, 287, 289, 295, 300, 321, 325, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 386, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 483, 484, 485, 486, 487, 490, 491, 493, 494, 495, 496, 497, 498, 500, 501, 503, 504, 505, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 582, 583, 584, 586, 588, 590, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 731, 735, 736, 738, 739, 740, 741, 743, 745, 748, 750, 751, 753, 754, 756, 760, 761, 762, 763, 764, 765, 773, 775, 777, 778, 780, 783, 784, 788, 789, 791, 793, 795, 796, 799, 800, 810, 846, 849, 850, 852, 854, 855, 856, 868, 873, 875, 882, 883, 889, 894, 896, 900, 924, 930, 1050, 1054, 1136, 1218, 1220, 1249, 1253, 1273, 1319, 1350], "col0": [166, 1350], "col1": [166, 246, 321, 924, 1350], "col2": [166, 246, 321, 924, 1350], "col3": [246, 321, 1350], "col4": 1350, "col_nam": [245, 321, 560, 800, 810, 868, 924], "cole": 133, "coli": [40, 321, 591, 592, 930, 1350], "collaps": [46, 47, 48, 49, 57, 58, 831, 832, 842, 869, 880, 924], "collapse_join": [46, 47, 48, 49, 57, 58, 831, 832, 842, 869, 880, 924], "collect": [54, 57, 58, 150, 151, 152, 156, 166, 167, 170, 194, 195, 229, 246, 268, 273, 286, 287, 321, 470, 501, 560, 740, 758, 762, 788, 789, 792, 810, 825, 826, 828, 829, 832, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 865, 866, 867, 868, 870, 871, 872, 873, 875, 877, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 896, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 921, 923, 924, 930, 1112, 1319, 1329, 1330, 1331, 1334, 1335, 1347, 1348, 1350], "collect_al": [54, 58, 831, 832, 924], "collect_all_async": [832, 924], "collect_async": [58, 924], "collect_schema": [54, 229, 321, 834, 841, 868, 874, 893, 924], "collis": 59, "colnam": [24, 40, 150, 321], "color": [50, 90, 91, 307, 321, 324, 374, 375, 376, 377, 380, 661, 723, 810, 907, 976, 977, 978, 979, 982, 1239, 1308, 1319, 1342], "column": [10, 16, 17, 18, 21, 22, 24, 39, 40, 45, 49, 50, 51, 52, 59, 66, 82, 91, 95, 99, 123, 125, 126, 127, 128, 129, 130, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 159, 160, 161, 162, 166, 180, 182, 183, 186, 188, 189, 192, 193, 194, 195, 196, 199, 203, 204, 207, 208, 210, 211, 212, 216, 217, 222, 223, 224, 226, 227, 228, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 253, 254, 255, 256, 258, 259, 260, 262, 267, 269, 270, 271, 274, 276, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 300, 306, 321, 324, 325, 332, 333, 335, 346, 355, 364, 366, 369, 378, 391, 400, 404, 405, 411, 421, 422, 424, 425, 426, 429, 430, 431, 432, 433, 434, 435, 436, 439, 441, 442, 443, 446, 447, 448, 450, 459, 460, 462, 470, 472, 476, 478, 491, 496, 497, 512, 518, 524, 526, 546, 550, 551, 560, 566, 567, 569, 571, 573, 584, 586, 587, 588, 589, 590, 591, 592, 601, 608, 612, 614, 615, 616, 617, 619, 620, 621, 624, 626, 628, 630, 632, 635, 637, 639, 646, 647, 653, 654, 657, 665, 670, 672, 673, 683, 687, 688, 695, 696, 697, 698, 699, 700, 702, 707, 710, 718, 723, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 806, 810, 826, 828, 835, 838, 839, 840, 841, 843, 846, 849, 850, 854, 855, 856, 860, 861, 862, 863, 864, 866, 867, 870, 871, 873, 874, 875, 876, 878, 882, 884, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 906, 907, 924, 929, 930, 937, 938, 958, 967, 969, 972, 980, 996, 1000, 1006, 1011, 1012, 1018, 1027, 1030, 1031, 1032, 1035, 1036, 1037, 1041, 1042, 1043, 1045, 1046, 1049, 1051, 1052, 1056, 1057, 1058, 1060, 1069, 1070, 1072, 1084, 1102, 1106, 1131, 1137, 1139, 1159, 1163, 1193, 1200, 1201, 1204, 1224, 1235, 1243, 1248, 1251, 1265, 1266, 1273, 1275, 1276, 1277, 1278, 1280, 1286, 1289, 1295, 1296, 1308, 1319, 1335, 1337, 1339, 1341, 1342, 1344, 1345, 1348, 1349, 1350], "column_0": [1, 231, 285, 321], "column_1": [231, 285, 321, 1344], "column_2": [285, 321, 1344], "column_abc": 15, "column_format": [40, 321], "column_nam": [250, 285, 321, 871, 924], "column_tot": [40, 321], "column_width": [40, 321], "column_x": [136, 137, 141, 147, 150], "column_xyz": 15, "columnar": [127, 129, 224, 255, 321], "columnformatdict": [40, 321], "columnnameorselector": [183, 192, 194, 195, 237, 244, 246, 256, 276, 286, 287, 288, 289, 321, 828, 838, 839, 840, 864, 888, 889, 890, 924], "columnnotfounderror": [207, 208, 321], "columntotalsdefinit": [40, 321], "columnwidthsdefinit": [40, 321], "colx": [40, 321, 591, 592, 930, 1334, 1350], "colz": [930, 1350], "com": [32, 40, 139, 321, 466, 468, 469, 666, 667, 668, 810, 1079, 1081, 1082, 1244, 1245, 1246, 1319], "combin": [45, 49, 57, 58, 59, 203, 212, 213, 227, 246, 253, 291, 321, 334, 347, 458, 467, 480, 575, 600, 616, 621, 690, 691, 692, 751, 752, 754, 755, 797, 798, 800, 810, 831, 832, 842, 850, 855, 869, 873, 880, 924, 1055, 1068, 1080, 1200, 1268, 1269, 1270, 1319, 1335, 1348], "come": [118, 139, 212, 286, 288, 321, 418, 437, 438, 509, 551, 737, 810, 850, 888, 890, 924, 1024, 1047, 1048, 1122, 1319], "comm_subexpr_elim": [57, 58, 831, 832, 842, 869, 880, 924], "comm_subplan_elim": [57, 58, 831, 832, 842, 869, 880, 924], "comma": [36, 37, 136, 137, 150, 321], "comment": [136, 137, 150], "comment_prefix": [136, 137, 150], "common": [51, 57, 58, 59, 98, 136, 137, 150, 290, 321, 585, 816, 831, 832, 842, 869, 880, 891, 924, 1323], "compact": 1345, "compani": 139, "compar": [155, 159, 160, 161, 162, 197, 203, 321, 464, 465, 485, 487, 497, 511, 558, 595, 596, 810, 846, 924, 1000, 1076, 1077, 1184, 1319], "comparison": [156, 203, 321, 846, 924], "compat": [20, 40, 41, 42, 45, 49, 93, 273, 321, 658, 660, 666, 667, 668, 670, 681, 682, 924, 930, 1060, 1236, 1238, 1244, 1245, 1246, 1248, 1259, 1260, 1294, 1319, 1329, 1342, 1343, 1347], "compat_level": [41, 42, 273, 321, 1294, 1319], "compatibleframetyp": [1330, 1332, 1347], "compatlevel": [41, 42, 273, 321, 1294, 1319], "competit": [611, 810, 1195, 1319], "compil": [56, 351, 352, 516, 517, 954, 955, 1129, 1130], "complement": 930, "complet": [136, 138, 150, 1348], "complex": [167, 390, 391, 410, 717, 718, 810, 992, 1017, 1304, 1319], "compliant": [40, 321, 450, 1060], "compon": [422, 446, 450, 695, 698, 756, 1028, 1056, 1060, 1273, 1276], "compos": 1348, "composit": [82, 1350], "compound": [130, 256, 321, 930], "comprehens": 164, "compress": [35, 41, 42, 45, 47, 49, 321, 619, 810, 924, 1203, 1319], "compression_level": [45, 49, 321, 924], "comput": [57, 59, 96, 198, 211, 227, 246, 280, 286, 300, 313, 321, 329, 338, 339, 340, 341, 342, 343, 360, 361, 362, 367, 368, 372, 398, 401, 402, 403, 406, 407, 408, 409, 415, 463, 466, 467, 468, 469, 471, 509, 533, 534, 535, 536, 540, 541, 542, 543, 547, 553, 554, 555, 556, 581, 601, 602, 607, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 648, 649, 650, 651, 655, 714, 715, 723, 728, 730, 733, 734, 735, 742, 744, 757, 776, 786, 787, 800, 810, 831, 849, 852, 854, 855, 888, 896, 900, 913, 924, 935, 941, 942, 943, 944, 945, 946, 963, 964, 965, 970, 971, 975, 1002, 1008, 1009, 1010, 1013, 1014, 1015, 1016, 1021, 1074, 1078, 1079, 1080, 1081, 1082, 1083, 1122, 1146, 1147, 1148, 1149, 1153, 1154, 1155, 1156, 1160, 1166, 1167, 1168, 1169, 1177, 1188, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1227, 1228, 1229, 1230, 1233, 1292, 1293, 1301, 1308, 1319, 1341, 1344], "computeerror": [571, 700, 1278], "concat": [50, 90, 91, 99, 137, 227, 321, 855, 896, 924, 1004, 1096, 1178, 1196, 1319, 1340], "concat_list": [523, 757], "concat_w": [268, 321, 789, 883, 924, 1340, 1347], "concaten": [50, 59, 90, 91, 205, 245, 321, 605, 657, 673, 739, 740, 741, 810, 868, 924, 1004, 1178, 1235, 1251, 1319, 1342], "concatmethod": 59, "conclus": [127, 129, 321, 924], "concret": [166, 170], "condit": [40, 195, 203, 228, 254, 321, 393, 397, 476, 497, 663, 689, 736, 760, 800, 810, 846, 856, 924, 1107, 1319, 1335, 1340, 1346], "conditional_format": [40, 321], "conditionalformatdict": [40, 321], "config": [0, 51, 190, 259, 278, 295, 321, 659, 669, 671, 683, 751, 752, 754, 755, 756, 822, 831, 836, 875, 894, 924, 1237, 1249, 1261], "configur": [5, 32, 39, 140, 151, 152, 175, 321, 324, 823, 831, 899, 924, 1319, 1324], "configure_axisx": [321, 324, 1319, 1324], "configure_point": [321, 324, 1319, 1324], "conflat": [497, 810], "conform": 1350, "confus": [98, 333, 504, 505, 683, 810], "conjunct": [40, 90, 138, 141, 147, 164, 321, 766, 769, 924], "conn": 138, "connect": [37, 38, 41, 45, 46, 47, 48, 49, 69, 136, 138, 139, 142, 144, 146, 148, 150, 153, 154, 155, 156, 321, 823, 924], "connectionorcursor": [38, 138, 321], "connector": 139, "connectorx": [138, 139, 158], "consecut": [202, 321, 373, 475, 481, 657, 673, 681, 810, 845, 924, 1088, 1235, 1251, 1260, 1319], "consid": [31, 32, 33, 34, 37, 41, 45, 46, 47, 48, 49, 57, 58, 67, 69, 73, 90, 91, 133, 136, 137, 138, 146, 148, 150, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 182, 194, 195, 197, 223, 228, 231, 237, 255, 268, 278, 283, 284, 286, 288, 289, 290, 321, 324, 325, 391, 400, 410, 411, 445, 480, 491, 559, 560, 567, 583, 584, 587, 589, 591, 592, 608, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 718, 739, 746, 760, 786, 787, 806, 810, 826, 831, 832, 839, 840, 842, 856, 864, 883, 887, 888, 890, 891, 907, 924, 930, 996, 1001, 1006, 1017, 1018, 1055, 1077, 1102, 1172, 1193, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1218, 1220, 1298, 1303, 1319, 1324, 1329], "consider": 133, "consist": [211, 244, 279, 321, 695, 751, 752, 849, 924, 930, 939, 1085, 1273, 1300, 1319], "consola": [40, 321], "const": 10, "constant": [198, 253, 321, 419, 467, 473, 810, 873, 924, 1025, 1078, 1080, 1086, 1319], "constrain": [51, 150, 194, 195, 321, 839, 840, 924, 930], "constraint": [203, 321, 476, 584, 585, 587, 589, 591, 592, 800, 810, 846, 924, 930], "construct": [50, 90, 91, 98, 123, 125, 126, 127, 128, 129, 130, 133, 138, 321, 482, 782, 785, 801, 806, 810, 837, 924, 996, 1319, 1334], "construct_categor": 50, "constructor": [133, 141, 170], "contain": [5, 37, 38, 39, 40, 46, 51, 56, 94, 125, 128, 130, 138, 139, 140, 148, 151, 152, 155, 165, 166, 168, 170, 182, 187, 194, 195, 196, 212, 220, 225, 242, 278, 279, 283, 284, 290, 302, 321, 333, 335, 358, 377, 380, 393, 397, 413, 488, 501, 530, 560, 657, 659, 663, 666, 668, 670, 673, 675, 688, 689, 705, 727, 728, 729, 730, 741, 772, 810, 826, 834, 837, 839, 840, 841, 850, 869, 887, 891, 902, 924, 928, 930, 937, 938, 961, 994, 999, 1098, 1099, 1143, 1178, 1235, 1237, 1241, 1244, 1246, 1248, 1251, 1253, 1266, 1267, 1283, 1294, 1300, 1319, 1337], "contains_with_expr": 374, "contains_with_lit": 374, "content": [13, 647, 810, 1226, 1319], "context": [50, 90, 91, 172, 242, 268, 321, 331, 476, 523, 559, 560, 571, 653, 654, 723, 743, 759, 762, 768, 769, 772, 781, 785, 788, 809, 810, 821, 822, 883, 896, 924, 1136, 1308, 1319, 1334, 1347, 1349], "contigu": [59, 123, 128, 136, 137, 140, 142, 144, 146, 148, 150, 151, 153, 154, 155, 249, 279, 321], "continu": [136, 411, 608, 651, 810, 1018, 1193, 1230, 1319, 1336], "contrast": 756, "control": [10, 11, 40, 58, 59, 141, 164, 166, 267, 268, 278, 321, 616, 654, 789, 810, 831, 832, 842, 882, 883, 899, 921, 924, 1200, 1298, 1319, 1331, 1334, 1347], "conveni": [200, 283, 321, 916, 939, 1085, 1319, 1329], "convers": [124, 179, 224, 225, 255, 256, 275, 279, 280, 321, 423, 695, 697, 698, 702, 822, 1029, 1273, 1275, 1276, 1280, 1300, 1301, 1319, 1345, 1347], "convert": [39, 94, 124, 128, 140, 141, 147, 151, 179, 256, 274, 275, 276, 277, 278, 279, 280, 282, 283, 321, 369, 370, 412, 423, 447, 450, 550, 551, 559, 585, 610, 668, 695, 697, 698, 699, 700, 702, 707, 810, 924, 928, 972, 973, 1000, 1029, 1057, 1060, 1163, 1164, 1246, 1273, 1275, 1276, 1277, 1278, 1280, 1286, 1289, 1297, 1298, 1299, 1300, 1301, 1303, 1319, 1342, 1344, 1345, 1347], "convert_time_zon": [444, 1054], "coo": [250, 321, 871, 924], "coord": 710, "coordin": [40, 321], "copi": [36, 123, 124, 135, 177, 179, 184, 185, 225, 273, 279, 280, 295, 321, 473, 810, 829, 830, 894, 924, 932, 1005, 1007, 1086, 1294, 1299, 1300, 1301, 1319, 1347], "corasick": [659, 669, 671, 683, 1237, 1247, 1249, 1261], "core": [1, 228, 321, 856, 924, 1347, 1350], "cores_right": [228, 321, 856, 924], "corner": [20, 40, 130, 321], "corr": 321, "corrcoef": [188, 321], "correct": [141, 147, 468, 469, 509, 551, 633, 651, 810, 860, 924, 928, 1081, 1082, 1122, 1211, 1230, 1319], "correctli": [40, 321, 559, 810], "correl": [188, 321, 742, 786], "correlationmethod": 742, "correspond": [212, 227, 253, 279, 291, 321, 391, 431, 440, 445, 458, 560, 611, 621, 624, 626, 628, 630, 632, 635, 637, 639, 718, 751, 752, 754, 755, 797, 798, 810, 831, 850, 855, 873, 924, 1037, 1050, 1055, 1068, 1195, 1319, 1336], "cosd": 1340, "cosh": [810, 1319], "cosin": [338, 339, 401, 402, 559, 810, 941, 942, 1008, 1009, 1319, 1344], "cost": [228, 256, 321, 681, 856, 924, 1260], "cost_usd": [681, 1260], "cot": [810, 1319, 1340], "cotang": [403, 810, 1010, 1319, 1344], "cotd": 1340, "could": [39, 88, 96, 321, 648, 746, 756, 760, 810, 828, 836, 924, 1227, 1319], "count": [40, 156, 181, 190, 212, 242, 243, 253, 285, 291, 297, 312, 321, 337, 354, 363, 405, 418, 467, 491, 512, 520, 532, 537, 560, 583, 599, 621, 624, 626, 628, 630, 632, 635, 637, 639, 660, 721, 723, 731, 737, 745, 769, 780, 810, 825, 836, 850, 867, 873, 897, 912, 924, 930, 940, 957, 966, 1012, 1019, 1024, 1080, 1102, 1125, 1133, 1145, 1150, 1179, 1187, 1238, 1306, 1308, 1319, 1324, 1328, 1340], "count_digit": 660, "count_num": [40, 321], "counterpart": 133, "countri": [227, 321, 419, 855, 924, 1025], "country_holidai": [418, 737, 1024], "covari": [744, 787, 810, 928], "cover": 10, "cow": [679, 680, 1257, 1258], "cpu": [136, 137, 158, 278, 321, 831, 899, 924, 1298, 1319], "crab": [658, 670, 1236, 1248], "crate": [37, 46, 94, 321, 658, 660, 666, 667, 668, 670, 681, 682, 695, 697, 698, 702, 924, 930, 1236, 1238, 1244, 1245, 1246, 1248, 1259, 1260, 1273, 1275, 1276, 1280], "creat": [38, 40, 50, 91, 123, 127, 129, 136, 137, 138, 139, 142, 144, 148, 151, 152, 164, 165, 166, 167, 168, 169, 170, 171, 175, 184, 185, 212, 243, 246, 253, 278, 279, 291, 295, 298, 321, 324, 325, 422, 445, 458, 467, 551, 559, 612, 621, 624, 626, 628, 630, 632, 635, 637, 639, 740, 750, 751, 752, 753, 754, 755, 756, 796, 797, 798, 806, 810, 829, 830, 836, 842, 850, 873, 894, 898, 924, 929, 1005, 1007, 1018, 1028, 1055, 1068, 1080, 1185, 1193, 1196, 1298, 1300, 1319, 1324, 1346, 1347, 1350], "create_async_engin": 138, "create_engin": [38, 321], "creation": 137, "credenti": [31, 32, 33, 34, 37, 41, 45, 46, 47, 48, 49, 146, 148, 150, 153, 154, 155, 321, 822, 924], "credential_provid": [37, 41, 45, 46, 47, 48, 49, 146, 148, 150, 153, 154, 155, 321, 924], "credentialproviderfunct": [37, 41, 45, 46, 47, 48, 49, 146, 148, 150, 153, 154, 155, 321, 924], "cross": [226, 321, 854, 924, 1335], "crustacean": [670, 1248], "cst": [445, 458, 1055, 1068], "csv": [36, 37, 46, 47, 48, 49, 135, 136, 137, 141, 150, 321, 822, 924], "csvencod": [136, 137, 150], "csvquotestyl": [37, 46, 321, 924], "ctx": [1328, 1330, 1331, 1332, 1333, 1334, 1347], "cube": [1, 55, 398, 606, 810, 1002, 1319, 1341], "cuda": 899, "cum_count": [810, 1319], "cum_count_revers": [405, 810], "cum_max": [810, 1319], "cum_max_all_fil": [406, 810], "cum_max_revers": [406, 810], "cum_min": [810, 1319], "cum_min_revers": [407, 810], "cum_prod": [330, 810, 1319], "cum_prod_revers": [408, 810], "cum_reduc": 746, "cum_sum": [494, 601, 711, 749, 810, 852, 924, 1121, 1319], "cum_sum_revers": [409, 810], "cumsum_horizont": 748, "cumul": [405, 406, 407, 408, 409, 745, 746, 747, 748, 749, 810, 1012, 1013, 1014, 1015, 1016, 1319], "cumulative_ev": [810, 1319], "cumulative_sal": [601, 810], "current": [2, 3, 5, 6, 30, 37, 38, 41, 45, 46, 47, 48, 49, 130, 138, 139, 146, 148, 150, 153, 154, 155, 163, 164, 166, 167, 168, 169, 170, 171, 184, 185, 192, 226, 227, 250, 268, 278, 283, 321, 324, 325, 427, 551, 602, 810, 829, 830, 838, 854, 855, 871, 883, 899, 924, 930, 1005, 1007, 1025, 1033, 1188, 1298, 1303, 1319, 1324, 1331, 1347], "cursor": [38, 138, 321], "custom": [1, 27, 39, 40, 52, 53, 54, 55, 97, 169, 171, 190, 231, 246, 307, 321, 370, 418, 447, 450, 551, 559, 560, 622, 723, 737, 771, 772, 810, 836, 860, 907, 924, 973, 1024, 1057, 1060, 1164, 1172, 1205, 1308, 1319, 1350], "customis": [40, 321], "cut": [608, 810, 1193, 1319], "cxx": 1342, "cypher": 138, "d": [28, 35, 37, 39, 40, 41, 42, 45, 126, 156, 180, 203, 210, 212, 213, 214, 217, 226, 230, 272, 273, 283, 289, 293, 303, 305, 308, 309, 310, 311, 312, 313, 314, 321, 330, 332, 405, 428, 447, 450, 497, 566, 605, 646, 660, 667, 681, 682, 687, 695, 697, 698, 738, 739, 756, 762, 789, 810, 846, 850, 854, 883, 903, 905, 908, 909, 910, 911, 912, 913, 914, 924, 930, 1000, 1012, 1034, 1057, 1060, 1107, 1131, 1238, 1245, 1259, 1260, 1265, 1273, 1275, 1276, 1287, 1319, 1335, 1337, 1339, 1342, 1343], "d1": [40, 321, 422], "d2": 422, "d3": 422, "d789": [40, 321], "d_4": [687, 1265], "dai": [65, 66, 83, 212, 225, 227, 253, 291, 321, 324, 418, 437, 438, 440, 441, 443, 445, 447, 450, 451, 458, 460, 467, 621, 624, 626, 628, 630, 632, 635, 637, 639, 737, 750, 751, 752, 753, 754, 755, 756, 797, 798, 810, 850, 855, 873, 924, 930, 1024, 1047, 1048, 1050, 1051, 1053, 1055, 1057, 1060, 1061, 1068, 1070, 1080, 1319, 1343], "dark": 1328, "data": [0, 1, 10, 18, 19, 21, 24, 28, 35, 37, 38, 39, 40, 41, 42, 45, 46, 47, 48, 49, 50, 51, 52, 54, 57, 58, 59, 64, 65, 66, 68, 79, 80, 82, 83, 91, 94, 98, 100, 103, 117, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 177, 179, 185, 186, 196, 199, 200, 210, 211, 212, 224, 225, 226, 229, 231, 244, 245, 249, 254, 255, 256, 258, 262, 265, 273, 278, 279, 280, 283, 285, 295, 299, 319, 321, 325, 333, 334, 335, 338, 339, 340, 341, 342, 343, 346, 349, 350, 351, 352, 353, 355, 358, 360, 361, 362, 367, 368, 369, 371, 372, 374, 375, 376, 377, 378, 379, 380, 392, 394, 395, 396, 400, 401, 402, 403, 404, 411, 412, 413, 418, 419, 420, 421, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 467, 472, 483, 485, 486, 487, 491, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 511, 512, 516, 517, 519, 524, 530, 532, 539, 550, 552, 558, 560, 595, 596, 600, 601, 608, 610, 611, 614, 615, 616, 617, 619, 620, 624, 626, 628, 630, 632, 635, 637, 639, 640, 642, 644, 649, 650, 651, 657, 660, 661, 662, 665, 666, 667, 668, 672, 673, 674, 675, 676, 677, 685, 686, 687, 688, 695, 696, 697, 698, 700, 702, 705, 714, 715, 716, 719, 720, 723, 726, 732, 740, 743, 750, 751, 752, 753, 754, 755, 756, 766, 767, 769, 770, 771, 772, 782, 785, 796, 797, 798, 801, 806, 810, 822, 829, 830, 831, 832, 837, 841, 843, 849, 850, 874, 878, 894, 924, 929, 932, 937, 938, 950, 952, 953, 954, 955, 956, 958, 960, 961, 972, 974, 976, 977, 978, 980, 981, 993, 995, 997, 998, 1005, 1006, 1007, 1018, 1019, 1024, 1025, 1026, 1027, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1058, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1077, 1080, 1084, 1085, 1102, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1120, 1127, 1128, 1129, 1130, 1132, 1137, 1143, 1145, 1152, 1163, 1165, 1172, 1186, 1193, 1195, 1199, 1200, 1201, 1203, 1204, 1215, 1217, 1225, 1230, 1235, 1236, 1238, 1239, 1240, 1242, 1243, 1244, 1245, 1246, 1250, 1251, 1252, 1253, 1254, 1255, 1263, 1264, 1265, 1266, 1273, 1274, 1275, 1276, 1278, 1280, 1283, 1294, 1299, 1300, 1301, 1302, 1305, 1318, 1319, 1328, 1335, 1342, 1347, 1349], "data_bar": [40, 321], "data_bar_2010": [40, 321], "data_label": [40, 321], "data_page_s": [45, 49, 321, 924], "databas": [38, 122, 138, 139, 321, 822], "datafram": [0, 1, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 46, 47, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 78, 95, 98, 99, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 150, 153, 154, 155, 159, 160, 163, 164, 175, 319, 320, 324, 325, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 386, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 806, 810, 822, 831, 832, 834, 836, 838, 841, 843, 847, 850, 854, 855, 856, 857, 858, 860, 864, 865, 869, 872, 874, 881, 883, 888, 889, 890, 891, 893, 896, 900, 901, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 918, 924, 929, 930, 1018, 1019, 1054, 1080, 1102, 1172, 1193, 1249, 1253, 1265, 1266, 1289, 1295, 1296, 1308, 1319, 1328, 1329, 1330, 1331, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1341, 1342, 1343, 1344, 1345, 1347, 1350], "dataframeplot": [321, 324], "dataload": [283, 321], "datapoint": [212, 321, 850, 924], "dataset": [14, 45, 69, 136, 137, 140, 141, 147, 150, 151, 156, 226, 283, 321, 509, 810, 822, 854, 860, 924, 1122, 1319, 1348], "datat": [40, 321], "datatyp": [37, 46, 123, 125, 126, 127, 129, 131, 143, 145, 146, 148, 149, 154, 155, 167, 168, 170, 196, 205, 321, 392, 470, 646, 716, 739, 758, 770, 806, 810, 822, 841, 924, 929, 930, 993, 1019, 1073, 1172, 1224, 1302, 1319, 1345], "date": [16, 40, 51, 66, 136, 137, 139, 141, 147, 148, 150, 153, 155, 156, 183, 190, 210, 212, 225, 227, 253, 268, 321, 324, 353, 418, 420, 421, 422, 423, 426, 428, 430, 431, 433, 436, 437, 438, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 467, 519, 601, 621, 624, 626, 628, 630, 632, 635, 637, 639, 695, 697, 716, 737, 751, 752, 754, 755, 762, 770, 796, 810, 828, 836, 850, 855, 873, 924, 930, 956, 1024, 1026, 1027, 1028, 1029, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1072, 1080, 1132, 1181, 1182, 1273, 1275, 1302, 1319, 1340, 1343, 1345], "date32": [225, 321], "date_format": [37, 46, 321, 924], "date_min": 440, "date_minus_1y_2mon": 1050, "date_part": 1340, "date_plus_1i": [440, 1050], "date_rang": [227, 291, 321, 426, 428, 441, 449, 460, 754, 755, 855, 924, 1032, 1046, 1051, 1052, 1069, 1070], "date_right": [227, 321, 855, 924], "datetim": [16, 37, 40, 46, 51, 94, 130, 140, 148, 151, 153, 155, 166, 167, 168, 170, 183, 190, 210, 212, 225, 227, 253, 268, 291, 321, 324, 353, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 467, 519, 568, 601, 621, 624, 626, 628, 630, 632, 635, 637, 639, 695, 698, 716, 737, 750, 751, 752, 754, 755, 756, 762, 770, 797, 798, 810, 828, 836, 850, 855, 873, 924, 929, 930, 956, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1080, 1132, 1181, 1182, 1273, 1276, 1300, 1302, 1319, 1342, 1343], "datetime_format": [37, 46, 321, 924], "datetime_rang": [212, 321, 420, 423, 437, 438, 440, 444, 445, 451, 452, 453, 454, 455, 456, 457, 458, 461, 624, 626, 628, 630, 632, 635, 637, 639, 751, 752, 810, 850, 924, 1025, 1026, 1029, 1033, 1034, 1035, 1040, 1041, 1043, 1045, 1047, 1048, 1049, 1050, 1054, 1055, 1059, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068], "datetime_str": 447, "datetimeindex": 128, "david": 1348, "day_nam": [447, 450], "day_of_month": [426, 441, 460], "day_of_year": [426, 441, 460], "daylight": [212, 227, 253, 291, 321, 419, 427, 440, 445, 458, 621, 624, 626, 628, 630, 632, 635, 637, 639, 751, 752, 754, 755, 756, 797, 798, 810, 850, 855, 873, 924, 1033, 1050, 1055, 1068], "dayofweek": 1343, "dayofyear": 1343, "days_diff": 451, "db": [38, 138, 139, 321], "dbapi2": 138, "dbc": [660, 1238], "dbreadengin": 139, "dbwriteengin": [38, 321], "dbwritemod": [38, 321], "dd": [40, 321, 1342], "ddd": [1, 40, 321, 706, 708, 709], "dddd": 1342, "ddof": [269, 292, 321, 367, 372, 547, 553, 634, 635, 638, 639, 656, 724, 742, 744, 786, 787, 791, 799, 810, 884, 892, 924, 970, 975, 1160, 1166, 1212, 1214, 1234, 1309, 1319], "ddww": 1342, "de": 1342, "deal": [45, 49, 224, 321, 333, 335, 443, 444, 611, 695, 698, 727, 728, 729, 730, 753, 810, 924, 937, 938, 1053, 1054, 1195, 1273, 1276, 1319], "debug": [29, 860, 924, 1350], "decad": [1328, 1343], "decai": [466, 467, 468, 469, 810, 1079, 1080, 1081, 1082, 1319], "decemb": [450, 1060], "decim": [9, 10, 11, 27, 28, 37, 40, 46, 136, 137, 150, 321, 325, 640, 699, 810, 924, 930, 1215, 1277, 1319, 1341], "decimal_comma": [136, 137, 150], "decimal_separ": [9, 27], "declar": [123, 125, 126, 127, 129, 138, 145, 146, 154, 278, 283, 321, 924, 930, 1328], "decod": [136, 137, 674], "decompos": [287, 321, 889, 924], "decompress": [45, 47, 49, 321, 924], "decor": [50, 52, 53, 54, 55, 166, 170, 231, 321, 560, 810, 821, 822, 1172, 1319], "dedic": [1, 124, 224, 255, 321, 930, 1347], "deem": [190, 321, 836, 924], "deepcopi": [184, 321, 829, 924, 1005, 1319], "def": [1, 50, 52, 53, 54, 55, 138, 164, 166, 170, 175, 245, 285, 321, 330, 605, 664, 667, 692, 726, 771, 810, 832, 868, 924, 930, 1242, 1245, 1350], "default": [4, 5, 9, 10, 14, 27, 30, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 57, 58, 59, 63, 66, 67, 68, 123, 125, 126, 127, 128, 129, 130, 136, 137, 139, 141, 142, 144, 145, 146, 147, 148, 150, 153, 154, 155, 159, 161, 163, 164, 165, 166, 167, 168, 169, 170, 175, 190, 191, 194, 195, 198, 207, 211, 212, 213, 224, 226, 227, 235, 237, 244, 246, 253, 254, 255, 256, 257, 261, 264, 268, 269, 271, 276, 278, 279, 283, 286, 288, 289, 290, 292, 297, 306, 321, 332, 333, 335, 358, 365, 370, 378, 411, 413, 418, 443, 444, 450, 463, 465, 466, 468, 469, 489, 526, 530, 539, 544, 545, 547, 551, 553, 554, 559, 567, 568, 571, 574, 593, 594, 596, 601, 602, 608, 611, 615, 616, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 642, 645, 647, 656, 657, 666, 673, 685, 690, 691, 692, 695, 697, 698, 700, 702, 723, 724, 727, 729, 732, 736, 737, 741, 742, 744, 751, 752, 753, 754, 755, 756, 759, 762, 766, 767, 768, 770, 776, 782, 785, 788, 791, 792, 794, 797, 798, 799, 801, 810, 831, 832, 836, 837, 839, 840, 842, 849, 850, 854, 855, 864, 873, 877, 879, 883, 884, 888, 890, 891, 892, 897, 899, 906, 924, 930, 937, 938, 961, 968, 973, 980, 1006, 1018, 1019, 1024, 1053, 1054, 1060, 1074, 1078, 1079, 1081, 1082, 1100, 1139, 1143, 1152, 1157, 1158, 1164, 1181, 1182, 1188, 1193, 1195, 1199, 1200, 1205, 1206, 1207, 1208, 1209, 1210, 1212, 1213, 1214, 1217, 1223, 1226, 1234, 1235, 1236, 1244, 1248, 1251, 1263, 1268, 1269, 1270, 1273, 1275, 1276, 1278, 1280, 1298, 1300, 1308, 1309, 1319, 1341, 1350], "default_match": [658, 670], "default_scop": 34, "defaultazurecredenti": 33, "defaultdict": [256, 321], "defer": [175, 321, 324, 325, 1319, 1324], "defin": [37, 40, 46, 66, 69, 138, 145, 163, 164, 166, 183, 194, 195, 199, 212, 231, 242, 245, 253, 290, 307, 321, 396, 497, 526, 560, 605, 608, 620, 621, 624, 626, 628, 630, 632, 635, 637, 639, 672, 677, 685, 696, 703, 751, 752, 754, 755, 772, 792, 797, 798, 810, 828, 839, 840, 843, 850, 868, 873, 891, 907, 924, 929, 930, 998, 1107, 1139, 1172, 1193, 1204, 1250, 1255, 1263, 1274, 1281, 1319], "definit": [40, 70, 321, 509, 810, 929, 930, 1122, 1319], "deflat": [35, 321], "deg": 1344, "degre": [269, 292, 321, 547, 553, 610, 634, 635, 638, 639, 656, 724, 734, 744, 786, 787, 791, 799, 810, 884, 892, 924, 1212, 1214, 1234, 1309, 1319, 1340], "delet": [69, 1335, 1349], "delimit": [44, 46, 146, 154, 246, 276, 321, 657, 673, 924, 1235, 1251, 1295, 1319], "delta": [39, 140, 151, 269, 292, 321, 547, 553, 634, 635, 638, 639, 656, 724, 744, 786, 787, 791, 799, 810, 822, 884, 892, 924, 1212, 1214, 1234, 1309, 1319], "delta_merge_opt": [39, 321], "delta_table_opt": [140, 151], "delta_write_opt": [39, 321], "deltalak": [39, 140, 151, 158, 321], "deltat": [39, 140, 151, 321], "demo": [40, 321], "demonstr": [136, 480, 810, 930], "dens": [20, 210, 321, 611, 810, 1195, 1319], "densiti": [1319, 1324], "depend": [45, 50, 56, 91, 138, 141, 147, 158, 180, 321, 351, 352, 516, 517, 560, 571, 608, 611, 756, 759, 762, 768, 810, 934, 954, 955, 1129, 1130, 1193, 1195, 1319, 1350], "deploi": [166, 170], "deprec": [39, 136, 137, 163, 164, 165, 166, 170, 173, 181, 237, 279, 297, 302, 321, 425, 461, 482, 578, 615, 657, 665, 725, 734, 742, 743, 810, 825, 842, 864, 877, 890, 896, 897, 902, 924, 1031, 1039, 1040, 1071, 1099, 1199, 1235, 1243, 1300, 1319], "depth": 133, "desc": [930, 1328, 1331, 1335, 1337], "descend": [51, 262, 267, 321, 346, 366, 546, 611, 644, 653, 654, 723, 735, 810, 878, 882, 924, 949, 969, 1119, 1159, 1195, 1221, 1232, 1308, 1319], "describ": [166, 210, 321, 678, 924, 1256, 1319], "descript": [212, 321, 850, 924, 1335, 1336, 1337, 1338, 1339, 1341, 1342, 1343, 1345, 1348, 1349], "deseri": [133, 261, 321, 482, 574, 810, 877, 924], "deserializ": [191, 261, 321, 413, 574, 810, 837, 877, 924], "design": [278, 283, 321], "desir": [166, 226, 321, 370, 461, 551, 854, 924, 973, 1071, 1164], "destin": 139, "detail": [56, 124, 138, 139, 159, 161, 179, 212, 321, 450, 716, 810, 850, 899, 924, 1060, 1302, 1319, 1350], "determin": [14, 37, 40, 46, 51, 59, 88, 133, 136, 137, 138, 141, 147, 148, 150, 155, 157, 182, 186, 205, 212, 224, 225, 231, 253, 284, 285, 291, 321, 391, 430, 443, 444, 491, 551, 571, 608, 614, 616, 651, 659, 672, 695, 696, 698, 699, 718, 753, 782, 785, 801, 810, 826, 833, 834, 841, 850, 873, 887, 893, 924, 1036, 1053, 1054, 1102, 1164, 1193, 1199, 1200, 1230, 1237, 1273, 1276, 1277, 1319], "dev": [178, 933, 1212, 1319], "develop": [139, 166, 170], "deviat": [269, 321, 468, 634, 635, 656, 791, 810, 884, 924, 1081, 1234, 1319, 1336], "devic": [278, 321, 831, 899, 924, 1298, 1319], "devicememoryresourc": 899, "df": [1, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 52, 53, 78, 95, 99, 124, 125, 126, 127, 128, 129, 130, 137, 138, 139, 150, 163, 164, 166, 175, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 201, 202, 203, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 263, 264, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 321, 324, 325, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 378, 379, 381, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 627, 629, 631, 633, 634, 636, 638, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 699, 700, 701, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 788, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 806, 810, 850, 873, 889, 891, 904, 907, 915, 924, 930, 1054, 1080, 1249, 1253, 1265, 1266, 1296, 1319, 1324, 1328, 1329, 1330, 1335, 1336, 1337, 1338, 1339, 1341, 1342, 1343, 1344, 1345, 1347, 1350], "df0": [238, 321, 865, 924, 1334], "df1": [51, 59, 159, 160, 197, 200, 238, 268, 293, 321, 865, 924, 1331, 1333, 1334, 1335, 1347], "df2": [51, 59, 159, 160, 197, 200, 293, 321, 1331, 1333, 1334, 1335, 1347], "df3": [51, 321], "df4": 321, "df5": 321, "df6": 321, "df_a": 1347, "df_a1": 59, "df_a2": 59, "df_a3": 59, "df_agg_nuniqu": [242, 321], "df_b": 1347, "df_current_batch": 137, "df_d1": 59, "df_d2": 59, "df_from_str_repr": [277, 321], "df_h1": 59, "df_h2": 59, "df_new_grid": [495, 810], "df_nuniqu": [242, 321], "df_original_grid": [495, 810], "df_panda": 1329, "df_pd": 124, "df_tempor": [624, 626, 628, 630, 632, 635, 637, 639, 810], "dfi": [124, 179], "diagon": [59, 285, 321], "diagonal_relax": 59, "dict": [30, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 52, 54, 56, 123, 125, 126, 127, 128, 129, 133, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 166, 204, 224, 244, 250, 254, 255, 256, 274, 275, 278, 283, 285, 321, 810, 871, 924, 928, 929, 930, 1091, 1319, 1332], "dictat": [440, 810, 928, 1050], "dictionari": [30, 37, 40, 41, 45, 46, 47, 48, 49, 56, 82, 123, 125, 126, 127, 129, 133, 136, 137, 138, 139, 143, 145, 146, 148, 149, 150, 153, 154, 155, 224, 244, 254, 255, 256, 274, 275, 278, 283, 321, 924, 929], "did": [419, 1025], "diff": [295, 321, 451, 452, 453, 454, 455, 456, 457, 540, 810, 894, 924, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1153, 1319], "differ": [40, 45, 94, 97, 118, 136, 141, 156, 159, 161, 175, 194, 200, 212, 213, 224, 226, 246, 253, 255, 256, 275, 278, 279, 285, 321, 414, 426, 440, 441, 444, 450, 459, 465, 480, 489, 521, 540, 542, 551, 560, 593, 594, 596, 601, 615, 616, 695, 721, 759, 762, 768, 810, 839, 840, 842, 850, 854, 873, 924, 930, 1000, 1020, 1032, 1050, 1051, 1054, 1060, 1069, 1076, 1085, 1100, 1134, 1153, 1155, 1172, 1181, 1182, 1184, 1199, 1200, 1273, 1319, 1343, 1345, 1347], "digit": [67, 605, 640, 641, 667, 810, 930, 1215, 1216, 1238, 1245, 1319, 1350], "dimens": [123, 125, 127, 129, 145, 146, 154, 321, 617, 810, 924, 1201, 1300, 1319], "dimension": [125, 127, 129, 279, 321, 924, 1319], "direct": [40, 139, 148, 152, 155, 264, 278, 289, 321, 365, 544, 645, 810, 879, 924, 968, 1157, 1223, 1319], "directli": [6, 30, 40, 58, 138, 166, 170, 175, 256, 278, 321, 466, 468, 469, 616, 785, 810, 832, 924, 1079, 1081, 1082, 1200, 1298, 1319, 1331, 1347, 1350], "directori": [40, 45, 148, 150, 153, 155, 321, 928], "dirpath": [35, 37, 41, 42, 45, 150, 321], "disabl": [45, 49, 50, 90, 91, 148, 153, 167, 224, 321, 831, 924], "disable_string_cach": 91, "disallow": 166, "discard": [203, 321, 476, 810, 846, 924, 1089, 1319], "disco": [669, 671, 1247, 1249], "discont": [669, 671, 1247, 1249], "discourag": [560, 810], "discoveri": [246, 321], "discret": [411, 414, 463, 491, 521, 540, 608, 810, 1018, 1020, 1074, 1102, 1134, 1153, 1193, 1319], "disk": [45, 46, 47, 48, 49, 142, 321, 575, 880, 924], "dispatch": 930, "displai": [7, 10, 11, 12, 13, 17, 18, 19, 23, 24, 25, 40, 190, 210, 321, 836, 842, 924], "distanc": [227, 321, 491, 810, 855, 924, 1102, 1319], "distinct": [40, 170, 244, 246, 299, 321, 371, 500, 503, 552, 611, 620, 756, 810, 974, 1111, 1114, 1165, 1195, 1204, 1319, 1336, 1346, 1348, 1350], "distinct_count": [45, 49, 321, 924], "distinguish": [450, 1060], "distribut": [509, 651, 810, 1122, 1230, 1319], "div": 1340, "divid": [20, 411, 445, 458, 466, 468, 469, 480, 509, 608, 810, 1018, 1055, 1068, 1079, 1081, 1082, 1122, 1193, 1319, 1336, 1341], "divis": [480, 719, 810, 1341], "divisor": [269, 292, 321, 547, 553, 634, 635, 638, 639, 656, 724, 744, 786, 787, 791, 799, 810, 884, 892, 924, 1212, 1214, 1234, 1309, 1319], "dl": [283, 321], "do": [1, 40, 46, 47, 48, 49, 51, 57, 58, 125, 126, 129, 136, 148, 150, 155, 159, 160, 161, 162, 180, 190, 192, 200, 223, 226, 227, 246, 250, 273, 285, 289, 321, 324, 410, 418, 523, 559, 681, 682, 690, 691, 692, 742, 782, 785, 801, 810, 827, 831, 832, 836, 838, 842, 854, 855, 860, 869, 871, 880, 899, 924, 930, 1017, 1024, 1085, 1136, 1259, 1260, 1268, 1269, 1270, 1303, 1319, 1324], "do_polars_oper": 29, "do_someth": 138, "do_various_th": 175, "doc": [39, 41, 42, 139, 142, 144, 159, 161, 177, 178, 188, 321, 932, 933], "document": [32, 94, 139, 177, 321, 325, 447, 450, 675, 695, 697, 698, 702, 806, 899, 932, 1000, 1057, 1060, 1253, 1273, 1275, 1276, 1280], "doe": [10, 37, 39, 46, 51, 59, 112, 123, 125, 126, 127, 129, 130, 136, 137, 138, 139, 140, 141, 145, 146, 150, 151, 154, 156, 185, 200, 203, 207, 212, 213, 225, 226, 254, 255, 256, 286, 295, 298, 321, 324, 325, 461, 476, 480, 489, 551, 560, 659, 669, 671, 683, 691, 692, 721, 806, 810, 830, 831, 836, 846, 850, 854, 860, 888, 894, 898, 924, 1007, 1071, 1085, 1089, 1100, 1225, 1237, 1247, 1249, 1261, 1319, 1324, 1342], "doesn": [39, 136, 150, 212, 227, 321, 463, 810, 850, 855, 924, 1074, 1319], "dog": [658, 701, 704, 741, 1236, 1279, 1282], "doi": 1343, "dollar": [681, 682, 1259, 1260], "domain": [1, 667, 1245], "don": [59, 212, 227, 231, 286, 289, 321, 410, 523, 560, 601, 810, 850, 855, 888, 924, 930, 1017, 1136, 1172, 1319], "done": [137, 156, 175, 181, 227, 321, 336, 337, 601, 810, 825, 828, 855, 924, 940, 1319], "dot": [51, 575, 806, 810, 880, 924, 1319], "doubl": [280, 321, 681, 682, 1259, 1260], "dow": 1343, "down": [150, 153, 154, 155, 156, 183, 321, 392, 479, 810, 1092, 1319], "download": [146, 150, 153, 154, 575, 880, 924], "downstream": [279, 321, 644, 810, 1221, 1319], "dr": 152, "drago": [672, 1250], "dragon": 672, "dragonfr": 1250, "dragonfruit": [672, 685, 696, 1250, 1263, 1274], "dramat": 141, "draw": [20, 25, 166, 170, 1350], "drawback": 806, "drawfn": 1350, "drawing_charact": 20, "dremio": 138, "driver": [38, 138, 139, 321], "drop": [1, 126, 193, 194, 195, 231, 286, 295, 321, 414, 416, 417, 521, 522, 608, 810, 839, 840, 888, 894, 924, 1020, 1022, 1023, 1134, 1135, 1193, 1319, 1346], "drop_dupl": [286, 321, 888, 924], "drop_empty_col": [141, 147], "drop_empty_row": [141, 147], "drop_first": [276, 321, 1295, 1319], "drop_in_plac": 321, "drop_nan": [321, 417, 810, 924, 1023, 1319], "drop_nul": [321, 416, 810, 924, 1022, 1319], "dset": 156, "dst": [445, 458, 1055, 1068], "dst_offset": [419, 1025], "dt": [1, 40, 51, 141, 147, 253, 321, 621, 756, 810, 819, 873, 924, 930, 1327, 1342, 1343], "dt1": 1342, "dt2": 1342, "dtm": [40, 321, 422, 450, 930, 1028, 1060, 1342], "dtm_iso": 450, "dtm_iso_strict": 450, "dtype": [10, 40, 50, 54, 60, 66, 70, 82, 90, 91, 101, 123, 125, 127, 129, 130, 136, 137, 138, 139, 141, 145, 146, 147, 150, 154, 163, 164, 165, 166, 170, 177, 179, 183, 186, 212, 227, 253, 277, 278, 279, 280, 283, 289, 298, 321, 378, 392, 393, 394, 395, 396, 397, 408, 409, 450, 461, 470, 483, 518, 526, 557, 559, 560, 567, 606, 613, 614, 621, 646, 648, 674, 695, 712, 716, 722, 732, 739, 758, 762, 766, 767, 769, 770, 771, 772, 782, 785, 792, 801, 810, 828, 833, 850, 855, 873, 898, 924, 929, 930, 932, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 980, 993, 994, 995, 996, 997, 998, 999, 1000, 1005, 1015, 1016, 1019, 1020, 1060, 1071, 1078, 1109, 1127, 1128, 1131, 1139, 1163, 1170, 1172, 1191, 1202, 1224, 1227, 1252, 1273, 1290, 1297, 1298, 1300, 1301, 1302, 1303, 1307, 1319, 1347, 1350], "dtype_format": [40, 321], "dtypekind": 179, "dtypelik": [177, 932], "dtypeoper": [1, 54], "dubiou": 94, "due": [212, 227, 253, 256, 291, 321, 332, 427, 440, 445, 458, 584, 585, 587, 589, 591, 592, 621, 624, 626, 628, 630, 632, 635, 637, 639, 737, 751, 752, 754, 755, 797, 798, 810, 828, 850, 855, 873, 924, 1033, 1050, 1055, 1068], "dummi": [276, 321, 1295, 1319], "duplic": [51, 99, 219, 226, 227, 228, 286, 290, 321, 332, 498, 584, 608, 810, 854, 855, 856, 888, 891, 924, 1108, 1193, 1319, 1348], "duplicateerror": [608, 810, 1193, 1319], "dur": [228, 321, 856, 924], "durat": [175, 227, 291, 321, 419, 427, 450, 451, 452, 453, 454, 455, 456, 457, 461, 467, 716, 751, 752, 754, 755, 797, 798, 810, 855, 924, 929, 930, 1025, 1033, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1071, 1080, 1300, 1302, 1319], "dure": [50, 98, 136, 137, 150, 175, 200, 321, 1085, 1319], "dutch": [418, 737, 1024], "dynam": [212, 321, 370, 551, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 810, 850, 924, 928, 973, 1164], "dynamicgroupbi": [212, 321], "e": [10, 35, 37, 39, 41, 42, 45, 46, 124, 133, 136, 142, 144, 148, 153, 155, 156, 168, 191, 203, 210, 214, 223, 230, 272, 273, 279, 289, 321, 330, 413, 463, 467, 470, 497, 554, 560, 565, 566, 567, 568, 569, 571, 572, 573, 575, 576, 577, 646, 651, 670, 691, 692, 703, 758, 772, 789, 800, 810, 837, 846, 858, 871, 924, 930, 1074, 1080, 1107, 1230, 1248, 1281, 1319, 1337, 1342, 1350], "e101": [40, 321], "e_filt": [571, 573], "e_sum_ov": [571, 573], "e_sum_slic": [571, 573], "each": [37, 40, 46, 51, 60, 67, 78, 137, 138, 141, 146, 154, 159, 160, 161, 162, 164, 187, 189, 196, 203, 210, 211, 212, 225, 227, 231, 244, 246, 253, 255, 257, 278, 283, 287, 290, 291, 299, 300, 302, 304, 306, 307, 315, 321, 346, 391, 395, 396, 411, 445, 458, 476, 500, 503, 529, 532, 539, 549, 556, 560, 608, 611, 619, 620, 627, 631, 642, 647, 654, 667, 671, 672, 676, 677, 685, 687, 688, 696, 703, 718, 732, 735, 741, 766, 767, 792, 800, 810, 831, 834, 835, 841, 846, 850, 855, 869, 873, 889, 891, 900, 902, 904, 906, 907, 915, 924, 949, 997, 998, 1004, 1018, 1055, 1068, 1111, 1114, 1142, 1145, 1152, 1162, 1193, 1195, 1203, 1204, 1217, 1226, 1245, 1249, 1250, 1254, 1255, 1263, 1265, 1266, 1274, 1281, 1289, 1319, 1336, 1347, 1348, 1350], "eager": [212, 227, 246, 289, 321, 420, 423, 426, 428, 437, 438, 440, 441, 444, 445, 449, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 624, 626, 628, 630, 632, 635, 637, 639, 732, 736, 751, 752, 754, 755, 762, 766, 767, 782, 785, 788, 789, 792, 797, 798, 801, 809, 810, 850, 855, 860, 924, 929, 1025, 1026, 1029, 1032, 1033, 1034, 1035, 1040, 1041, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1059, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1347], "eagerli": [551, 1328], "ear": [685, 696, 1263], "earlier": [227, 321, 855, 924], "earliest": [212, 321, 443, 444, 695, 698, 753, 850, 916, 924, 1053, 1054, 1273, 1276], "easi": 175, "easiest": 180, "easili": [51, 259, 283, 295, 300, 321, 792, 806, 875, 894, 900, 924], "east": [69, 155, 228, 321, 856, 924], "ebf1d": [40, 321], "eee": [1, 40, 321, 930], "ef": 682, "effect": [40, 205, 212, 321, 427, 480, 560, 586, 588, 590, 742, 810, 850, 897, 898, 924, 1025, 1033], "effici": [124, 138, 223, 225, 321, 559, 810], "efgh": 1342, "eg": [17, 25, 40, 59, 139, 175, 278, 321, 445, 695, 698, 719, 810, 930, 1273, 1276], "egnaro": 1342, "either": [82, 166, 222, 226, 227, 228, 244, 253, 254, 278, 279, 321, 467, 559, 606, 608, 621, 695, 727, 735, 739, 792, 810, 831, 854, 855, 856, 858, 873, 924, 928, 930, 1080, 1191, 1193, 1273, 1319, 1332, 1350], "element": [13, 14, 25, 161, 162, 165, 166, 168, 170, 180, 182, 189, 222, 246, 254, 267, 269, 284, 292, 321, 338, 339, 340, 341, 342, 343, 354, 355, 390, 391, 398, 401, 402, 403, 404, 406, 407, 408, 409, 410, 416, 417, 471, 472, 476, 489, 493, 501, 512, 520, 522, 523, 524, 527, 532, 540, 541, 542, 543, 547, 553, 555, 556, 559, 560, 601, 602, 611, 614, 622, 623, 625, 627, 629, 631, 633, 634, 636, 638, 643, 648, 649, 650, 654, 655, 656, 687, 688, 699, 714, 715, 717, 718, 724, 735, 744, 786, 787, 791, 799, 810, 826, 835, 882, 884, 887, 892, 924, 941, 942, 943, 944, 945, 946, 957, 958, 992, 1002, 1005, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1022, 1023, 1083, 1084, 1089, 1090, 1101, 1104, 1112, 1121, 1123, 1125, 1126, 1133, 1135, 1136, 1137, 1140, 1145, 1153, 1154, 1155, 1156, 1168, 1169, 1172, 1188, 1195, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1219, 1227, 1228, 1229, 1233, 1234, 1265, 1266, 1277, 1291, 1292, 1293, 1297, 1304, 1305, 1309, 1319, 1336, 1337], "elementwis": [559, 601, 622, 623, 625, 627, 629, 631, 634, 636, 638, 810, 1205, 1206, 1207, 1208, 1209, 1210, 1212, 1213, 1214, 1319], "elif": 800, "elig": [860, 924], "elimin": [509, 810, 1122, 1319], "elis": [238, 321, 865, 924], "ellips": 20, "ellipsi": [210, 321], "elppa": 1342, "els": [137, 800], "email": [667, 1245], "email_part": [667, 1245], "emphas": [321, 325], "emploi": 930, "empti": [13, 35, 37, 46, 103, 126, 136, 137, 141, 147, 150, 184, 185, 212, 237, 288, 321, 657, 665, 770, 788, 829, 830, 850, 864, 890, 924, 929, 930, 1005, 1007, 1090, 1109, 1123, 1235, 1243, 1319], "en": [20, 40, 321], "enabl": [28, 29, 45, 49, 50, 90, 91, 140, 148, 151, 153, 155, 159, 160, 161, 162, 174, 177, 259, 280, 295, 321, 333, 335, 615, 616, 644, 659, 669, 671, 683, 723, 806, 810, 831, 875, 894, 924, 932, 937, 938, 1199, 1200, 1221, 1237, 1247, 1249, 1261, 1301, 1308, 1319], "enable_string_cach": 90, "enclos": [482, 810], "encod": [63, 69, 81, 133, 136, 137, 150, 276, 321, 324, 375, 482, 619, 661, 707, 810, 977, 1203, 1239, 1295, 1319, 1324], "encount": [114, 136, 137, 150, 212, 321, 593, 594, 674, 675, 742, 746, 760, 810, 850, 924, 1181, 1182, 1252, 1253, 1319], "end": [37, 40, 46, 136, 137, 150, 212, 246, 321, 374, 377, 380, 393, 397, 419, 445, 470, 545, 658, 663, 667, 672, 679, 685, 689, 690, 691, 694, 732, 737, 750, 751, 752, 753, 754, 755, 758, 766, 767, 797, 798, 800, 806, 810, 850, 869, 924, 930, 979, 994, 999, 1025, 1055, 1119, 1158, 1241, 1245, 1250, 1257, 1263, 1267, 1268, 1269, 1274, 1319, 1342], "endian": [378, 980], "endpoint": [411, 608, 810, 1018, 1193, 1319], "ends_a": 1342, "ends_in_digit": 1342, "ends_with": [374, 380, 397, 658, 689, 930, 999, 1267, 1340], "ends_with_expr": 377, "ends_with_lit": 377, "engin": [14, 38, 138, 139, 141, 147, 172, 211, 226, 231, 279, 286, 307, 321, 559, 789, 810, 831, 849, 854, 860, 864, 888, 899, 907, 921, 924, 1172, 1300, 1319, 1331, 1347], "engine_opt": [38, 141, 321], "enginetyp": [831, 924], "enough": [523, 651, 810, 1136, 1230, 1319], "ensur": [10, 40, 139, 165, 168, 177, 203, 211, 244, 246, 254, 279, 321, 497, 559, 810, 846, 849, 860, 899, 924, 928, 930, 932, 1300, 1319], "enter": 175, "entir": [40, 57, 58, 141, 147, 321, 831, 832, 924], "entri": [175, 321, 924, 929, 1347], "entropi": [810, 1319], "enumer": [69, 128, 136, 137, 141, 147, 150, 225, 321], "env": [4, 171], "env_onli": 30, "environ": [4, 30, 37, 41, 45, 46, 47, 48, 49, 146, 148, 150, 153, 154, 155, 169, 172, 278, 321, 924], "eol_char": [136, 137, 150], "eparg": 1342, "epoch": [65, 66, 762, 1343], "epoch_": [428, 1034], "epoch_n": [428, 1034], "epochtimeunit": [428, 762, 1034], "eq": [203, 321, 465, 476, 810, 846, 924, 1076, 1319], "eq_miss": [810, 1184, 1319], "equal": [50, 91, 136, 137, 150, 159, 160, 161, 162, 212, 227, 228, 238, 267, 321, 411, 458, 464, 465, 485, 511, 551, 596, 608, 614, 622, 623, 625, 627, 629, 631, 634, 636, 638, 654, 679, 680, 683, 705, 735, 786, 787, 800, 806, 810, 850, 855, 856, 865, 882, 924, 1018, 1055, 1076, 1164, 1184, 1193, 1205, 1206, 1207, 1208, 1209, 1210, 1212, 1213, 1214, 1257, 1258, 1261, 1283, 1319, 1336, 1339, 1350], "equival": [40, 123, 125, 126, 127, 129, 145, 146, 154, 212, 222, 242, 321, 330, 334, 396, 464, 465, 467, 480, 485, 487, 511, 558, 580, 582, 595, 596, 597, 600, 606, 677, 701, 703, 704, 711, 719, 726, 810, 850, 924, 998, 1075, 1076, 1080, 1095, 1097, 1121, 1124, 1171, 1183, 1184, 1255, 1279, 1281, 1282, 1319, 1329, 1337], "err": 668, "error": [14, 39, 58, 109, 113, 115, 125, 126, 129, 136, 137, 141, 148, 150, 155, 246, 254, 279, 321, 332, 357, 358, 375, 418, 526, 528, 530, 551, 584, 616, 658, 661, 666, 668, 670, 674, 675, 695, 697, 698, 702, 810, 828, 832, 899, 907, 924, 960, 961, 977, 1024, 1139, 1141, 1143, 1200, 1236, 1239, 1244, 1246, 1248, 1252, 1253, 1273, 1275, 1276, 1280, 1300, 1319, 1345], "escap": [92, 136, 137, 139, 150, 664, 681, 682, 1242, 1259, 1260], "esp": 14, "especi": [164, 620, 810, 924, 1204, 1319], "espresso": 930, "est": 754, "establish": [138, 175], "estim": [136, 137, 181, 198, 321, 337, 468, 469, 509, 731, 810, 825, 924, 940, 1078, 1081, 1082, 1122, 1319], "estimated_s": [321, 1319], "etc": [21, 39, 40, 136, 140, 141, 142, 144, 151, 152, 321, 560, 810, 928, 930, 1218, 1220, 1319, 1343], "eu": [151, 152], "eur": [210, 321, 1350], "europ": [423, 427, 444, 1029, 1033, 1054], "eval": [277, 321, 559, 560, 757, 810, 1172, 1297, 1319], "evalu": [46, 47, 48, 49, 155, 201, 203, 227, 321, 334, 347, 349, 350, 382, 383, 384, 385, 387, 388, 410, 476, 494, 514, 515, 551, 600, 601, 727, 729, 732, 736, 751, 752, 754, 755, 757, 766, 767, 782, 785, 788, 792, 797, 798, 800, 801, 810, 831, 846, 852, 854, 855, 924, 950, 952, 953, 984, 985, 986, 987, 989, 990, 1017, 1089, 1127, 1128, 1310, 1319, 1339], "even": [37, 46, 136, 226, 321, 467, 605, 608, 810, 854, 924, 930, 1080, 1193, 1319], "evenli": [212, 321, 850, 924], "event": [58, 832, 924], "eventu": [38, 321], "ever": [601, 810], "everi": [14, 37, 46, 136, 137, 141, 147, 150, 206, 212, 275, 291, 321, 349, 350, 351, 352, 355, 357, 363, 406, 407, 408, 409, 410, 445, 458, 472, 484, 516, 517, 521, 524, 527, 528, 529, 537, 540, 545, 549, 620, 665, 746, 747, 810, 848, 850, 924, 952, 953, 954, 955, 958, 960, 966, 1013, 1014, 1015, 1016, 1017, 1055, 1068, 1084, 1094, 1129, 1130, 1134, 1137, 1140, 1141, 1142, 1150, 1153, 1158, 1162, 1204, 1243, 1319], "everybodi": [659, 683, 1237, 1261], "everyth": 930, "ew": [466, 468, 469, 810, 1079, 1081, 1082, 1319], "ewm_mean": [810, 1319], "ewm_mean_bi": [810, 1319], "ewm_std": [810, 1319], "ewm_var": [810, 1319], "ewma": [467, 810, 1080, 1319], "exact": [161, 164, 166, 170, 227, 265, 321, 337, 480, 665, 693, 694, 695, 697, 698, 719, 810, 855, 924, 1243, 1273, 1275, 1276], "exactli": [125, 126, 129, 159, 160, 161, 162, 165, 166, 170, 321, 687, 688, 693, 694, 756, 924, 1225, 1265, 1266, 1271, 1272, 1319], "exampl": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 69, 78, 82, 90, 91, 95, 98, 99, 100, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 145, 146, 147, 150, 151, 152, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 321, 324, 325, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 806, 810, 822, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 924, 928, 929, 934, 935, 936, 937, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1091, 1092, 1093, 1094, 1096, 1098, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1286, 1287, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1319, 1324, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1339, 1341, 1342, 1343, 1344, 1345, 1347, 1348, 1349], "exc_tb": 1347, "exc_typ": 1347, "exc_val": 1347, "exce": [210, 321], "excel": [36, 40, 135, 141, 321, 822], "excelspreadsheetengin": 141, "except": [0, 192, 207, 214, 227, 230, 250, 272, 321, 616, 672, 696, 758, 810, 822, 838, 855, 871, 924, 930, 993, 1101, 1126, 1200, 1250, 1274, 1291, 1300, 1319, 1346], "exclud": [166, 170, 212, 321, 391, 406, 409, 418, 497, 567, 718, 737, 806, 810, 850, 924, 930, 1024, 1107, 1319], "excluded_dtyp": [166, 167, 170], "exclus": [254, 321, 726, 732, 766, 767, 810], "execut": [39, 50, 59, 138, 139, 229, 268, 321, 413, 523, 723, 789, 810, 827, 831, 837, 860, 869, 883, 899, 924, 928, 1136, 1308, 1319, 1329, 1330, 1331, 1333, 1347, 1349], "execute_glob": 1347, "execute_opt": [138, 139], "exist": [1, 38, 39, 40, 51, 69, 99, 140, 148, 151, 155, 166, 192, 207, 246, 250, 285, 290, 295, 296, 321, 332, 374, 377, 380, 422, 444, 681, 682, 740, 810, 834, 838, 841, 871, 874, 891, 893, 894, 895, 924, 930, 1028, 1054, 1259, 1260, 1349], "existing_t": 1349, "existing_table_path": [39, 321], "exit": [50, 90, 175, 1334, 1347], "exp": [466, 467, 468, 469, 810, 1079, 1080, 1081, 1082, 1319, 1340], "exp_a": 1341, "expand": [136, 148, 150, 155, 472, 565, 569, 614, 709, 810, 928, 930, 1084, 1319], "expand_selector": 930, "expans": 706, "expect": [37, 41, 45, 46, 47, 48, 49, 67, 69, 73, 104, 112, 120, 136, 138, 146, 148, 150, 153, 154, 155, 160, 162, 321, 551, 560, 770, 810, 858, 860, 924], "expens": [136, 137, 146, 148, 150, 154, 155, 169, 171, 224, 231, 254, 255, 256, 285, 286, 321, 560, 810, 834, 836, 841, 874, 888, 893, 924, 1085, 1172, 1319, 1350], "experiment": [228, 283, 321, 856, 894, 924], "expiri": [37, 41, 45, 46, 47, 48, 49, 146, 148, 150, 153, 154, 155, 321, 924], "explain": [57, 58, 180, 229, 321, 831, 832, 924, 1346], "explainformat": [842, 924], "explicit": [40, 98, 138, 150, 164, 268, 290, 321, 450, 784, 883, 891, 924, 1060], "explicitli": [69, 98, 139, 164, 166, 175, 207, 226, 321, 615, 792, 810, 821, 854, 924, 1347], "explod": [321, 391, 478, 601, 617, 718, 810, 924, 928, 1201, 1319, 1337], "explor": [190, 321, 836, 924], "expon": [606, 810, 1191, 1319, 1341], "exponenti": [466, 467, 468, 469, 471, 606, 810, 1079, 1080, 1081, 1082, 1083, 1319, 1341], "export": [40, 41, 42, 178, 224, 225, 255, 256, 273, 275, 278, 321, 806, 930, 933, 1294, 1319], "expos": 822, "expr": [1, 51, 52, 53, 54, 55, 199, 201, 202, 226, 227, 228, 242, 246, 254, 259, 260, 278, 283, 295, 296, 321, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 805, 806, 810, 811, 812, 815, 816, 817, 818, 819, 843, 844, 845, 854, 855, 856, 870, 875, 876, 894, 895, 924, 928, 930, 1017, 1050, 1075, 1076, 1080, 1087, 1088, 1093, 1095, 1097, 1124, 1136, 1142, 1158, 1162, 1171, 1183, 1184, 1236, 1241, 1248, 1267, 1319, 1345], "expr1": [1339, 1347], "expr2": [1339, 1347], "expr_unique_subset": [242, 321], "express": [0, 8, 46, 47, 48, 49, 57, 58, 163, 166, 170, 182, 199, 201, 203, 211, 217, 226, 227, 231, 242, 246, 254, 259, 260, 264, 267, 278, 283, 284, 295, 296, 298, 300, 307, 321, 330, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 346, 347, 351, 352, 353, 354, 355, 358, 369, 374, 375, 376, 377, 378, 379, 380, 391, 393, 395, 396, 397, 400, 401, 402, 403, 404, 410, 411, 412, 413, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 467, 470, 472, 473, 475, 476, 480, 482, 483, 485, 486, 487, 488, 494, 497, 498, 499, 500, 501, 502, 503, 511, 512, 516, 517, 519, 520, 523, 524, 530, 532, 550, 551, 557, 558, 559, 560, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 578, 580, 582, 584, 585, 587, 589, 591, 592, 595, 596, 598, 600, 601, 605, 606, 607, 608, 610, 614, 615, 616, 617, 619, 620, 642, 643, 644, 647, 649, 650, 652, 654, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 681, 682, 683, 685, 686, 687, 688, 696, 700, 710, 711, 714, 715, 718, 719, 720, 722, 723, 725, 726, 727, 728, 730, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 766, 767, 768, 769, 770, 771, 772, 774, 776, 779, 782, 784, 785, 786, 787, 788, 790, 792, 794, 796, 797, 798, 800, 801, 806, 809, 822, 826, 831, 832, 842, 843, 846, 849, 854, 855, 869, 875, 876, 879, 880, 882, 887, 894, 895, 896, 898, 900, 907, 924, 928, 930, 957, 1006, 1017, 1024, 1028, 1060, 1075, 1076, 1080, 1086, 1095, 1097, 1107, 1124, 1133, 1136, 1171, 1172, 1183, 1184, 1199, 1200, 1219, 1223, 1236, 1237, 1238, 1242, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1252, 1253, 1259, 1260, 1261, 1274, 1278, 1319, 1337, 1339, 1341, 1342, 1346], "exprmetanamespac": [564, 570], "ext": 138, "extend": [0, 126, 293, 321, 473, 810, 822, 928, 939, 1086, 1319], "extend_const": [810, 1319], "extens": [280, 321, 1301, 1319], "extern": [896, 924], "extra": [39, 136, 137, 140, 142, 144, 148, 150, 151, 152, 155, 200, 212, 321, 810, 850, 924, 928, 1085, 1319], "extract": [130, 180, 268, 321, 421, 424, 426, 429, 431, 432, 433, 434, 435, 436, 439, 441, 442, 446, 448, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 462, 605, 667, 668, 669, 674, 675, 685, 687, 810, 1027, 1030, 1031, 1032, 1035, 1037, 1041, 1042, 1043, 1045, 1046, 1049, 1051, 1052, 1056, 1058, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1072, 1245, 1246, 1247, 1252, 1253, 1263, 1340], "extract_mani": [671, 1249], "extract_numb": [605, 810], "extracted_nr": 667, "extrem": [473, 622, 810, 1086, 1205, 1319], "extrema": [646, 810, 1224, 1319], "f": [52, 137, 138, 203, 210, 225, 273, 279, 285, 289, 321, 330, 370, 379, 551, 646, 665, 695, 698, 740, 810, 846, 924, 930, 973, 1164, 1243, 1273, 1276, 1319, 1324, 1337], "f32": [1, 54, 183, 268, 277, 283, 321, 646, 789, 810, 828, 883, 924, 930, 1170, 1319, 1345], "f4": [279, 321], "f5ed2452": [40, 321], "f64": [7, 9, 10, 11, 15, 18, 19, 21, 22, 23, 24, 25, 27, 51, 53, 55, 59, 78, 124, 126, 145, 156, 163, 166, 183, 184, 185, 188, 190, 191, 192, 194, 196, 201, 202, 205, 209, 210, 211, 212, 217, 218, 226, 227, 233, 234, 235, 236, 240, 246, 247, 248, 266, 267, 269, 271, 283, 292, 295, 300, 303, 305, 308, 309, 310, 311, 313, 314, 321, 329, 332, 338, 339, 340, 341, 342, 343, 361, 367, 372, 379, 392, 398, 399, 401, 402, 403, 411, 412, 416, 417, 446, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 479, 480, 485, 487, 495, 496, 504, 505, 506, 507, 509, 511, 523, 534, 535, 547, 553, 554, 555, 556, 558, 561, 562, 563, 579, 582, 584, 593, 594, 595, 596, 602, 606, 608, 609, 610, 611, 615, 616, 622, 623, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 648, 649, 650, 651, 655, 656, 710, 714, 715, 719, 724, 733, 734, 738, 740, 742, 744, 757, 758, 772, 775, 776, 777, 789, 791, 799, 806, 810, 828, 829, 836, 838, 839, 844, 845, 849, 850, 853, 854, 855, 862, 863, 870, 882, 884, 892, 894, 896, 900, 903, 905, 908, 909, 910, 911, 913, 914, 924, 930, 941, 942, 943, 944, 945, 946, 964, 970, 975, 981, 1002, 1003, 1008, 1009, 1010, 1018, 1019, 1022, 1023, 1056, 1079, 1080, 1081, 1082, 1083, 1087, 1092, 1102, 1105, 1106, 1136, 1147, 1148, 1160, 1166, 1167, 1168, 1169, 1188, 1191, 1193, 1195, 1200, 1205, 1207, 1208, 1210, 1211, 1212, 1214, 1215, 1216, 1227, 1228, 1229, 1233, 1292, 1293, 1307, 1319, 1328, 1336, 1337, 1341, 1344, 1347, 1350], "f_string": 761, "fa1e": [700, 1278], "face": [37, 41, 45, 46, 47, 48, 49, 146, 148, 150, 153, 154, 155, 321, 924], "facil": 138, "facilit": [186, 321], "factor": [466, 468, 469, 716, 810, 1079, 1081, 1082, 1302, 1319], "fail": [37, 38, 39, 41, 45, 46, 47, 48, 49, 124, 140, 142, 146, 148, 150, 151, 153, 154, 155, 179, 279, 286, 321, 347, 448, 551, 695, 697, 698, 702, 810, 888, 924, 1172, 1273, 1275, 1276, 1280, 1300, 1319, 1345], "fall": [155, 411, 608, 810, 831, 899, 924, 1018, 1193, 1319, 1336], "fallback": 141, "fals": [5, 7, 8, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 33, 37, 39, 40, 45, 46, 47, 48, 49, 51, 57, 58, 59, 124, 125, 126, 128, 129, 130, 136, 137, 138, 140, 141, 142, 144, 146, 147, 148, 150, 151, 153, 154, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 179, 182, 183, 184, 185, 190, 197, 205, 209, 210, 211, 212, 216, 217, 219, 220, 221, 224, 226, 227, 229, 234, 235, 241, 242, 244, 246, 247, 254, 255, 256, 257, 259, 262, 265, 267, 268, 271, 274, 276, 279, 280, 284, 285, 286, 290, 291, 293, 295, 303, 305, 308, 309, 311, 314, 321, 333, 334, 335, 346, 349, 350, 353, 357, 358, 366, 371, 374, 377, 380, 391, 392, 393, 397, 405, 406, 407, 408, 409, 410, 411, 418, 430, 446, 463, 464, 465, 466, 468, 469, 487, 488, 491, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 514, 515, 519, 523, 526, 528, 530, 539, 546, 551, 552, 558, 559, 560, 564, 566, 567, 568, 570, 572, 575, 576, 595, 596, 598, 600, 603, 604, 608, 611, 622, 623, 625, 627, 629, 631, 633, 634, 636, 638, 642, 644, 646, 651, 653, 654, 657, 658, 659, 660, 663, 669, 670, 671, 673, 674, 681, 682, 683, 686, 687, 689, 695, 697, 698, 700, 718, 720, 723, 726, 727, 728, 729, 730, 732, 735, 736, 737, 741, 742, 745, 746, 751, 752, 754, 755, 766, 767, 770, 776, 782, 785, 788, 789, 792, 794, 797, 798, 800, 801, 810, 826, 828, 829, 830, 831, 832, 836, 842, 849, 850, 854, 855, 858, 860, 869, 875, 878, 880, 882, 883, 887, 888, 891, 894, 899, 903, 905, 908, 909, 911, 914, 924, 928, 929, 930, 937, 938, 949, 952, 953, 956, 960, 961, 969, 974, 976, 977, 979, 982, 993, 994, 996, 999, 1001, 1004, 1005, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1024, 1036, 1056, 1076, 1077, 1079, 1081, 1082, 1089, 1091, 1096, 1098, 1107, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1122, 1127, 1128, 1132, 1136, 1139, 1141, 1143, 1152, 1159, 1165, 1178, 1184, 1186, 1189, 1190, 1193, 1195, 1196, 1197, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1217, 1221, 1225, 1230, 1232, 1235, 1236, 1237, 1238, 1241, 1247, 1248, 1249, 1251, 1252, 1259, 1260, 1261, 1264, 1265, 1267, 1273, 1275, 1276, 1278, 1295, 1300, 1301, 1305, 1308, 1310, 1319, 1329, 1331, 1337, 1342, 1347], "far": [40, 321], "fashion": [226, 321, 842, 869, 880, 924], "fast": [45, 47, 49, 169, 171, 321, 473, 644, 810, 924, 928, 1086, 1221, 1319, 1350], "fast_executemani": [38, 321], "faster": [46, 47, 48, 49, 57, 58, 138, 141, 200, 279, 289, 321, 560, 721, 810, 831, 832, 842, 869, 880, 924, 1085, 1172, 1319], "fastexcel": [141, 158], "favor": [38, 321], "fay": 133, "feat1": [278, 283, 321], "feat2": [278, 283, 321], "feather": [41, 142, 153, 321, 822], "featur": [1, 45, 56, 67, 69, 73, 278, 283, 321], "feature_0": [896, 924], "feature_0_train": [896, 924], "feature_1": [896, 924], "feature_nam": [283, 321], "feb": [158, 1342], "februari": 1342, "fed": 691, "feel": [659, 683, 1237, 1261], "fetch": [132, 831, 924], "fetch_california_h": [283, 321], "few": [210, 321], "fewer": [672, 696, 924, 1250, 1274], "ff": 1336, "ff00": [700, 1278], "fff": 1, "ffff00": [375, 376, 661, 977, 978, 1239], "ffffff": [40, 321], "ffi": [198, 321, 1078, 1319], "fgg": 930, "fghi": 1342, "fh": 137, "fiction": 1328, "field": [36, 37, 39, 46, 82, 116, 119, 126, 287, 321, 370, 551, 559, 560, 586, 588, 590, 619, 667, 668, 674, 687, 688, 708, 709, 710, 716, 723, 746, 747, 771, 792, 810, 889, 924, 973, 1164, 1172, 1203, 1246, 1265, 1266, 1287, 1289, 1302, 1319, 1343], "field_0": [370, 551, 973, 1164], "field_1": [370, 551, 973, 1164], "field_2": [973, 1164], "field_n": [370, 551, 973, 1164], "field_nam": [560, 810, 1172, 1319], "fiftyf": [493, 810], "figsiz": [575, 869, 880, 924], "figur": [575, 641, 810, 880, 924, 1216, 1319], "file": [2, 3, 5, 6, 32, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 191, 200, 261, 321, 413, 482, 574, 578, 810, 837, 877, 924, 928, 1085, 1319], "file_cache_ttl": [146, 150, 153, 154], "filenam": 142, "filesourc": [141, 147, 148, 155], "filesystem": [39, 140, 151, 152, 321], "fill": [51, 59, 184, 201, 202, 264, 289, 321, 325, 373, 406, 409, 474, 475, 481, 495, 496, 623, 625, 627, 629, 631, 634, 636, 638, 645, 761, 782, 785, 801, 810, 844, 845, 879, 896, 924, 1087, 1088, 1105, 1106, 1185, 1206, 1207, 1209, 1212, 1213, 1214, 1223, 1319], "fill_char": [679, 680, 1257, 1258], "fill_nan": [202, 321, 475, 810, 845, 924, 1088, 1319], "fill_nul": [51, 201, 321, 474, 810, 844, 896, 924, 1087, 1319], "fill_valu": [264, 289, 321, 645, 810, 879, 924, 1223, 1319], "fillnullstrategi": [202, 321, 475, 810, 845, 924, 1088, 1319], "film": 1328, "filter": [1, 46, 47, 48, 49, 52, 57, 58, 150, 151, 155, 156, 194, 195, 219, 220, 221, 246, 307, 321, 393, 397, 571, 573, 663, 689, 725, 750, 753, 760, 788, 789, 800, 810, 831, 832, 839, 840, 842, 852, 869, 880, 883, 907, 924, 930, 1220, 1319, 1335], "final": [13, 40, 51, 155, 227, 229, 321, 466, 468, 469, 810, 836, 855, 924, 928, 1079, 1081, 1082, 1319, 1348], "find": [59, 208, 321, 493, 643, 658, 659, 671, 810, 1104, 1219, 1237, 1249, 1259, 1319], "find_pat": 670, "fine": [831, 921, 924], "finish": [200, 321, 1085, 1319], "finit": [499, 719, 742, 810, 1110, 1319], "first": [45, 51, 136, 137, 141, 142, 144, 147, 148, 150, 155, 159, 160, 161, 162, 180, 210, 212, 214, 226, 227, 230, 231, 241, 245, 246, 253, 272, 276, 277, 285, 286, 291, 298, 304, 321, 346, 348, 357, 410, 414, 438, 440, 445, 461, 480, 490, 493, 500, 513, 521, 523, 528, 529, 551, 559, 560, 572, 581, 605, 606, 621, 643, 654, 658, 665, 666, 670, 672, 674, 675, 681, 682, 696, 703, 738, 739, 746, 760, 764, 800, 806, 810, 850, 851, 854, 855, 859, 868, 873, 888, 896, 898, 904, 924, 930, 949, 960, 1017, 1019, 1020, 1048, 1050, 1055, 1071, 1101, 1104, 1111, 1126, 1134, 1136, 1141, 1142, 1164, 1172, 1219, 1232, 1243, 1244, 1246, 1248, 1250, 1252, 1253, 1259, 1260, 1274, 1281, 1291, 1295, 1297, 1300, 1319, 1339, 1340, 1342, 1348, 1350], "first_column": [40, 321], "first_non_nul": [551, 1164], "first_part": [687, 688, 1265, 1266], "fisher": [509, 651, 810, 1122, 1230, 1319], "fit": [133, 224, 265, 289, 321, 646, 785, 810, 1224, 1225, 1319], "five": [282, 321, 1350], "fix": [10, 60, 69, 164, 461, 756, 1071], "flag": [56, 140, 151, 163, 279, 321, 644, 658, 666, 667, 670, 681, 682, 810, 842, 860, 924, 930, 1221, 1236, 1244, 1245, 1248, 1259, 1260, 1300, 1319, 1342], "flat": [133, 256, 321, 524, 617, 810, 1137, 1201, 1319], "flatten": 810, "flavour": [40, 138, 321], "flight": 138, "flight_sql": 138, "flightsql": 138, "float": [10, 11, 37, 40, 46, 71, 72, 136, 137, 150, 156, 159, 160, 161, 162, 163, 166, 170, 179, 190, 194, 198, 201, 227, 248, 257, 278, 279, 313, 321, 353, 399, 411, 416, 417, 446, 463, 464, 465, 466, 468, 469, 474, 479, 480, 485, 487, 495, 499, 502, 504, 505, 506, 507, 511, 519, 539, 554, 558, 561, 575, 579, 593, 594, 595, 596, 606, 608, 609, 622, 623, 625, 627, 629, 631, 632, 634, 636, 638, 640, 642, 648, 719, 783, 785, 810, 836, 839, 844, 855, 870, 880, 913, 924, 930, 956, 993, 1003, 1018, 1019, 1021, 1022, 1023, 1056, 1074, 1078, 1079, 1081, 1082, 1087, 1092, 1102, 1122, 1132, 1152, 1167, 1181, 1182, 1191, 1192, 1193, 1194, 1205, 1206, 1207, 1208, 1209, 1210, 1212, 1213, 1214, 1215, 1217, 1220, 1227, 1230, 1234, 1290, 1300, 1309, 1319, 1347, 1350], "float16": [283, 321], "float32": [1, 10, 37, 46, 54, 183, 205, 277, 278, 279, 283, 321, 467, 810, 828, 924, 930, 1080, 1109, 1170, 1298, 1300, 1303, 1319], "float4": [268, 321, 789, 883, 924, 1345], "float64": [10, 37, 40, 46, 126, 136, 145, 163, 166, 186, 196, 198, 205, 258, 283, 295, 321, 338, 339, 340, 341, 342, 343, 379, 392, 401, 402, 403, 412, 446, 467, 470, 504, 505, 610, 649, 650, 714, 715, 758, 772, 782, 785, 801, 806, 810, 833, 841, 874, 894, 924, 929, 930, 1056, 1080, 1301, 1307, 1319], "float_list": 78, "float_precis": [9, 10, 27, 37, 40, 46, 321, 924], "float_scientif": [37, 46, 321, 924], "floatfmt": 11, "floor": [53, 480, 810, 1319, 1340], "floor_a": 1341, "floordiv": [719, 810], "fmt": [11, 227, 321, 494, 761, 810, 852, 855, 924], "fmt_number": [321, 325], "fmt_str_length": [12, 751, 752, 754, 755], "fmt_table_cell_list_len": 13, "fmt_titl": [40, 321], "fn": [746, 747, 760, 784], "foggi": [681, 682, 1259, 1260], "fold": [321, 572, 738, 746, 747, 784], "folder": 156, "follow": [40, 45, 56, 136, 137, 138, 140, 141, 147, 150, 151, 152, 212, 227, 231, 245, 253, 279, 291, 321, 440, 445, 458, 467, 559, 605, 606, 611, 621, 624, 626, 628, 630, 632, 633, 635, 637, 639, 648, 708, 719, 734, 751, 752, 754, 755, 772, 797, 798, 800, 802, 803, 805, 810, 811, 812, 815, 817, 818, 819, 850, 855, 868, 873, 924, 930, 1050, 1055, 1068, 1080, 1191, 1195, 1218, 1220, 1227, 1300, 1311, 1313, 1315, 1319, 1320, 1325, 1326, 1327, 1345, 1350], "font": [40, 321], "font_color": [40, 321], "font_siz": [40, 321], "foo": [35, 37, 39, 41, 42, 43, 44, 45, 133, 145, 146, 183, 186, 187, 188, 192, 193, 194, 195, 196, 197, 200, 203, 205, 207, 208, 209, 213, 214, 215, 216, 217, 218, 220, 226, 230, 231, 232, 233, 234, 235, 236, 239, 240, 243, 246, 248, 250, 251, 254, 257, 258, 259, 261, 263, 266, 269, 270, 271, 272, 273, 275, 276, 277, 279, 280, 281, 285, 286, 287, 292, 293, 294, 299, 321, 394, 411, 413, 440, 484, 490, 494, 513, 564, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 608, 617, 657, 660, 662, 665, 667, 668, 673, 684, 686, 688, 690, 691, 692, 693, 694, 701, 704, 713, 731, 742, 743, 744, 759, 763, 764, 765, 768, 769, 773, 775, 777, 778, 780, 781, 783, 788, 791, 795, 799, 800, 806, 810, 828, 833, 834, 838, 839, 840, 841, 846, 852, 853, 854, 867, 871, 874, 875, 888, 889, 893, 896, 924, 929, 930, 995, 1018, 1050, 1143, 1191, 1193, 1201, 1238, 1240, 1243, 1245, 1246, 1262, 1266, 1271, 1272, 1279, 1282, 1319, 1333, 1335, 1336, 1337, 1339, 1342, 1345], "foo1": 1342, "foo11": [205, 321], "foo_": [569, 686, 761], "foo_1": [276, 321], "foo_2": [276, 321], "foo_3_4": 1342, "foo_a": [246, 321], "foo_a_bar_1": 761, "foo_at_1": 1337, "foo_b": [246, 321], "foo_b_bar_2": 761, "foo_bar": [564, 570, 686, 770, 1333], "foo_bar2": [564, 570], "foo_bar_baz": 686, "foo_c_bar_3": 761, "foo_low": [701, 1342], "foo_mean": 1337, "foo_q25": 1336, "foo_q50": 1336, "foo_q75": 1336, "foo_std": 1336, "foo_strip": 690, "foo_strip_end": 691, "foo_strip_start": 692, "foo_sum": [1336, 1337], "foo_uniqu": 1337, "foo_upp": [704, 1342], "foo_var": 1336, "foobar": [693, 694, 1271, 1272, 1342], "foobarbar": [694, 1272], "foofoobar": [693, 1271], "foral": [466, 468, 469, 810, 1079, 1081, 1082, 1319], "forc": [227, 231, 279, 307, 321, 551, 854, 855, 907, 924, 1172, 1300, 1319], "force_parallel": [227, 321, 854, 855, 924], "form": [37, 46, 123, 125, 126, 127, 129, 145, 146, 154, 224, 255, 289, 321, 450, 602, 678, 703, 810, 924, 1060, 1188, 1256, 1281, 1319, 1342], "format": [7, 11, 15, 16, 20, 36, 37, 40, 41, 42, 45, 46, 94, 134, 136, 137, 138, 141, 142, 144, 147, 150, 156, 178, 191, 199, 210, 224, 237, 246, 255, 256, 261, 275, 288, 319, 321, 325, 413, 445, 447, 450, 574, 575, 576, 695, 697, 698, 702, 756, 810, 837, 842, 843, 864, 877, 890, 924, 933, 1057, 1060, 1273, 1275, 1276, 1280, 1318, 1342, 1343], "formul": [194, 321, 839, 840, 924], "formula": [40, 321, 463, 810, 1074, 1319], "fortran": [278, 279, 321], "forward": [202, 227, 264, 321, 365, 418, 437, 475, 481, 544, 645, 810, 845, 855, 879, 924, 968, 1024, 1047, 1088, 1157, 1223, 1319], "forward_fil": [291, 321, 373, 406, 409, 645, 810], "found": [20, 37, 40, 46, 95, 116, 119, 126, 130, 141, 148, 155, 196, 268, 321, 493, 643, 670, 675, 693, 694, 695, 698, 810, 883, 924, 1104, 1219, 1248, 1253, 1271, 1272, 1273, 1276, 1319, 1331, 1347], "four": [282, 321, 1347], "fourth": [509, 810, 1122, 1319], "frac": [466, 467, 468, 469, 651, 810, 1079, 1080, 1081, 1082, 1230, 1319], "fraction": [37, 46, 159, 160, 161, 162, 257, 321, 446, 539, 602, 642, 695, 698, 810, 924, 1056, 1152, 1188, 1217, 1273, 1276, 1319], "fragment": 1347, "frame": [37, 38, 40, 46, 51, 58, 59, 126, 137, 141, 147, 159, 160, 183, 184, 190, 224, 225, 229, 231, 238, 242, 245, 254, 255, 256, 268, 283, 289, 290, 321, 450, 789, 828, 829, 836, 865, 868, 883, 891, 924, 930, 1005, 1060, 1319, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1346, 1350], "frame_data": [1330, 1333], "frameinittyp": [321, 924], "frametyp": [51, 1347], "framework": [246, 288, 321, 890, 924], "freedom": [269, 292, 321, 547, 553, 634, 635, 638, 639, 656, 724, 744, 786, 787, 791, 799, 810, 884, 892, 924, 1212, 1214, 1234, 1309, 1319], "freeli": [789, 883, 924, 930], "freez": [40, 321], "freeze_pan": [40, 321], "frequenc": [291, 321, 723, 810, 1308, 1319], "frequent": [1218, 1220, 1319], "fri": [321, 324], "fridai": [212, 321, 418, 447, 737, 850, 924, 1024, 1057, 1060], "friendship": 12, "from": [2, 3, 4, 5, 6, 10, 16, 28, 32, 36, 37, 39, 40, 41, 45, 46, 47, 48, 49, 51, 59, 69, 82, 94, 98, 114, 118, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 180, 183, 190, 191, 192, 198, 200, 203, 204, 210, 212, 224, 225, 226, 227, 228, 229, 237, 246, 250, 253, 254, 256, 257, 259, 260, 268, 276, 283, 285, 286, 288, 289, 290, 291, 297, 321, 324, 325, 370, 379, 411, 412, 413, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 467, 470, 480, 482, 495, 509, 527, 539, 551, 560, 568, 593, 594, 596, 601, 602, 605, 608, 610, 621, 622, 624, 626, 628, 630, 632, 635, 637, 639, 642, 654, 666, 667, 672, 674, 675, 685, 690, 691, 692, 693, 694, 695, 696, 697, 698, 702, 721, 733, 734, 737, 738, 750, 751, 752, 753, 754, 755, 756, 770, 785, 789, 796, 797, 798, 806, 809, 810, 828, 836, 837, 838, 846, 850, 854, 855, 856, 864, 871, 873, 875, 876, 883, 888, 890, 891, 896, 897, 924, 929, 930, 973, 981, 1018, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1076, 1078, 1080, 1085, 1122, 1140, 1152, 1164, 1181, 1182, 1184, 1185, 1188, 1193, 1205, 1217, 1244, 1245, 1250, 1252, 1263, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1280, 1295, 1310, 1319, 1328, 1329, 1330, 1331, 1336, 1337, 1338, 1339, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350], "from_arrai": 789, "from_arrow": 124, "from_json": 810, "from_panda": 124, "from_repr": [277, 321, 1297, 1319], "fromkei": [52, 54], "front": [212, 321, 850, 924], "fruit": [274, 321, 393, 397, 618, 663, 689, 696, 810, 994, 999, 1241, 1267, 1274], "fruits_revers": [618, 810], "fsspec": [136, 137, 142, 144, 151, 152, 158], "fsspecfileio": 152, "full": [11, 45, 49, 51, 59, 66, 94, 126, 129, 136, 137, 138, 140, 145, 146, 148, 150, 151, 152, 154, 155, 156, 226, 290, 321, 672, 674, 681, 682, 695, 696, 697, 698, 702, 751, 752, 854, 860, 891, 924, 930, 1250, 1252, 1259, 1260, 1273, 1274, 1275, 1276, 1280, 1319, 1335, 1350], "full_sent": 741, "fulli": [168, 245, 257, 279, 321], "funcnam": [40, 321], "function": [0, 31, 32, 33, 34, 37, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 67, 69, 73, 90, 91, 121, 124, 128, 130, 133, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 173, 175, 177, 179, 182, 188, 191, 198, 205, 228, 231, 237, 245, 246, 250, 268, 278, 279, 280, 283, 284, 285, 288, 289, 290, 307, 321, 324, 325, 333, 370, 390, 391, 410, 411, 413, 445, 466, 468, 469, 491, 551, 559, 560, 585, 586, 601, 605, 608, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 648, 651, 671, 716, 717, 718, 727, 731, 739, 743, 745, 746, 747, 759, 760, 762, 764, 765, 768, 771, 772, 775, 777, 780, 782, 784, 786, 787, 791, 795, 799, 801, 806, 810, 822, 826, 832, 837, 856, 860, 864, 868, 871, 883, 887, 890, 891, 898, 907, 924, 928, 932, 973, 992, 1001, 1017, 1018, 1055, 1078, 1079, 1081, 1082, 1102, 1164, 1172, 1193, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1218, 1220, 1225, 1227, 1230, 1249, 1298, 1301, 1303, 1304, 1319, 1324, 1335, 1336, 1337, 1338, 1339, 1341, 1342, 1343, 1345, 1346, 1347, 1348, 1349, 1350], "function_nam": 928, "further": 806, "futur": [58, 179, 190, 226, 262, 321, 832, 836, 854, 878, 924], "g": [37, 46, 133, 136, 140, 142, 144, 151, 156, 168, 179, 191, 223, 279, 289, 321, 330, 413, 467, 470, 560, 646, 758, 810, 837, 871, 924, 1080, 1319, 1350], "g1": [476, 725, 810], "g2": [476, 725, 810], "g_1": [651, 810, 1230, 1319], "gag": 26, "gamma": [466, 468, 469, 810, 1079, 1081, 1082, 1319], "gantt": [869, 924], "gather": [137, 206, 321, 346, 484, 527, 735, 810, 848, 924, 949, 1094, 1140, 1319], "gather_everi": [321, 810, 924, 1319], "gb": [198, 321, 379, 1078, 1319], "gbp": 1350, "gc": [39, 140, 151, 152, 321], "gca": 26, "gcaacgcatata": 26, "gcp": [34, 37, 41, 45, 46, 47, 48, 49, 146, 148, 150, 152, 153, 154, 155, 321, 924], "gdp": [227, 321, 855, 924], "gdp2": [227, 321, 855, 924], "gdp_date": [227, 321, 855, 924], "ge": [810, 1319], "gener": [1, 133, 138, 139, 157, 163, 164, 165, 166, 167, 168, 170, 179, 186, 188, 246, 257, 276, 279, 285, 321, 539, 642, 647, 732, 751, 754, 766, 767, 769, 785, 797, 798, 810, 924, 993, 1152, 1217, 1226, 1295, 1319, 1350], "geq": [466, 468, 469, 810, 1079, 1081, 1082, 1319], "germani": [227, 321, 855, 924], "get": [51, 58, 69, 143, 149, 156, 180, 182, 186, 187, 196, 204, 207, 209, 212, 214, 215, 219, 221, 222, 230, 233, 240, 241, 246, 253, 254, 258, 263, 266, 272, 280, 284, 294, 304, 315, 321, 331, 344, 345, 346, 348, 356, 359, 371, 379, 391, 394, 406, 407, 408, 409, 418, 428, 477, 483, 490, 493, 508, 510, 513, 525, 531, 552, 561, 562, 563, 571, 573, 579, 593, 594, 603, 604, 609, 620, 621, 652, 656, 665, 712, 713, 717, 718, 720, 724, 735, 737, 759, 764, 768, 772, 773, 774, 775, 777, 778, 779, 781, 791, 795, 799, 810, 826, 831, 832, 834, 841, 847, 850, 851, 857, 859, 873, 874, 881, 886, 887, 893, 904, 915, 924, 928, 929, 934, 947, 948, 949, 950, 951, 959, 962, 974, 981, 995, 1004, 1013, 1014, 1015, 1016, 1024, 1034, 1073, 1090, 1091, 1096, 1101, 1104, 1107, 1108, 1120, 1123, 1126, 1138, 1144, 1165, 1173, 1175, 1176, 1178, 1180, 1181, 1182, 1189, 1190, 1194, 1204, 1231, 1234, 1243, 1291, 1295, 1301, 1305, 1309, 1319], "get_chunk": 1319, "get_column": [179, 281, 321], "get_column_index": 321, "get_token": 33, "get_worksheet_by_nam": [40, 321], "gevent": [58, 158, 832, 924], "gh": 682, "gh45": 682, "gh45ij67kl": 682, "ghi": [330, 667, 810, 930, 1245], "gil": [560, 810], "git": 56, "github": [139, 321], "give": [146, 153, 154, 227, 237, 286, 288, 321, 428, 480, 509, 614, 719, 723, 810, 822, 855, 864, 888, 890, 924, 1034, 1122, 1308, 1319, 1346], "given": [40, 51, 100, 105, 122, 123, 125, 126, 127, 129, 136, 137, 138, 139, 141, 142, 144, 145, 146, 147, 148, 150, 153, 154, 155, 161, 162, 163, 164, 166, 168, 169, 170, 171, 177, 198, 199, 201, 212, 222, 231, 244, 245, 254, 255, 256, 264, 267, 283, 290, 321, 353, 365, 370, 379, 391, 400, 419, 423, 447, 449, 450, 463, 467, 491, 497, 519, 544, 551, 554, 560, 601, 605, 611, 614, 615, 617, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 643, 645, 667, 668, 679, 680, 695, 698, 705, 708, 718, 758, 759, 768, 771, 772, 785, 786, 787, 810, 843, 850, 860, 868, 879, 882, 891, 907, 924, 929, 930, 932, 956, 968, 973, 981, 1006, 1025, 1029, 1057, 1059, 1060, 1074, 1078, 1080, 1102, 1107, 1121, 1132, 1157, 1164, 1167, 1170, 1172, 1185, 1191, 1195, 1201, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1219, 1223, 1245, 1246, 1257, 1258, 1273, 1276, 1283, 1307, 1310, 1319, 1328, 1330, 1335, 1337, 1338, 1341, 1342, 1347, 1349, 1350], "glimps": [190, 214, 321], "glob": [136, 137, 141, 148, 150, 153, 154, 155], "global": [50, 90, 91, 141, 157, 166, 174, 268, 321, 615, 616, 789, 810, 883, 924, 996, 1000, 1199, 1200, 1319, 1329, 1331, 1346], "gmt": [423, 427, 444, 1029, 1033, 1054], "go": [12, 136, 137, 150, 393, 663, 994, 1241], "godfath": 1328, "goe": 12, "gonfruit": 1274, "good": [45, 47, 49, 224, 321, 924, 1341], "goodby": 1, "googl": [34, 140, 151, 152], "gpu": [278, 321, 831, 899, 921, 924, 1298, 1319], "gpu_devic": [278, 321], "gpudevic": [278, 321], "gpuengin": [831, 924], "grade": [1122, 1319], "grain": [831, 921, 924], "granular": 1347, "grape": 1342, "graph": [57, 138, 229, 321, 575, 831, 852, 896, 924], "graphviz": [229, 321, 575, 880, 924], "great": [321, 325], "great_tabl": [321, 325], "greater": [184, 227, 321, 485, 487, 497, 651, 679, 680, 688, 705, 810, 855, 924, 1107, 1230, 1257, 1258, 1266, 1283, 1319], "greatest": [1336, 1340], "greatli": [142, 153], "green": [50, 90, 91, 307, 723, 810, 907, 1308, 1319], "greenlet": [58, 832, 924], "greet": 1, "grid": [495, 810], "grid_point": [495, 810], "gridlin": [40, 321], "gross": 1328, "group": [9, 27, 45, 49, 137, 155, 183, 211, 212, 225, 227, 242, 244, 246, 253, 256, 289, 291, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 321, 324, 331, 391, 410, 472, 478, 483, 486, 523, 559, 560, 571, 573, 601, 611, 620, 621, 653, 654, 658, 666, 667, 668, 670, 681, 682, 718, 723, 772, 810, 828, 849, 850, 855, 873, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 924, 928, 930, 1017, 1136, 1204, 1236, 1244, 1245, 1246, 1248, 1259, 1260, 1308, 1319, 1328, 1336, 1346, 1347], "group_bi": [212, 242, 246, 253, 291, 320, 321, 331, 381, 386, 389, 391, 476, 478, 483, 486, 559, 560, 601, 653, 654, 718, 725, 751, 754, 772, 810, 831, 832, 842, 850, 869, 873, 880, 922, 924, 930], "group_by_dynam": [253, 321, 873, 924], "group_by_partit": [869, 924], "group_col": [476, 725, 810], "group_df": [307, 907], "group_dtyp": [601, 810], "group_index": [666, 1244], "group_to_row": [601, 810], "groupbi": [211, 321, 560, 772, 810], "grouper": [381, 386, 389, 810], "grow": [293, 321], "grown": [216, 321], "gt": [321, 325, 810, 1319], "gte": [476, 725, 810], "guarante": [45, 49, 136, 137, 182, 190, 213, 284, 286, 321, 390, 391, 489, 716, 717, 718, 810, 826, 836, 887, 888, 924, 992, 1100, 1302, 1304, 1319], "guid": [810, 928, 1350], "gzip": [45, 49, 321, 924], "h": [289, 321, 330, 447, 450, 646, 681, 682, 695, 698, 702, 810, 1259, 1260, 1273, 1276, 1280, 1342, 1343], "ha": [39, 40, 51, 58, 128, 138, 150, 173, 179, 291, 297, 302, 321, 390, 391, 410, 482, 559, 572, 578, 672, 696, 706, 717, 718, 742, 759, 768, 806, 810, 832, 897, 902, 907, 924, 992, 1005, 1017, 1019, 1250, 1274, 1304, 1319], "half": [283, 321, 445, 466, 467, 468, 469, 810, 1055, 1079, 1080, 1081, 1082, 1319], "half_lif": [466, 467, 468, 469, 810, 1079, 1080, 1081, 1082, 1319], "ham": [35, 37, 39, 41, 42, 45, 183, 186, 187, 188, 192, 193, 194, 195, 196, 197, 203, 208, 213, 214, 216, 226, 230, 232, 234, 236, 239, 243, 248, 250, 251, 254, 257, 258, 259, 266, 269, 270, 272, 276, 277, 279, 280, 281, 286, 292, 293, 321, 394, 575, 576, 806, 828, 833, 834, 838, 839, 840, 841, 846, 854, 867, 871, 874, 875, 888, 896, 924, 995, 1335, 1336], "ham_a": [276, 321], "ham_b": [276, 321], "ham_right": [226, 321, 854, 924], "hamburg": 806, "hand": [40, 136, 137, 150, 321, 540, 541, 542, 543, 1153, 1154, 1155, 1156], "handi": [418, 737, 1024], "handl": [39, 57, 58, 59, 97, 130, 136, 137, 150, 156, 203, 207, 321, 414, 521, 665, 705, 810, 831, 832, 846, 924, 928, 1020, 1134, 1243, 1283, 1319], "handler": [134, 136, 137, 141, 142, 143, 144, 145, 146, 147, 148, 149, 191, 321, 413, 810, 837, 924], "happen": [138, 423, 608, 810, 1029, 1193, 1319], "hard": [150, 860, 924], "harder": [212, 321, 850, 924], "hardwar": 1350, "has_head": [136, 137, 141, 147, 150], "has_nul": [810, 1099, 1319], "has_prefix": [397, 689], "has_suffix": [393, 663], "has_two": 1337, "has_valid": 1319, "hash": [213, 321, 810, 1319], "hash_row": 321, "hat": [681, 682, 1259, 1260], "have": [5, 14, 30, 40, 50, 51, 66, 91, 124, 134, 136, 137, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 180, 191, 200, 224, 226, 227, 246, 249, 253, 255, 256, 275, 283, 298, 321, 410, 413, 466, 468, 469, 560, 572, 611, 615, 616, 621, 668, 683, 739, 810, 837, 854, 855, 864, 873, 897, 898, 924, 928, 930, 1017, 1019, 1079, 1081, 1082, 1085, 1195, 1199, 1200, 1259, 1261, 1319, 1346, 1348, 1350], "haystack": [667, 1245], "he": 691, "head": [69, 150, 210, 230, 272, 321, 336, 513, 810, 859, 924, 1126, 1291, 1319], "header": [37, 40, 45, 46, 49, 130, 136, 137, 141, 147, 150, 196, 285, 321, 924], "header_format": [40, 321], "header_nam": [285, 321], "headerless": 150, "heap": [198, 321, 810, 928, 1078, 1319], "heatmap": [40, 321], "heavili": 155, "height": [40, 133, 166, 195, 321, 324, 1319, 1324], "hell": [690, 1268], "hello": [1, 20, 690, 691, 692, 930, 1143, 1268, 1269, 1270, 1330, 1333], "hello_": 761, "hello_data": 1333, "hello_world": 1333, "help": [40, 159, 160, 161, 162, 321, 924], "helper": [321, 325, 806], "henc": [681, 1260], "here": [37, 39, 40, 41, 45, 46, 47, 48, 49, 123, 125, 126, 127, 129, 138, 139, 140, 145, 146, 148, 150, 151, 152, 153, 154, 155, 164, 166, 170, 180, 246, 321, 418, 559, 560, 575, 668, 675, 737, 810, 880, 924, 930, 1024, 1253], "hex": [375, 376, 661, 662, 700, 977, 978, 1239, 1240, 1278], "hexadecim": [977, 978], "hf": [37, 41, 45, 46, 47, 48, 49, 146, 148, 150, 153, 154, 155, 321, 924], "hf_token": [37, 41, 45, 46, 47, 48, 49, 146, 148, 150, 153, 154, 155, 321, 924], "hi": [1, 1342], "hidden": [40, 321], "hidden_column": [40, 321], "hide": [21, 22, 23, 24], "hide_gridlin": [40, 321], "hide_password": 138, "high": [256, 321, 325, 608, 810, 822, 1193, 1319], "higher": [45, 49, 190, 248, 313, 321, 609, 631, 632, 783, 810, 836, 870, 913, 924, 1019, 1194, 1210, 1319], "highest": [321, 325, 611, 722, 742, 810, 924, 1195, 1319], "highli": [810, 928], "hippopotamu": [679, 680, 1257, 1258], "hist": [810, 1319, 1324], "histogram": [1319, 1324], "hit": [827, 924], "hive": [148, 153, 155], "hive_partit": [148, 153, 155], "hive_schema": [148, 153, 155], "hmm": 930, "hold": [265, 279, 321, 1300, 1319], "holidai": [418, 737, 1024], "home": [703, 1281], "horizont": [20, 59, 99, 205, 216, 233, 235, 240, 271, 289, 321, 728, 730, 739, 740, 741, 746, 747, 749, 757, 760, 774, 776, 779, 784, 794, 896, 924], "host": [56, 136, 142, 144, 155], "hour": [146, 150, 153, 154, 212, 227, 253, 291, 321, 432, 434, 435, 439, 440, 443, 445, 446, 450, 452, 458, 467, 621, 624, 626, 628, 630, 632, 635, 637, 639, 751, 752, 753, 754, 755, 756, 796, 797, 798, 810, 850, 855, 873, 924, 930, 1050, 1053, 1055, 1062, 1068, 1080, 1319, 1343], "hours_diff": 452, "hous": [283, 321], "how": [11, 37, 39, 40, 41, 45, 46, 47, 48, 49, 51, 59, 99, 139, 146, 148, 150, 153, 154, 155, 195, 203, 226, 227, 246, 289, 290, 321, 354, 414, 443, 444, 495, 520, 521, 601, 614, 633, 695, 698, 737, 753, 800, 810, 846, 854, 855, 891, 896, 924, 928, 957, 1020, 1053, 1054, 1133, 1134, 1211, 1273, 1276, 1319], "howev": [1, 126, 138, 148, 155, 175, 198, 231, 279, 321, 601, 810, 831, 924, 1078, 1319], "hstack": [99, 321], "html": [32, 40, 41, 42, 124, 138, 142, 144, 177, 178, 179, 188, 321, 932, 933], "http": [20, 32, 40, 41, 42, 69, 124, 138, 139, 142, 144, 177, 178, 179, 188, 321, 575, 666, 668, 678, 880, 924, 932, 933, 1244, 1246, 1256], "httpmethod": 69, "hug": [37, 41, 45, 46, 47, 48, 49, 146, 148, 150, 153, 154, 155, 321, 924], "hut": [681, 682, 1259, 1260], "hvplot": [321, 324, 1319, 1324], "hyperbol": [339, 341, 343, 402, 650, 715, 810, 942, 944, 946, 1009, 1229, 1293, 1319], "hyperloglog": [181, 321, 337, 731, 810, 825, 924, 940, 1319], "hyphen": [657, 1235], "hypothesi": [164, 166, 169, 170, 1350], "i": [1, 12, 14, 17, 31, 32, 33, 34, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 65, 66, 67, 68, 69, 73, 83, 91, 95, 97, 98, 99, 100, 101, 102, 104, 105, 110, 116, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 180, 181, 182, 183, 185, 186, 190, 191, 194, 195, 197, 198, 200, 203, 207, 211, 212, 213, 214, 217, 218, 222, 224, 225, 226, 227, 228, 229, 230, 231, 237, 238, 242, 244, 245, 246, 250, 251, 253, 254, 255, 256, 257, 260, 261, 262, 264, 266, 267, 268, 269, 272, 273, 278, 279, 280, 283, 284, 285, 286, 288, 289, 290, 291, 292, 296, 298, 299, 307, 321, 324, 325, 330, 333, 335, 336, 337, 347, 350, 357, 358, 365, 370, 378, 390, 391, 392, 395, 396, 410, 411, 413, 416, 417, 418, 419, 422, 430, 437, 438, 440, 445, 447, 450, 458, 466, 467, 468, 469, 472, 476, 480, 489, 491, 494, 497, 509, 515, 522, 523, 526, 528, 530, 539, 544, 545, 547, 551, 553, 556, 559, 560, 564, 566, 567, 568, 570, 571, 572, 574, 583, 601, 606, 608, 611, 613, 614, 615, 616, 617, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 647, 648, 651, 652, 653, 654, 656, 657, 658, 659, 660, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 685, 688, 690, 691, 692, 695, 696, 697, 698, 700, 702, 703, 705, 710, 717, 718, 723, 724, 727, 728, 729, 730, 731, 736, 737, 739, 740, 741, 743, 744, 745, 746, 747, 751, 752, 754, 755, 760, 764, 765, 766, 767, 769, 770, 772, 775, 777, 780, 782, 785, 786, 787, 788, 789, 791, 795, 797, 798, 799, 800, 801, 806, 810, 825, 826, 827, 830, 831, 832, 834, 836, 837, 839, 840, 841, 842, 846, 849, 850, 853, 854, 855, 856, 858, 860, 864, 865, 869, 871, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 887, 888, 890, 891, 892, 893, 895, 898, 899, 907, 917, 924, 928, 930, 937, 938, 939, 940, 953, 960, 961, 968, 973, 980, 992, 996, 997, 998, 1001, 1006, 1007, 1017, 1018, 1019, 1022, 1023, 1024, 1025, 1028, 1036, 1050, 1055, 1057, 1060, 1068, 1077, 1078, 1079, 1080, 1081, 1082, 1084, 1085, 1089, 1090, 1100, 1101, 1102, 1104, 1107, 1109, 1119, 1121, 1122, 1123, 1126, 1128, 1135, 1136, 1139, 1141, 1143, 1152, 1157, 1158, 1164, 1172, 1191, 1193, 1195, 1197, 1199, 1200, 1201, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1217, 1218, 1219, 1220, 1221, 1223, 1226, 1227, 1230, 1231, 1234, 1235, 1236, 1237, 1238, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1257, 1258, 1259, 1260, 1261, 1263, 1266, 1268, 1269, 1270, 1273, 1274, 1275, 1276, 1278, 1280, 1281, 1283, 1291, 1294, 1298, 1300, 1301, 1303, 1304, 1308, 1309, 1319, 1324, 1328, 1329, 1334, 1338, 1339, 1342, 1345, 1347, 1348, 1350], "i0e0": 1350, "i16": [1, 54, 426, 441, 460, 646, 810, 930, 1051, 1297, 1319, 1350], "i32": [1, 54, 123, 126, 130, 163, 165, 166, 259, 268, 321, 356, 357, 359, 378, 392, 421, 429, 431, 432, 433, 434, 435, 439, 462, 646, 737, 800, 810, 875, 924, 929, 959, 960, 962, 980, 1027, 1037, 1041, 1042, 1043, 1049, 1072, 1170, 1319, 1339, 1343, 1350], "i64": [1, 10, 13, 16, 17, 21, 27, 52, 53, 54, 55, 59, 60, 78, 98, 123, 124, 125, 126, 127, 128, 129, 130, 133, 136, 138, 145, 146, 150, 180, 182, 183, 184, 185, 187, 191, 192, 195, 196, 199, 200, 202, 203, 206, 207, 209, 210, 211, 212, 214, 216, 217, 219, 221, 223, 226, 227, 228, 230, 231, 232, 238, 239, 244, 245, 246, 247, 250, 251, 252, 253, 257, 259, 261, 264, 266, 267, 268, 270, 272, 274, 281, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 297, 298, 299, 300, 301, 303, 304, 305, 307, 308, 311, 314, 315, 321, 330, 332, 336, 346, 351, 352, 354, 355, 360, 362, 363, 364, 365, 366, 368, 371, 373, 381, 386, 389, 390, 391, 400, 406, 407, 408, 409, 410, 411, 414, 415, 428, 443, 449, 451, 452, 453, 454, 455, 456, 457, 467, 470, 472, 473, 475, 476, 477, 478, 480, 481, 483, 484, 486, 490, 492, 494, 495, 496, 497, 500, 501, 503, 504, 505, 506, 507, 510, 513, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 557, 559, 560, 580, 581, 582, 584, 585, 587, 589, 591, 592, 597, 601, 602, 605, 606, 607, 608, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 642, 644, 645, 646, 647, 652, 653, 654, 672, 681, 682, 696, 700, 705, 706, 708, 709, 710, 711, 712, 713, 717, 718, 719, 720, 722, 725, 732, 735, 738, 739, 740, 741, 746, 747, 748, 749, 750, 753, 756, 757, 758, 759, 760, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 778, 779, 781, 784, 788, 789, 790, 793, 794, 795, 796, 800, 806, 810, 826, 828, 829, 831, 832, 837, 838, 840, 843, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 859, 860, 861, 865, 866, 868, 869, 871, 872, 873, 875, 877, 879, 881, 882, 883, 885, 886, 887, 888, 889, 890, 891, 894, 897, 898, 900, 901, 903, 904, 905, 907, 908, 911, 914, 915, 924, 930, 934, 935, 936, 939, 958, 963, 965, 967, 968, 969, 971, 974, 992, 1006, 1007, 1013, 1014, 1015, 1016, 1017, 1018, 1034, 1059, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1084, 1085, 1086, 1088, 1089, 1093, 1094, 1096, 1101, 1103, 1112, 1126, 1134, 1135, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1146, 1149, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1161, 1162, 1164, 1165, 1172, 1177, 1185, 1191, 1193, 1196, 1197, 1198, 1199, 1200, 1201, 1203, 1206, 1209, 1213, 1217, 1218, 1220, 1223, 1224, 1226, 1231, 1232, 1278, 1284, 1289, 1291, 1296, 1304, 1305, 1310, 1319, 1328, 1329, 1331, 1335, 1336, 1337, 1338, 1339, 1341, 1344, 1345, 1347, 1348, 1350], "i8": [369, 370, 426, 429, 432, 434, 435, 436, 439, 441, 442, 446, 459, 460, 550, 646, 782, 785, 801, 810, 972, 973, 1020, 1032, 1035, 1045, 1046, 1052, 1056, 1069, 1070, 1163, 1202, 1224, 1307, 1319, 1343], "i_bitand_j": 1338, "i_bitand_op_j": 1338, "i_bitcount": 1338, "i_bitor_j": 1338, "i_bitor_op_j": 1338, "i_bitxor_j": 1338, "i_bitxor_op_j": 1338, "iceberg": [152, 822], "icon": [40, 321], "id": [26, 33, 40, 59, 133, 136, 141, 152, 228, 278, 285, 298, 307, 321, 620, 681, 682, 721, 810, 856, 898, 907, 924, 930, 1204, 1306, 1319, 1347, 1348, 1350], "id_char": 1350, "id_var": [237, 288, 321, 864, 890, 924], "ideal": 132, "ident": [33, 130, 184, 185, 321, 447, 619, 620, 810, 829, 830, 924, 1005, 1007, 1057, 1203, 1204, 1319], "identif": [141, 147], "identifi": [130, 138, 237, 244, 286, 288, 299, 321, 864, 888, 890, 924], "idiograph": 930, "idiomat": [806, 834, 841, 874, 893, 907, 924], "idx": [150, 212, 225, 298, 321, 357, 370, 551, 850, 898, 924, 973, 1164, 1248], "idx_lit": 1248, "idx_rx": 1248, "ieee": [719, 810], "if_set": [5, 30], "if_table_exist": [38, 321], "ifnul": 1340, "ignor": [39, 138, 165, 166, 170, 235, 271, 290, 321, 333, 335, 358, 378, 414, 444, 466, 468, 469, 521, 530, 593, 594, 657, 673, 727, 729, 741, 776, 794, 810, 891, 924, 930, 937, 938, 961, 980, 1020, 1054, 1079, 1081, 1082, 1134, 1143, 1181, 1182, 1235, 1251, 1319], "ignore_error": [136, 137, 146, 150, 154], "ignore_nul": [235, 271, 321, 333, 335, 358, 466, 468, 469, 530, 657, 673, 727, 729, 741, 776, 794, 810, 937, 938, 961, 1079, 1081, 1082, 1143, 1235, 1251, 1319], "ignore_spac": 930, "ij": 682, "ij67": 682, "ijkl": 1342, "ilmsuxu": [658, 666, 667, 670, 681, 682, 1236, 1244, 1245, 1248, 1259, 1260], "imbal": [466, 468, 469, 810, 1079, 1081, 1082, 1319], "imdb_scor": 1328, "immedi": [175, 611, 732, 736, 751, 752, 754, 755, 766, 767, 782, 785, 788, 792, 797, 798, 801, 810, 1195, 1319, 1329], "immut": [279, 321, 1300, 1319], "impact": [212, 321, 850, 924, 1328, 1347], "impl": 152, "implement": [45, 124, 138, 179, 213, 231, 307, 321, 324, 325, 489, 560, 584, 585, 587, 589, 591, 592, 706, 716, 772, 810, 907, 1100, 1172, 1218, 1220, 1302, 1319, 1324], "implic": [413, 810, 837, 924], "implicit": [290, 321, 891, 924], "implicitli": [203, 321, 476, 800, 810, 846, 924, 1347], "implod": [810, 1319, 1337], "import": [10, 16, 28, 35, 37, 39, 40, 41, 42, 45, 51, 66, 69, 123, 124, 127, 128, 136, 138, 139, 145, 146, 150, 156, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 183, 190, 191, 192, 195, 210, 212, 225, 227, 244, 246, 261, 268, 276, 278, 283, 288, 289, 291, 321, 324, 325, 379, 412, 413, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 467, 567, 568, 574, 601, 622, 624, 626, 628, 630, 632, 635, 637, 639, 737, 750, 751, 752, 753, 754, 755, 756, 789, 797, 798, 806, 810, 822, 828, 832, 836, 837, 838, 840, 850, 855, 860, 877, 890, 924, 981, 1008, 1010, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1080, 1110, 1113, 1115, 1116, 1205, 1228, 1292, 1319, 1324, 1329, 1344, 1347, 1350], "improv": [38, 49, 142, 153, 226, 321, 559, 810, 854, 924], "in_plac": [216, 265, 293, 321, 1196, 1225, 1232, 1319], "includ": [7, 20, 30, 37, 39, 40, 46, 56, 128, 138, 140, 141, 146, 147, 148, 150, 151, 152, 153, 154, 155, 166, 167, 175, 186, 190, 198, 203, 228, 244, 246, 256, 267, 283, 285, 289, 290, 321, 411, 446, 476, 480, 491, 497, 567, 608, 623, 625, 627, 629, 631, 633, 634, 636, 638, 681, 682, 686, 687, 690, 691, 737, 746, 786, 787, 810, 836, 846, 856, 882, 891, 924, 930, 1018, 1019, 1056, 1078, 1089, 1102, 1107, 1193, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1259, 1260, 1264, 1265, 1268, 1319, 1347], "include_bom": [37, 46, 321, 924], "include_boundari": [212, 321, 850, 924], "include_break": [411, 608, 810, 1018, 1193, 1319], "include_breakpoint": [491, 810, 1102, 1319], "include_categor": 930, "include_categori": [491, 810, 1102, 1319], "include_col": 166, "include_file_path": [141, 146, 147, 148, 150, 153, 154, 155], "include_head": [37, 40, 46, 137, 285, 321, 924], "include_index": 128, "include_init": 746, "include_kei": [244, 256, 321], "include_nul": [290, 321, 891, 924], "inclus": [180, 212, 253, 321, 450, 497, 621, 624, 626, 628, 630, 632, 635, 637, 639, 686, 687, 732, 751, 752, 754, 755, 766, 767, 797, 798, 810, 850, 873, 924, 1060, 1107, 1264, 1265, 1319], "incom": 138, "incompat": 117, "incomplet": [616, 810, 1200, 1319], "incorpor": 1347, "incorrect": [262, 321, 461, 559, 560, 644, 810, 878, 907, 924, 1071, 1221, 1319], "incorrectli": [136, 551], "increas": [40, 51, 136, 141, 147, 148, 155, 321, 410, 620, 810, 1017, 1204, 1319], "independ": [57, 58, 163, 166, 170, 283, 321, 647, 810, 831, 832, 842, 869, 880, 924], "index": [40, 105, 124, 128, 131, 136, 137, 142, 144, 146, 148, 150, 153, 154, 155, 158, 179, 206, 208, 212, 217, 222, 224, 246, 251, 253, 254, 255, 264, 266, 278, 279, 281, 288, 290, 291, 297, 298, 321, 331, 344, 345, 346, 348, 351, 352, 357, 365, 370, 467, 483, 484, 486, 493, 516, 517, 526, 527, 528, 544, 545, 551, 621, 624, 626, 628, 630, 632, 635, 637, 639, 643, 645, 652, 658, 666, 670, 672, 685, 696, 706, 735, 766, 769, 810, 848, 850, 873, 879, 881, 890, 891, 897, 898, 924, 930, 947, 948, 949, 950, 951, 954, 955, 960, 968, 973, 1080, 1093, 1094, 1104, 1121, 1129, 1130, 1139, 1140, 1141, 1157, 1158, 1164, 1185, 1218, 1219, 1223, 1231, 1244, 1248, 1250, 1263, 1274, 1319, 1324, 1337, 1342], "index_column": [212, 253, 321, 621, 810, 850, 873, 924], "index_of": [810, 1319], "indexord": [278, 279, 321], "indic": [37, 40, 41, 45, 46, 47, 48, 49, 65, 66, 68, 83, 98, 108, 134, 136, 137, 138, 141, 142, 144, 146, 147, 148, 150, 153, 154, 155, 163, 164, 170, 212, 253, 256, 262, 264, 276, 321, 347, 365, 483, 491, 498, 499, 500, 502, 503, 504, 505, 506, 507, 526, 544, 564, 565, 566, 567, 568, 569, 570, 621, 624, 626, 628, 630, 632, 635, 637, 639, 643, 645, 735, 736, 781, 810, 850, 873, 878, 879, 924, 928, 930, 968, 1093, 1102, 1110, 1111, 1113, 1114, 1115, 1116, 1117, 1118, 1139, 1157, 1218, 1219, 1223, 1295, 1319, 1350], "indistinguish": [37, 46, 321, 924], "individu": [40, 49, 175, 253, 278, 279, 283, 321, 560, 667, 709, 810, 831, 873, 924, 930, 1004, 1245, 1319], "inequ": [595, 810], "inexact": [159, 160, 161, 162], "inf": [163, 166, 170, 343, 411, 499, 502, 608, 719, 810, 946, 1010, 1018, 1110, 1113, 1170, 1188, 1193, 1307, 1319, 1344], "infer": [37, 41, 45, 46, 47, 48, 49, 67, 82, 98, 123, 125, 126, 127, 128, 129, 136, 137, 138, 141, 145, 146, 147, 148, 150, 153, 154, 155, 231, 321, 559, 560, 617, 674, 695, 697, 698, 699, 702, 756, 770, 785, 810, 924, 1172, 1201, 1252, 1273, 1275, 1276, 1277, 1280, 1319], "infer_schema": [136, 150], "infer_schema_length": [126, 129, 133, 136, 137, 138, 141, 145, 146, 147, 150, 154, 321, 674, 924, 1252], "inference_length": [699, 1277], "inference_s": [231, 321], "infin": [703, 719, 810, 1281], "infinit": [502, 719, 810, 1113, 1319], "influenc": [141, 860, 924], "influxdb": 138, "info": [140, 151, 152, 158], "inform": [19, 23, 37, 38, 41, 45, 46, 47, 48, 49, 56, 140, 146, 148, 150, 151, 152, 153, 154, 155, 159, 161, 177, 188, 190, 321, 325, 509, 560, 651, 658, 666, 667, 670, 681, 682, 810, 831, 836, 869, 924, 928, 932, 1000, 1122, 1230, 1236, 1244, 1245, 1248, 1259, 1260, 1319], "inherit": [254, 321, 413, 810, 837, 924], "init": [175, 1328], "initcap": 1340, "initi": [32, 33, 34, 40, 82, 175, 321, 746, 760, 800, 1347], "initialis": [69, 138, 175, 924], "inject": [40, 51, 321], "inlin": [24, 256, 321, 658, 666, 667, 670, 681, 682, 1236, 1244, 1245, 1248, 1259, 1260, 1337], "inner": [60, 78, 165, 226, 228, 290, 321, 358, 369, 415, 530, 550, 560, 614, 716, 789, 810, 854, 856, 891, 924, 961, 972, 1021, 1143, 1163, 1172, 1302, 1319, 1335, 1347], "inner_dtyp": [165, 168], "innermost": [165, 168], "innter": 960, "inprocessqueri": [831, 924], "input": [0, 51, 57, 98, 126, 128, 136, 137, 182, 192, 211, 228, 231, 235, 244, 246, 250, 259, 260, 264, 267, 271, 284, 295, 296, 300, 321, 330, 391, 393, 397, 400, 467, 470, 482, 497, 555, 559, 560, 572, 601, 615, 616, 648, 654, 672, 683, 685, 691, 692, 693, 694, 696, 698, 710, 718, 726, 728, 730, 732, 735, 738, 739, 740, 741, 749, 756, 758, 766, 767, 770, 771, 772, 774, 776, 779, 788, 792, 794, 800, 806, 810, 822, 826, 838, 849, 856, 871, 875, 876, 879, 882, 887, 894, 895, 900, 924, 928, 1006, 1080, 1107, 1168, 1169, 1172, 1191, 1199, 1200, 1223, 1227, 1250, 1263, 1274, 1276, 1319, 1341, 1342, 1344], "input_wildcard_expans": [810, 928], "insensit": [659, 667, 669, 671, 681, 682, 683, 930, 1236, 1237, 1245, 1247, 1248, 1249, 1259, 1260, 1261], "insensitive_match": [658, 670], "insert": [38, 136, 137, 142, 144, 146, 148, 150, 153, 154, 155, 217, 285, 287, 321, 643, 657, 673, 705, 810, 889, 924, 1219, 1235, 1251, 1283, 1319], "insert_aft": [40, 321], "insert_befor": [40, 321], "insert_chart": [40, 321], "insert_column": 321, "insid": [58, 559, 810, 832, 924], "inspect": [810, 924], "instal": [32, 33, 34, 102, 128, 136, 137, 139, 142, 144, 188, 280, 321, 418, 575, 737, 880, 924, 1024, 1301, 1319], "instanc": [37, 41, 45, 46, 47, 48, 49, 134, 136, 137, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 166, 170, 200, 205, 321, 572, 746, 760, 806, 822, 828, 860, 897, 898, 924, 1085, 1319], "instanti": [38, 40, 138, 168, 259, 277, 278, 295, 321, 875, 894, 924, 929, 1297, 1298, 1319], "instantli": [58, 832, 924], "instead": [37, 39, 43, 44, 51, 58, 59, 125, 126, 129, 136, 137, 138, 141, 147, 148, 150, 155, 156, 163, 164, 165, 166, 170, 181, 182, 210, 223, 224, 227, 231, 237, 242, 244, 254, 255, 256, 259, 260, 261, 264, 278, 279, 280, 284, 296, 297, 321, 324, 325, 346, 365, 391, 392, 395, 396, 411, 425, 450, 467, 470, 480, 544, 574, 608, 615, 645, 657, 665, 676, 677, 690, 691, 692, 693, 694, 705, 718, 725, 732, 734, 736, 743, 751, 752, 754, 755, 756, 766, 767, 782, 785, 788, 789, 792, 797, 798, 801, 810, 825, 826, 832, 842, 855, 864, 875, 876, 877, 879, 887, 895, 896, 897, 899, 924, 930, 949, 968, 977, 993, 997, 998, 1018, 1031, 1039, 1040, 1060, 1080, 1099, 1157, 1193, 1199, 1218, 1220, 1223, 1232, 1235, 1243, 1254, 1255, 1268, 1269, 1270, 1283, 1300, 1301, 1319, 1324, 1328, 1329, 1333, 1347, 1348], "int": [10, 12, 13, 14, 17, 25, 26, 37, 38, 40, 41, 45, 46, 47, 48, 49, 53, 60, 67, 126, 129, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 182, 184, 190, 198, 201, 202, 206, 208, 210, 213, 214, 215, 217, 222, 224, 225, 227, 230, 231, 241, 242, 251, 253, 254, 257, 263, 264, 266, 269, 272, 277, 281, 284, 289, 292, 294, 297, 298, 304, 315, 321, 330, 353, 357, 365, 367, 370, 372, 373, 390, 391, 410, 414, 418, 443, 466, 468, 469, 473, 474, 475, 481, 483, 484, 486, 489, 490, 491, 513, 519, 521, 526, 527, 528, 529, 539, 544, 545, 547, 549, 550, 551, 553, 600, 602, 605, 606, 608, 611, 614, 617, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 647, 652, 656, 666, 672, 674, 679, 680, 681, 685, 687, 688, 696, 699, 700, 705, 713, 717, 718, 724, 726, 732, 742, 744, 750, 753, 756, 762, 764, 766, 767, 781, 782, 785, 786, 787, 791, 792, 795, 796, 799, 801, 810, 826, 829, 836, 844, 845, 848, 851, 855, 859, 869, 879, 881, 884, 886, 887, 892, 893, 897, 898, 899, 904, 915, 924, 929, 930, 947, 948, 956, 960, 968, 970, 973, 975, 992, 993, 1004, 1005, 1011, 1017, 1020, 1021, 1024, 1053, 1078, 1079, 1081, 1082, 1086, 1087, 1088, 1093, 1094, 1100, 1101, 1102, 1104, 1121, 1125, 1126, 1132, 1134, 1139, 1140, 1141, 1142, 1152, 1157, 1158, 1160, 1162, 1163, 1164, 1166, 1178, 1179, 1181, 1182, 1185, 1187, 1188, 1191, 1192, 1193, 1195, 1201, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1222, 1223, 1226, 1231, 1234, 1244, 1250, 1252, 1257, 1258, 1259, 1263, 1265, 1266, 1274, 1277, 1278, 1283, 1290, 1291, 1297, 1304, 1309, 1319, 1331, 1334, 1347, 1350], "int16": [1, 54, 283, 321, 408, 409, 441, 712, 810, 930, 1015, 1016, 1051, 1290, 1297, 1319], "int32": [1, 40, 54, 59, 123, 126, 163, 165, 166, 212, 225, 253, 278, 321, 356, 357, 359, 378, 392, 421, 431, 432, 433, 434, 439, 462, 467, 621, 624, 626, 628, 630, 632, 635, 637, 639, 716, 785, 810, 850, 873, 924, 929, 930, 956, 959, 960, 962, 980, 1027, 1037, 1041, 1042, 1043, 1049, 1072, 1080, 1170, 1302, 1303, 1319], "int64": [1, 39, 40, 53, 54, 59, 60, 82, 100, 136, 145, 186, 196, 205, 212, 245, 253, 258, 259, 273, 280, 321, 351, 352, 354, 355, 360, 361, 362, 363, 364, 365, 366, 367, 368, 371, 372, 408, 409, 451, 452, 453, 454, 455, 456, 457, 461, 467, 470, 559, 560, 586, 588, 590, 605, 613, 621, 624, 626, 628, 630, 632, 635, 637, 639, 674, 700, 712, 716, 732, 739, 758, 766, 767, 770, 785, 792, 806, 810, 833, 841, 850, 868, 873, 874, 875, 924, 930, 954, 955, 957, 958, 963, 964, 965, 966, 967, 968, 969, 970, 971, 974, 975, 1015, 1016, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1071, 1073, 1080, 1172, 1197, 1278, 1290, 1300, 1301, 1302, 1303, 1319], "int64arrai": [1294, 1319], "int8": [1, 54, 82, 205, 321, 369, 370, 408, 409, 426, 429, 435, 436, 442, 446, 459, 460, 550, 712, 782, 785, 801, 810, 929, 972, 973, 1015, 1016, 1020, 1032, 1035, 1045, 1046, 1052, 1056, 1069, 1070, 1163, 1202, 1290, 1300, 1307, 1319], "int_rang": [212, 289, 298, 307, 321, 732, 769, 788, 850, 860, 898, 907, 924], "integ": [37, 40, 46, 65, 66, 68, 73, 74, 75, 76, 77, 83, 84, 85, 86, 87, 157, 164, 166, 169, 171, 195, 212, 253, 276, 279, 321, 334, 399, 446, 479, 480, 600, 606, 608, 613, 620, 621, 633, 672, 696, 700, 726, 732, 762, 766, 767, 785, 810, 840, 850, 873, 924, 930, 1003, 1056, 1092, 1191, 1193, 1197, 1204, 1211, 1218, 1250, 1274, 1278, 1300, 1319, 1341, 1347, 1350], "integer_list": 78, "integr": [40, 283, 321, 624, 626, 628, 630, 632, 635, 637, 639, 810, 1350], "intend": [1, 159, 160, 161, 162, 705, 1283], "intens": [231, 307, 321, 601, 810, 1172, 1319], "interact": [166, 170, 190, 321, 324, 836, 924, 1319, 1324], "interchang": [124, 179], "interest": [137, 447, 450, 1057, 1060], "interfac": [0, 113, 114, 178, 822, 933, 1347], "interleav": 1342, "intermedi": [218, 321, 853, 924, 1350], "intern": [41, 42, 138, 157, 224, 273, 321, 480, 810, 1294, 1319, 1329], "interoper": [177, 932], "interpol": [190, 248, 313, 321, 475, 496, 563, 609, 631, 632, 783, 810, 836, 870, 913, 924, 1019, 1106, 1194, 1210, 1319, 1336], "interpolate_bi": [810, 1319], "interpolationmethod": [495, 810, 1105, 1319], "interpret": [127, 129, 136, 137, 150, 321, 378, 924, 980], "intersect": [40, 321, 541, 930, 1154, 1346], "interv": [212, 253, 291, 321, 411, 445, 458, 491, 497, 608, 621, 624, 626, 628, 630, 632, 635, 637, 639, 751, 752, 754, 755, 797, 798, 810, 850, 873, 924, 1018, 1032, 1034, 1035, 1041, 1043, 1045, 1046, 1049, 1051, 1052, 1055, 1059, 1068, 1069, 1102, 1107, 1193, 1319, 1336], "intoexpr": [182, 211, 212, 253, 259, 260, 264, 267, 284, 295, 296, 300, 321, 336, 354, 374, 377, 380, 391, 418, 443, 467, 473, 483, 491, 493, 496, 497, 520, 540, 541, 542, 543, 601, 615, 616, 624, 626, 628, 630, 632, 635, 637, 639, 643, 645, 654, 659, 669, 671, 683, 686, 687, 688, 690, 691, 692, 693, 694, 710, 718, 728, 730, 735, 738, 739, 740, 741, 742, 744, 746, 749, 753, 760, 774, 776, 779, 785, 788, 792, 794, 810, 826, 849, 850, 873, 875, 876, 879, 882, 887, 894, 895, 900, 924, 928, 957, 976, 979, 982, 1024, 1080, 1086, 1104, 1106, 1107, 1133, 1199, 1200, 1219, 1223, 1249, 1264, 1265, 1266, 1268, 1269, 1270, 1271, 1272, 1319], "intoexprcolumn": [203, 217, 321, 353, 357, 358, 365, 390, 391, 400, 445, 473, 476, 519, 527, 530, 539, 544, 602, 606, 642, 645, 666, 672, 675, 685, 696, 700, 705, 717, 718, 732, 737, 751, 752, 754, 755, 766, 767, 797, 798, 800, 810, 846, 879, 924, 956, 960, 961, 968, 1006, 1055, 1068, 1086, 1132, 1140, 1143, 1152, 1157, 1188, 1244, 1250, 1253, 1263, 1274, 1283, 1319], "introduc": [50, 91, 695, 697, 698, 1273, 1275, 1276], "introduct": 1346, "intuit": [480, 810, 930], "invalid": [37, 46, 114, 136, 137, 150, 183, 321, 392, 674, 675, 700, 719, 810, 924, 977, 993, 1252, 1253, 1278, 1319], "invalid_valu": 977, "invalidoperationerror": [616, 810, 1200, 1319, 1345], "invari": [860, 924], "invers": [338, 339, 340, 341, 342, 343, 810, 941, 942, 943, 944, 945, 946, 1300, 1319, 1344], "invert": 930, "invok": [175, 559, 810], "involv": [203, 321, 846, 924], "io": [35, 37, 40, 41, 42, 45, 134, 136, 142, 143, 144, 145, 146, 149, 150, 152, 153, 154, 191, 261, 321, 413, 482, 574, 810, 837, 877, 924], "iobas": [43, 44, 145, 146, 191, 261, 321, 413, 574, 578, 810, 837, 877, 924], "ipc": [41, 42, 47, 142, 143, 144, 153, 156, 321, 822, 924], "ipccompress": [41, 42, 321], "is_between": [810, 1319], "is_dupl": [321, 810, 1319], "is_elementwis": [559, 810, 928], "is_empti": [321, 1319], "is_finit": [810, 1319], "is_first_distinct": [810, 1319], "is_in": [100, 203, 321, 810, 1319], "is_infinit": [810, 1319], "is_last_distinct": [810, 1319], "is_nan": [194, 321, 810, 839, 924, 1319], "is_not_nan": [810, 1319], "is_not_nul": [810, 1319], "is_nul": [195, 321, 810, 840, 924, 1319], "is_numer": 1350, "is_odd": [259, 321, 875, 924, 930], "is_selector": 930, "is_sort": 1319, "is_uniqu": [321, 810, 1319], "isn": 800, "iso": [431, 450, 459, 460, 1037, 1060, 1069, 1070, 1342], "iso8601": [136, 137, 150, 450, 1060], "iso_lang": 1342, "iso_year": 462, "isodow": 1343, "isoweek": 1343, "isoyear": 1343, "issu": [93, 94, 97, 98, 101, 108, 110, 121, 136, 137, 138, 150, 321, 408, 409, 712, 810, 1015, 1016, 1290, 1319, 1347], "ital": [40, 321], "item": [13, 59, 137, 210, 254, 257, 321, 353, 357, 358, 414, 472, 519, 521, 528, 530, 539, 642, 688, 810, 956, 960, 961, 1020, 1084, 1132, 1134, 1141, 1143, 1152, 1217, 1266, 1319], "iter": [57, 58, 59, 69, 123, 126, 138, 169, 171, 182, 192, 203, 211, 212, 223, 224, 225, 228, 253, 254, 255, 256, 259, 260, 267, 284, 285, 295, 296, 299, 300, 321, 391, 410, 418, 476, 601, 654, 710, 718, 728, 730, 735, 737, 738, 739, 740, 741, 749, 774, 776, 779, 788, 792, 794, 800, 806, 810, 826, 838, 846, 849, 850, 856, 873, 875, 876, 882, 887, 894, 895, 900, 924, 928, 929, 930, 1017, 1024, 1089, 1218, 1319, 1350], "iter_batch": 138, "iter_column": 321, "iter_row": [225, 254, 255, 256, 321], "iter_slic": 321, "its": [70, 92, 130, 158, 198, 279, 321, 422, 445, 458, 467, 559, 619, 654, 709, 800, 810, 834, 841, 893, 924, 1000, 1028, 1055, 1068, 1078, 1080, 1203, 1300, 1319, 1349], "itself": [164, 321, 324, 325, 560, 623, 625, 627, 629, 631, 633, 634, 636, 638, 786, 787, 810, 858, 924, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1319, 1324, 1328, 1329, 1347], "ix": [246, 321], "j": [285, 321, 1338], "jax": [278, 321, 1298, 1319], "jax_enable_x64": [278, 321], "jaxexporttyp": [278, 321], "jjk": 930, "jkl": [667, 1245], "jklmn": 1342, "job": [827, 924], "join": [46, 47, 48, 49, 50, 51, 57, 58, 59, 91, 203, 227, 228, 290, 321, 476, 495, 601, 657, 789, 810, 831, 832, 842, 846, 855, 856, 869, 880, 891, 896, 924, 1235, 1329, 1331, 1337, 1346, 1347], "join_asof": [226, 321, 854, 924], "join_nul": [226, 321, 854, 924], "join_wher": [321, 924], "joinstrategi": [51, 226, 321, 854, 924], "joinvalid": [226, 321, 854, 924], "jpy": 1350, "json": [2, 3, 5, 6, 43, 44, 133, 145, 146, 152, 154, 191, 261, 321, 413, 482, 574, 578, 674, 675, 707, 810, 822, 837, 877, 924, 928, 1252, 1253, 1286], "json_path": [675, 1253], "json_path_match": [674, 1252], "json_stat": 5, "json_str": [145, 146], "json_val": [675, 1253], "jsonpath": [674, 675, 1252, 1253], "jst": [130, 930], "jul": [695, 1273, 1342], "juli": [1060, 1342, 1343], "just": [40, 128, 138, 150, 237, 288, 321, 864, 890, 924, 930], "k": [182, 256, 284, 285, 321, 390, 391, 405, 509, 717, 718, 810, 826, 887, 924, 992, 1012, 1122, 1304, 1319], "k_2": [651, 810, 1230, 1319], "k_3": [651, 810, 1230, 1319], "kadokawa": [678, 1256], "kanji": 930, "karen": [246, 321], "kathmandu": [1030, 1031, 1058], "kb": [198, 321, 379, 981, 1078, 1319], "kde": [1319, 1324], "keep": [51, 136, 137, 146, 150, 153, 154, 203, 286, 290, 291, 321, 482, 559, 577, 585, 615, 738, 810, 846, 888, 891, 924, 1199, 1319], "kei": [37, 40, 41, 45, 46, 47, 48, 49, 51, 56, 59, 146, 148, 150, 152, 153, 154, 155, 180, 212, 224, 226, 227, 238, 244, 250, 252, 255, 256, 290, 321, 476, 560, 615, 616, 683, 751, 754, 792, 810, 850, 854, 855, 865, 871, 872, 891, 924, 930, 934, 1199, 1200, 1261, 1319, 1335], "kept": [286, 321, 888, 924], "keyerror": 16, "keystrok": 806, "keyword": [39, 140, 148, 151, 166, 170, 188, 211, 245, 254, 259, 260, 280, 295, 296, 300, 321, 476, 605, 710, 788, 792, 800, 810, 849, 868, 875, 876, 894, 895, 900, 924, 1301, 1319, 1332], "kl": 682, "kleen": [333, 335, 727, 728, 729, 730, 810, 937, 938, 1319], "klmnoopqrstuvwxyz": [225, 321], "knight": 1328, "know": [51, 138, 246, 288, 321, 551, 559, 810, 890, 924], "known": [142, 370, 551, 907, 973, 1164], "kurtosi": [810, 1319], "kuzu_db_conn": 138, "kwarg": [31, 32, 36, 50, 61, 62, 64, 65, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 83, 84, 85, 86, 87, 88, 135, 138, 139, 166, 168, 170, 188, 203, 245, 280, 321, 324, 605, 810, 846, 868, 899, 924, 928, 1301, 1319, 1324, 1332, 1347], "k\u00f9zudb": 138, "l1": 59, "l2": 59, "label": [212, 278, 283, 321, 324, 325, 411, 608, 622, 623, 625, 627, 629, 631, 634, 636, 638, 810, 850, 869, 924, 1018, 1193, 1205, 1206, 1207, 1208, 1209, 1210, 1212, 1213, 1214, 1319, 1324], "label_column": [283, 321], "labelangl": [321, 324, 1319, 1324], "lag": [264, 321, 365, 544, 645, 740, 810, 879, 924, 968, 1157, 1223, 1319], "lake": [39, 140, 151, 321, 822], "lambda": [150, 205, 231, 245, 246, 250, 307, 321, 370, 468, 469, 551, 559, 560, 585, 586, 746, 747, 760, 771, 772, 784, 810, 860, 868, 871, 907, 924, 973, 1081, 1082, 1164, 1172, 1319], "land": [418, 1024], "languag": [150, 212, 227, 253, 291, 321, 440, 445, 458, 467, 621, 624, 626, 628, 630, 632, 635, 637, 639, 751, 752, 754, 755, 797, 798, 810, 850, 855, 873, 924, 1050, 1055, 1068, 1080, 1319], "larg": [10, 11, 14, 51, 138, 141, 147, 155], "large_str": [225, 273, 280, 321], "larger": [10, 46, 47, 48, 49, 57, 58, 480, 742, 810, 831, 832, 924], "largest": [182, 284, 321, 391, 717, 718, 810, 826, 887, 924, 1304, 1319], "last": [39, 146, 150, 153, 154, 159, 160, 161, 162, 214, 227, 230, 246, 256, 267, 272, 279, 286, 315, 321, 346, 357, 366, 410, 426, 437, 441, 459, 481, 503, 528, 546, 549, 551, 584, 585, 587, 589, 591, 592, 616, 653, 654, 672, 688, 696, 713, 735, 795, 806, 810, 855, 882, 886, 888, 915, 924, 930, 949, 960, 969, 1017, 1032, 1047, 1051, 1069, 1101, 1114, 1126, 1141, 1159, 1162, 1200, 1232, 1250, 1266, 1274, 1291, 1300, 1319, 1340, 1342], "last_column": [40, 321], "later": [227, 261, 321, 574, 855, 877, 924], "latest": [32, 124, 140, 151, 179, 443, 444, 572, 695, 698, 753, 1053, 1054, 1273, 1276], "latt": 930, "latter": [40, 200, 321, 1085, 1319], "lazi": [1, 59, 150, 166, 227, 245, 246, 268, 321, 560, 762, 782, 785, 801, 810, 836, 854, 855, 896, 900, 901, 903, 905, 907, 908, 909, 910, 911, 912, 913, 914, 924, 930, 1328, 1329, 1330, 1331, 1332, 1334, 1347, 1350], "lazili": [136, 137, 150, 151, 152, 153, 154, 155, 832, 924], "lazy_fram": [57, 58], "lazyfram": [0, 1, 51, 52, 53, 54, 55, 57, 58, 59, 150, 151, 152, 153, 154, 155, 156, 159, 160, 166, 186, 191, 229, 245, 246, 261, 268, 321, 413, 476, 551, 574, 788, 789, 810, 822, 921, 922, 923, 929, 930, 1328, 1329, 1332, 1334, 1347, 1348, 1350], "lazygroupbi": [849, 850, 873, 924], "lbl": [278, 283, 321], "ldf": [1, 900, 901, 903, 905, 908, 909, 910, 911, 912, 913, 914], "ldot": [467, 810, 1080, 1319], "le": [663, 810, 1319], "lead": [14, 45, 130, 156, 235, 262, 264, 271, 321, 365, 483, 486, 544, 551, 559, 560, 644, 645, 690, 692, 742, 776, 794, 810, 860, 878, 879, 907, 924, 968, 1157, 1172, 1221, 1223, 1268, 1270, 1319], "leap": [430, 440, 1036, 1050], "leap_year": 430, "learn": [283, 321], "least": [104, 246, 321, 387, 388, 602, 666, 668, 810, 989, 990, 1188, 1244, 1246, 1319, 1340], "leav": [6, 237, 288, 321, 551, 864, 890, 924], "left": [15, 16, 40, 51, 159, 160, 161, 162, 212, 226, 227, 253, 290, 321, 411, 466, 467, 468, 469, 495, 497, 608, 621, 624, 626, 628, 630, 632, 635, 637, 639, 643, 716, 738, 746, 747, 751, 752, 754, 755, 760, 784, 797, 798, 800, 810, 850, 854, 855, 873, 891, 924, 1018, 1079, 1080, 1081, 1082, 1107, 1193, 1219, 1302, 1319, 1331, 1335, 1340], "left_clos": [411, 608, 810, 1018, 1193, 1319], "left_on": [226, 227, 290, 321, 854, 855, 891, 924], "left_right": [226, 321, 854, 924], "leftmost": [643, 810, 1219, 1319, 1342], "len": [12, 40, 166, 170, 186, 225, 246, 298, 302, 307, 321, 404, 560, 571, 573, 619, 743, 766, 810, 833, 893, 898, 902, 907, 924, 929, 1011, 1203, 1319], "len_byt": [12, 396, 677, 678, 998, 1255], "len_char": [395, 676, 997, 1254], "length": [59, 60, 78, 141, 147, 150, 164, 168, 210, 212, 253, 266, 321, 324, 395, 410, 445, 458, 545, 551, 572, 615, 616, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 652, 672, 676, 677, 679, 680, 683, 685, 696, 705, 739, 782, 785, 786, 787, 801, 810, 850, 869, 873, 881, 924, 928, 997, 1004, 1017, 1028, 1055, 1068, 1158, 1164, 1185, 1199, 1200, 1203, 1205, 1206, 1207, 1208, 1209, 1210, 1212, 1213, 1214, 1231, 1250, 1254, 1255, 1257, 1258, 1261, 1263, 1274, 1283, 1319, 1336, 1337, 1340], "leq": [466, 468, 469, 810, 1079, 1081, 1082, 1319], "less": [150, 227, 321, 480, 511, 558, 559, 688, 810, 855, 924, 1266, 1350], "letter": [199, 304, 315, 321, 470, 659, 667, 669, 671, 683, 703, 758, 810, 843, 904, 915, 924, 930, 1237, 1245, 1247, 1249, 1261, 1281, 1342], "level": [10, 40, 41, 42, 45, 49, 133, 150, 153, 154, 155, 205, 231, 242, 268, 273, 321, 325, 476, 810, 822, 883, 924, 1294, 1319, 1347], "lexic": [63, 930, 1001], "lf": [46, 47, 48, 49, 54, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 857, 858, 859, 860, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 877, 879, 880, 881, 882, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 896, 897, 898, 902, 906, 924, 1336, 1347, 1350], "lf1": [789, 883, 924, 1332, 1334, 1348], "lf2": [789, 883, 924, 1332, 1334, 1348], "lf3": [924, 1332], "lf4": [924, 1332], "lf5": 924, "lf6": 924, "lf_other": [896, 924], "lib": [810, 1294, 1319], "librari": [1, 106, 138, 141, 559, 810, 928, 1350], "life": [466, 468, 469, 810, 1079, 1081, 1082, 1319], "lifetim": [175, 821, 1334], "light": [40, 321], "like": [35, 37, 39, 41, 42, 43, 44, 45, 58, 124, 134, 136, 137, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 191, 212, 219, 221, 226, 256, 261, 278, 279, 321, 324, 413, 419, 482, 523, 559, 577, 611, 666, 691, 692, 723, 806, 810, 827, 832, 837, 850, 924, 928, 1025, 1136, 1195, 1244, 1308, 1319, 1324], "limit": [10, 11, 49, 138, 139, 172, 202, 321, 373, 475, 481, 810, 845, 924, 1088, 1319, 1337, 1346], "line": [10, 20, 40, 136, 137, 141, 150, 210, 219, 221, 321, 324, 666, 1244, 1319, 1324], "line_termin": [37, 46, 321, 924], "linear": [190, 218, 248, 313, 321, 495, 496, 518, 563, 609, 631, 632, 740, 741, 783, 810, 836, 853, 870, 913, 924, 1019, 1105, 1106, 1131, 1194, 1210, 1319], "lineitem": [132, 137, 139], "list": [1, 13, 33, 39, 40, 51, 52, 54, 57, 58, 60, 66, 82, 98, 123, 125, 126, 127, 129, 130, 132, 134, 136, 137, 139, 140, 141, 142, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 164, 165, 166, 170, 187, 192, 196, 198, 199, 203, 209, 211, 212, 216, 224, 241, 244, 253, 254, 255, 256, 259, 267, 274, 275, 283, 285, 286, 287, 289, 295, 300, 301, 321, 331, 358, 369, 370, 371, 411, 418, 472, 478, 483, 492, 501, 559, 560, 572, 573, 601, 608, 614, 617, 622, 623, 625, 627, 629, 631, 634, 636, 638, 653, 654, 665, 667, 669, 671, 686, 706, 708, 709, 716, 735, 737, 740, 751, 752, 754, 755, 757, 765, 767, 770, 772, 790, 792, 798, 806, 810, 834, 841, 843, 846, 849, 850, 875, 882, 888, 889, 894, 896, 900, 901, 924, 929, 930, 961, 972, 973, 974, 1004, 1018, 1024, 1078, 1084, 1093, 1096, 1102, 1103, 1112, 1172, 1193, 1201, 1205, 1206, 1207, 1208, 1209, 1210, 1212, 1213, 1214, 1237, 1243, 1245, 1247, 1249, 1261, 1264, 1299, 1302, 1319, 1328, 1333, 1337, 1339, 1349, 1350], "list_of_seri": 772, "listtostructwidthstrategi": [551, 1164], "lit": [1, 332, 374, 497, 568, 584, 670, 739, 740, 746, 760, 782, 785, 801, 810, 1088, 1319], "liter": [15, 16, 20, 37, 39, 41, 45, 46, 47, 48, 49, 138, 146, 148, 150, 153, 154, 155, 169, 170, 171, 241, 259, 260, 264, 290, 295, 296, 321, 332, 374, 393, 397, 400, 422, 443, 464, 465, 473, 480, 485, 487, 497, 511, 558, 568, 580, 582, 595, 596, 606, 615, 616, 658, 659, 660, 669, 670, 671, 681, 682, 683, 710, 711, 719, 728, 730, 732, 738, 739, 740, 741, 749, 750, 753, 766, 770, 774, 776, 779, 788, 792, 794, 796, 810, 845, 875, 876, 879, 891, 894, 895, 924, 930, 976, 1006, 1028, 1053, 1076, 1086, 1107, 1184, 1199, 1200, 1218, 1220, 1223, 1236, 1237, 1238, 1247, 1248, 1249, 1259, 1260, 1261, 1319, 1342], "littl": [255, 321, 378, 980], "lmn": 930, "ln": [466, 467, 468, 469, 810, 1079, 1080, 1081, 1082, 1319, 1340], "ln_a": 1341, "load": [3, 5, 6, 126, 128, 138, 140, 141, 147, 151, 152, 169, 171, 321, 810, 822, 924, 928, 1350], "load_from_fil": [2, 5, 6], "load_sheet_by_nam": 141, "load_tabl": 141, "load_workbook": 141, "loader": [283, 321], "lobster": [670, 1248], "loc": [321, 325], "local": [4, 39, 138, 140, 151, 152, 155, 321, 458, 603, 604, 810, 996, 1000, 1030, 1031, 1055, 1058, 1068, 1189, 1190, 1319, 1329], "localhost": 138, "localis": [445, 458, 1068], "locat": [40, 148, 150, 153, 155, 200, 251, 281, 287, 321, 643, 810, 889, 924, 1085, 1093, 1218, 1219, 1319], "lock": 172, "log": [29, 53, 391, 463, 556, 582, 606, 718, 810, 1074, 1319, 1340], "log10": [810, 1319, 1340], "log10_a": 1341, "log16_a": 1341, "log1p": [810, 1319, 1340], "log1p_a": 1341, "log2": 1340, "logarithm": [554, 555, 556, 810, 1167, 1168, 1169, 1319, 1341], "logic": [59, 231, 307, 321, 324, 325, 333, 335, 413, 560, 716, 727, 728, 729, 730, 772, 810, 837, 842, 854, 877, 907, 924, 937, 938, 1172, 1300, 1302, 1319, 1324], "london": [423, 427, 444, 1029, 1033, 1054], "london_timezon": [444, 1054], "london_to_amsterdam": [444, 1054], "long": [199, 237, 246, 288, 289, 321, 378, 843, 864, 890, 924, 980], "longer": [136, 137, 150], "longest": 551, "look": [10, 212, 321, 374, 551, 850, 924, 976], "lookup": 806, "loop": [560, 810], "lose": [420, 1026], "lossi": [136, 137, 150], "love": [659, 683, 1237, 1261], "low": [17, 138, 400, 608, 810, 1193, 1319], "low_memori": [136, 137, 146, 148, 150, 154, 155], "lower": [150, 190, 212, 248, 313, 321, 400, 497, 557, 585, 609, 613, 631, 632, 732, 751, 752, 754, 755, 783, 797, 798, 810, 836, 850, 870, 913, 924, 1006, 1019, 1107, 1170, 1194, 1197, 1210, 1307, 1319, 1337, 1340], "lower_bound": [212, 321, 400, 497, 810, 850, 924, 1006, 1107, 1307, 1319], "lowercas": [591, 701, 703, 1279, 1281, 1342], "lowest": [557, 810], "lru_cach": [231, 321, 560, 810, 1172, 1319], "lst": 165, "lt": [158, 476, 725, 810, 1319], "ltrim": 1340, "lyric": [659, 683, 1237, 1261], "lz4": [41, 42, 45, 47, 49, 321, 924], "lzo": [45, 49, 321, 924], "m": [66, 68, 226, 321, 419, 420, 422, 427, 428, 447, 449, 450, 461, 666, 695, 697, 698, 702, 753, 754, 755, 756, 762, 854, 924, 930, 1025, 1026, 1028, 1033, 1034, 1057, 1059, 1060, 1071, 1244, 1273, 1275, 1276, 1280, 1332, 1342, 1343], "m_2": [651, 810, 1230, 1319], "m_3": [651, 810, 1230, 1319], "m_i": [651, 810, 1230, 1319], "machin": 1350, "maco": 158, "made": [40, 138, 321, 450, 1060], "mai": [1, 31, 32, 33, 34, 37, 39, 41, 45, 46, 47, 48, 49, 57, 58, 59, 67, 69, 73, 123, 125, 126, 127, 129, 133, 134, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 161, 163, 164, 166, 167, 168, 169, 170, 171, 175, 190, 191, 198, 200, 212, 226, 227, 228, 231, 253, 261, 268, 278, 280, 283, 289, 290, 291, 321, 324, 325, 395, 410, 411, 413, 418, 419, 420, 431, 440, 445, 447, 458, 470, 491, 526, 551, 559, 560, 571, 574, 608, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 669, 671, 674, 676, 682, 737, 739, 746, 747, 751, 752, 754, 755, 760, 784, 786, 787, 797, 798, 810, 831, 832, 836, 837, 842, 850, 854, 855, 856, 860, 873, 877, 883, 891, 897, 898, 907, 924, 997, 1000, 1001, 1017, 1018, 1019, 1024, 1025, 1026, 1037, 1050, 1055, 1057, 1068, 1078, 1085, 1102, 1139, 1172, 1193, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1247, 1249, 1252, 1254, 1298, 1301, 1303, 1319, 1324, 1350], "main": [158, 832, 924], "maintain": [46, 47, 48, 49, 267, 321, 371, 552, 643, 654, 720, 735, 810, 836, 882, 924, 974, 1165, 1219, 1305, 1319], "maintain_ord": [46, 47, 48, 49, 211, 226, 244, 246, 267, 286, 291, 301, 303, 305, 308, 309, 310, 311, 312, 313, 314, 321, 331, 371, 381, 386, 389, 391, 483, 486, 552, 560, 654, 718, 720, 735, 810, 832, 842, 849, 854, 869, 880, 882, 888, 901, 903, 905, 908, 909, 910, 911, 912, 913, 914, 924, 974, 1165, 1305, 1319], "maintainorderjoin": [226, 321, 854, 924], "major": [141, 278, 321], "make": [40, 59, 82, 123, 128, 136, 137, 140, 141, 142, 144, 148, 151, 238, 242, 249, 279, 291, 321, 324, 468, 469, 491, 591, 592, 601, 614, 687, 810, 865, 924, 928, 1081, 1082, 1102, 1265, 1300, 1319], "man": [684, 1262], "manag": [50, 90, 91, 821, 822, 1334, 1347], "mandatori": [40, 321], "mango": [393, 397, 663, 689, 994, 999, 1241, 1267], "mani": [138, 139, 155, 200, 321, 669, 671, 683, 1085, 1247, 1249, 1261, 1319, 1323], "manner": 138, "many_to_mani": [226, 321, 854, 924], "many_to_on": [226, 321, 854, 924], "map": [82, 125, 126, 136, 137, 138, 139, 142, 143, 148, 149, 150, 153, 166, 183, 186, 204, 224, 231, 250, 254, 255, 256, 258, 274, 321, 332, 445, 458, 559, 560, 584, 586, 587, 589, 591, 592, 615, 616, 683, 723, 771, 810, 828, 871, 874, 924, 929, 930, 1019, 1055, 1068, 1172, 1199, 1200, 1261, 1308, 1319, 1329, 1331, 1332, 1347], "map_": 110, "map_batch": [810, 924], "map_el": [101, 231, 321, 559, 726, 810, 1319], "map_field": [588, 590], "map_row": 321, "mapelementsstrategi": [560, 810], "mapping_strategi": [601, 810], "march": [447, 1057], "mariadb": 139, "mark": [40, 133, 321, 392, 810, 993, 1319], "mark_area": [1319, 1324], "mark_attr": [321, 324, 1319, 1324], "mark_bar": [321, 324, 1319, 1324], "mark_lin": [321, 324], "mark_point": [321, 324], "markdown": [7, 20, 175], "marker": [40, 321], "mask": [155, 166, 170, 219, 221, 321, 375, 498, 500, 503, 508, 603, 604, 658, 661, 670, 810, 977, 1089, 1107, 1108, 1111, 1114, 1120, 1189, 1190, 1220, 1236, 1239, 1248, 1310, 1319], "mass": [466, 468, 469, 810, 1079, 1081, 1082, 1319], "massag": [237, 288, 321, 864, 890, 924], "match": [39, 40, 59, 66, 112, 123, 125, 126, 127, 129, 136, 138, 145, 146, 148, 154, 155, 159, 160, 161, 162, 183, 202, 226, 227, 254, 290, 321, 393, 397, 567, 568, 569, 615, 616, 633, 658, 659, 660, 663, 666, 667, 669, 670, 671, 674, 675, 681, 682, 683, 689, 695, 697, 698, 800, 806, 810, 828, 845, 854, 855, 891, 924, 930, 994, 999, 1077, 1199, 1200, 1211, 1236, 1237, 1238, 1241, 1244, 1245, 1247, 1248, 1249, 1252, 1253, 1259, 1260, 1261, 1267, 1273, 1275, 1276, 1319, 1342], "matches_overlap": [669, 671, 1249], "matches_supertyp": [202, 321, 845, 924], "materi": [231, 256, 307, 321, 831, 869, 907, 917, 924, 930, 1172, 1319], "materialis": [224, 225, 254, 255, 321], "math": [1, 10, 55, 246, 321, 412, 810, 1008, 1010, 1228, 1292, 1319, 1340, 1344, 1346], "mathemat": [719, 757, 810, 1340], "mathshortcut": [1, 55], "matplotlib": [158, 575, 869, 880, 924], "matter": [212, 224, 253, 255, 256, 275, 321, 621, 691, 692, 810, 850, 873, 924], "max": [25, 40, 45, 49, 133, 190, 202, 211, 233, 246, 253, 321, 325, 406, 475, 551, 559, 601, 611, 615, 616, 621, 623, 624, 644, 688, 739, 751, 754, 774, 790, 810, 836, 845, 849, 873, 924, 1013, 1019, 1088, 1164, 1195, 1206, 1221, 1266, 1319, 1328, 1337, 1340], "max_a": [253, 321, 621, 810, 873, 924], "max_binary_s": 138, "max_col": [164, 166], "max_colname_length": [210, 321], "max_color": [40, 321], "max_data_s": 170, "max_elem": 1337, "max_horizont": [321, 773], "max_items_per_column": [210, 321], "max_level": 133, "max_siz": [165, 166, 168, 170, 1350], "max_text_s": 138, "max_valu": 1350, "max_width": [551, 1164], "maxim": [308, 344, 810, 908, 947, 1319], "maximum": [10, 26, 37, 45, 46, 49, 67, 126, 129, 136, 137, 138, 141, 145, 146, 147, 150, 154, 156, 164, 165, 166, 168, 170, 210, 212, 232, 233, 321, 351, 396, 516, 561, 593, 603, 611, 672, 674, 677, 685, 696, 773, 774, 810, 850, 861, 924, 954, 998, 1038, 1129, 1173, 1181, 1189, 1195, 1250, 1252, 1255, 1263, 1274, 1319, 1336], "mb": [198, 321, 379, 1078, 1319], "me": [659, 683, 703, 1237, 1261, 1281], "mean": [45, 49, 136, 137, 142, 148, 150, 153, 175, 190, 202, 211, 212, 227, 235, 246, 253, 291, 300, 321, 440, 445, 458, 472, 475, 480, 621, 624, 625, 626, 628, 630, 632, 635, 637, 639, 651, 657, 666, 673, 751, 752, 754, 755, 756, 776, 797, 798, 800, 810, 836, 845, 849, 850, 855, 860, 873, 900, 924, 1019, 1050, 1055, 1068, 1084, 1088, 1207, 1230, 1235, 1244, 1251, 1319, 1336, 1337], "mean_horizont": [321, 775], "measur": [237, 288, 321, 325, 864, 890, 924], "measure_a": [321, 325], "measure_b": [321, 325], "median": [190, 246, 321, 475, 627, 628, 810, 836, 896, 924, 1019, 1208, 1319, 1340], "mediat": 1347, "medium": [40, 321], "megan": [238, 321, 865, 924], "melt": [288, 321, 890, 924], "member": [212, 321, 850, 924, 1112, 1319], "membership": [353, 519, 956, 1132], "memori": [14, 45, 49, 57, 58, 59, 123, 124, 127, 128, 129, 136, 137, 138, 140, 141, 142, 146, 148, 150, 151, 153, 154, 155, 179, 200, 231, 255, 256, 265, 279, 307, 321, 601, 612, 646, 810, 831, 832, 899, 924, 1085, 1172, 1196, 1224, 1225, 1300, 1319], "memory_map": [142, 148, 153], "memory_resourc": 899, "merg": [39, 226, 227, 238, 321, 854, 855, 865, 924], "merge_sort": [321, 924], "messi": [666, 668, 1244, 1246], "met": 800, "meta": [92, 413, 664, 810, 1242], "metadata": [0, 152, 822], "method": [4, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 50, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 122, 124, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 156, 163, 166, 170, 175, 177, 186, 190, 191, 194, 195, 200, 207, 211, 218, 224, 231, 242, 248, 254, 255, 256, 264, 286, 295, 302, 307, 313, 321, 330, 333, 334, 365, 400, 413, 447, 450, 464, 465, 473, 480, 482, 485, 487, 495, 511, 544, 558, 560, 578, 580, 582, 584, 585, 587, 589, 591, 592, 595, 596, 597, 600, 606, 609, 611, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 645, 659, 669, 671, 683, 691, 692, 693, 694, 699, 705, 711, 719, 721, 726, 742, 772, 783, 802, 803, 805, 806, 810, 811, 812, 815, 816, 817, 818, 819, 822, 832, 836, 837, 839, 840, 853, 870, 879, 888, 894, 899, 902, 907, 913, 924, 929, 932, 939, 968, 1006, 1019, 1057, 1060, 1075, 1076, 1085, 1086, 1095, 1097, 1105, 1124, 1157, 1171, 1172, 1183, 1184, 1194, 1195, 1210, 1223, 1237, 1247, 1249, 1261, 1277, 1283, 1302, 1311, 1313, 1315, 1319, 1320, 1323, 1325, 1326, 1327, 1329, 1333], "metric": 138, "micro": [446, 1056], "microsecond": [66, 68, 212, 224, 227, 253, 255, 256, 275, 291, 321, 440, 443, 445, 450, 453, 458, 467, 621, 624, 626, 628, 630, 632, 635, 637, 639, 753, 754, 755, 756, 796, 797, 798, 810, 850, 855, 869, 873, 924, 930, 1050, 1053, 1055, 1063, 1068, 1080, 1319, 1343], "microsoft": [33, 40, 321], "mid_color": [40, 321], "midnight": 83, "midpoint": [190, 248, 313, 321, 609, 631, 632, 783, 810, 836, 870, 913, 924, 1019, 1194, 1210, 1319], "might": [136, 137, 150, 172, 226, 246, 279, 288, 321, 560, 721, 810, 854, 882, 890, 924], "millennia": 1343, "millennium": 1343, "milli": [446, 1056], "millisecond": [212, 227, 253, 291, 321, 429, 435, 440, 445, 454, 458, 467, 621, 624, 626, 628, 630, 632, 635, 637, 639, 754, 755, 756, 797, 798, 810, 850, 855, 873, 924, 930, 1050, 1055, 1064, 1068, 1080, 1319, 1343], "milliseconds_diff": [453, 454, 456], "mimic": 740, "min": [40, 45, 49, 190, 202, 240, 246, 253, 321, 407, 475, 560, 601, 611, 621, 629, 630, 751, 754, 779, 788, 810, 836, 845, 873, 924, 928, 1014, 1019, 1088, 1195, 1209, 1319, 1337, 1340, 1343, 1350], "min_a": [253, 321, 621, 810, 873, 924], "min_col": [164, 166], "min_color": [40, 321], "min_elem": 1337, "min_horizont": [321, 778, 788], "min_period": [410, 466, 468, 469, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 786, 787, 810, 1017, 1079, 1081, 1082, 1205, 1206, 1207, 1208, 1209, 1210, 1212, 1213, 1214, 1319], "min_siz": [165, 166, 168, 170, 1350], "min_valu": 1350, "mincol": 164, "minim": [311, 345, 352, 517, 646, 654, 810, 911, 948, 955, 1130, 1176, 1224, 1319], "minimum": [45, 49, 164, 165, 166, 168, 170, 205, 239, 240, 321, 466, 468, 469, 579, 594, 604, 611, 778, 779, 810, 866, 924, 1044, 1079, 1081, 1082, 1182, 1190, 1195, 1319, 1336, 1350], "minu": [440, 597, 810, 1050], "minut": [212, 227, 253, 291, 321, 429, 432, 434, 439, 440, 443, 445, 446, 455, 458, 467, 621, 624, 626, 628, 630, 632, 635, 637, 639, 753, 754, 755, 756, 796, 797, 798, 810, 850, 855, 873, 924, 930, 1050, 1053, 1055, 1065, 1068, 1080, 1319, 1343], "minutes_diff": 455, "misc": 1334, "miscellan": 822, "mismatch": [59, 115, 146, 154, 159, 161], "miss": [59, 136, 137, 150, 201, 207, 321, 373, 466, 468, 469, 474, 481, 504, 505, 551, 810, 844, 924, 1079, 1081, 1082, 1087, 1319], "missing_utf8_is_empty_str": [136, 137, 150], "mix": [11, 227, 279, 321, 739, 789, 855, 883, 924, 930, 1019, 1319], "mixin": 1, "mlnm": 433, "mm": [40, 321], "mn": 1342, "mno": [16, 20], "mnop": 1342, "mo": 756, "mocha": 930, "mod": [810, 1340], "mode": [38, 39, 40, 46, 47, 48, 49, 57, 58, 159, 161, 246, 268, 321, 667, 782, 785, 801, 810, 831, 832, 842, 924, 1245, 1319, 1328, 1329, 1347], "model": [283, 321], "modifi": [136, 137, 150, 172, 175, 200, 216, 223, 224, 293, 321, 347, 444, 461, 658, 666, 667, 670, 681, 682, 701, 703, 704, 810, 939, 1054, 1071, 1085, 1236, 1244, 1245, 1248, 1259, 1260, 1279, 1281, 1282, 1319], "modul": [94, 102, 141, 809, 930, 1350], "modulu": [580, 810], "moment": [45, 188, 321, 509, 651, 810, 1122, 1230, 1319], "mon": [321, 324, 1343], "mondai": [212, 321, 418, 458, 460, 737, 850, 924, 1024, 1068, 1070], "monkei": [679, 680, 1257, 1258], "month": [212, 227, 253, 291, 321, 426, 437, 438, 440, 443, 445, 447, 450, 458, 467, 621, 624, 626, 628, 630, 632, 635, 637, 639, 750, 751, 752, 753, 754, 755, 756, 797, 798, 810, 850, 855, 873, 924, 1032, 1047, 1048, 1050, 1053, 1055, 1057, 1060, 1068, 1080, 1319, 1343], "month_nam": [447, 450], "monthbegin": [438, 1048], "monthend": [437, 1047], "moos": 930, "more": [20, 40, 45, 49, 51, 59, 90, 91, 120, 123, 124, 125, 126, 127, 128, 129, 138, 139, 140, 141, 145, 146, 147, 148, 151, 152, 154, 159, 161, 166, 175, 177, 188, 190, 194, 203, 223, 224, 231, 237, 242, 254, 255, 257, 268, 278, 279, 283, 286, 288, 307, 321, 325, 334, 371, 395, 476, 480, 488, 509, 539, 552, 556, 559, 560, 600, 601, 642, 651, 667, 676, 695, 697, 698, 720, 731, 743, 759, 765, 768, 775, 777, 780, 781, 790, 800, 806, 810, 836, 839, 840, 846, 864, 883, 888, 890, 899, 924, 928, 930, 932, 974, 997, 1000, 1019, 1098, 1099, 1122, 1152, 1165, 1172, 1217, 1230, 1245, 1254, 1273, 1275, 1276, 1298, 1300, 1305, 1319, 1334, 1335, 1345, 1348, 1349, 1350], "more_bi": [244, 267, 321, 654, 810, 882, 924], "more_column": [199, 287, 321, 470, 758, 810, 843, 889, 924, 930], "more_expr": [601, 735, 738, 739, 740, 741, 810], "more_nam": [706, 806], "most": [40, 123, 136, 137, 139, 150, 159, 160, 161, 162, 279, 321, 384, 385, 572, 581, 602, 616, 688, 810, 986, 987, 1177, 1188, 1200, 1266, 1300, 1319, 1331, 1347], "mostli": [273, 321, 476, 810], "move": [246, 256, 321, 418, 466, 467, 468, 469, 623, 625, 629, 636, 810, 1024, 1079, 1080, 1081, 1082, 1206, 1207, 1209, 1213, 1319], "mr": 899, "mssql": [38, 321], "much": [231, 289, 307, 321, 395, 396, 410, 526, 560, 676, 677, 772, 810, 907, 997, 998, 1017, 1139, 1172, 1254, 1255, 1319], "mul": 810, "multi": [8, 40, 136, 137, 283, 321, 470, 666, 810, 1244], "multi_fram": [40, 321], "multicolselector": 180, "multiindexselector": [180, 934], "multipl": [40, 57, 58, 59, 107, 136, 137, 141, 147, 150, 153, 154, 155, 164, 166, 170, 192, 198, 200, 203, 211, 212, 216, 225, 228, 244, 246, 256, 259, 262, 267, 290, 295, 300, 321, 391, 526, 559, 565, 572, 581, 582, 601, 615, 617, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 654, 706, 718, 735, 743, 760, 771, 773, 778, 784, 790, 793, 800, 806, 810, 822, 831, 832, 838, 846, 849, 850, 856, 875, 878, 882, 891, 894, 900, 907, 924, 939, 969, 1078, 1085, 1139, 1159, 1177, 1199, 1201, 1232, 1319, 1332, 1337], "multipli": [559, 622, 623, 625, 627, 629, 631, 634, 636, 638, 710, 810, 1205, 1206, 1207, 1208, 1209, 1210, 1212, 1213, 1214, 1319], "multithread": [267, 321, 654, 735, 810, 882, 924, 969, 1159, 1232, 1319], "must": [40, 69, 124, 125, 136, 140, 148, 151, 152, 155, 156, 190, 199, 212, 227, 228, 238, 246, 253, 254, 321, 411, 551, 560, 575, 608, 615, 616, 621, 683, 739, 751, 752, 800, 810, 836, 843, 850, 855, 856, 860, 865, 873, 880, 899, 924, 928, 1018, 1019, 1193, 1199, 1200, 1261, 1319], "mutual": [254, 321], "my": [152, 156, 321, 324, 1319, 1324], "my_column": 907, "my_column_": [285, 321], "my_column_0": [285, 321], "my_column_1": [285, 321], "my_column_2": [285, 321], "my_custom_aggreg": 772, "my_fil": 142, "my_holidai": [418, 737, 1024], "my_larger_than_ram_fil": [46, 47, 48, 49, 924], "my_long_fil": 150, "my_struct": 792, "mydf": 150, "myrol": 139, "mysql": 139, "n": [1, 12, 13, 17, 25, 37, 44, 46, 52, 53, 54, 55, 66, 68, 132, 136, 137, 141, 146, 150, 166, 184, 200, 206, 212, 214, 224, 225, 230, 231, 255, 256, 257, 264, 269, 272, 275, 277, 292, 304, 306, 315, 321, 337, 365, 370, 379, 381, 386, 389, 390, 391, 395, 396, 410, 414, 418, 420, 422, 428, 449, 461, 467, 473, 476, 484, 490, 513, 521, 527, 529, 539, 540, 544, 547, 549, 551, 553, 602, 605, 614, 634, 635, 638, 639, 642, 645, 651, 656, 672, 676, 677, 681, 682, 687, 688, 690, 691, 696, 698, 713, 717, 718, 719, 723, 724, 726, 744, 753, 754, 755, 756, 762, 764, 782, 785, 786, 787, 788, 791, 795, 799, 801, 810, 829, 848, 850, 851, 859, 879, 884, 886, 892, 904, 906, 915, 924, 930, 968, 973, 981, 992, 997, 998, 1005, 1017, 1020, 1024, 1026, 1028, 1034, 1059, 1071, 1080, 1085, 1086, 1094, 1101, 1126, 1134, 1140, 1142, 1152, 1153, 1157, 1162, 1164, 1188, 1212, 1214, 1217, 1223, 1230, 1234, 1250, 1254, 1255, 1259, 1260, 1265, 1266, 1274, 1276, 1291, 1297, 1304, 1308, 1309, 1319, 1331, 1332, 1339, 1342, 1343, 1345, 1347, 1350], "n0": [370, 551], "n00": [973, 1164], "n01": [973, 1164], "n02": [973, 1164], "n1": [370, 551], "n2": [1, 370], "n3": 1, "n_1": [476, 810], "n_2": [476, 810], "n_3": [476, 810], "n_bar": 1336, "n_bit": 1342, "n_byte": [379, 395, 396, 676, 677, 1342], "n_char": [395, 396, 676, 677, 1342], "n_chunk": [321, 939, 1085, 1196, 1319], "n_elem": 1337, "n_even": 930, "n_field_strategi": [551, 1164], "n_film": 1328, "n_foo_uniqu": 1336, "n_kilobyt": 379, "n_row": [134, 136, 137, 142, 144, 146, 148, 150, 153, 154, 155, 225, 321, 924], "n_thread": [136, 137], "n_uniqu": [321, 337, 810, 1319], "na": [280, 321, 689, 1301, 1319], "naiv": [422, 423, 698, 1028, 1029, 1276], "name": [1, 18, 22, 24, 32, 35, 37, 38, 40, 46, 52, 53, 54, 55, 59, 70, 82, 99, 123, 125, 126, 127, 128, 129, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 161, 162, 163, 164, 166, 169, 170, 171, 182, 183, 186, 187, 192, 193, 194, 195, 199, 203, 204, 207, 208, 210, 211, 222, 223, 224, 226, 227, 228, 231, 233, 235, 237, 238, 240, 244, 246, 250, 254, 255, 256, 258, 259, 260, 267, 268, 271, 274, 276, 278, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 295, 296, 297, 298, 299, 300, 306, 321, 325, 332, 370, 374, 375, 377, 380, 391, 400, 411, 447, 450, 470, 476, 497, 504, 505, 506, 507, 551, 560, 565, 569, 571, 573, 577, 601, 608, 618, 654, 667, 668, 681, 682, 683, 706, 708, 710, 718, 723, 727, 728, 729, 730, 731, 733, 734, 735, 738, 739, 740, 741, 742, 743, 744, 745, 748, 749, 758, 759, 764, 765, 768, 773, 774, 775, 776, 777, 778, 779, 780, 783, 786, 787, 788, 789, 791, 792, 793, 794, 795, 799, 800, 806, 810, 826, 828, 833, 834, 838, 839, 840, 843, 846, 849, 854, 855, 856, 864, 865, 871, 874, 875, 876, 882, 883, 887, 888, 889, 890, 891, 894, 895, 896, 897, 898, 900, 906, 924, 928, 929, 930, 936, 973, 1005, 1018, 1057, 1060, 1077, 1164, 1193, 1198, 1244, 1245, 1246, 1259, 1260, 1284, 1287, 1295, 1296, 1301, 1308, 1319, 1324, 1329, 1330, 1331, 1332, 1333, 1334, 1346, 1347, 1350], "name_gener": [285, 321], "named_agg": [300, 900], "named_bi": [211, 321, 849, 924], "named_expr": [259, 260, 295, 296, 321, 710, 788, 792, 875, 876, 894, 895, 924], "named_fram": [1332, 1347], "nameless": 128, "namespac": [1, 138, 320, 321, 324, 706, 789, 809, 822, 922, 923, 1319, 1324, 1350], "nan": [128, 166, 179, 194, 201, 279, 280, 321, 416, 417, 464, 465, 474, 485, 487, 495, 504, 505, 506, 507, 511, 558, 561, 579, 593, 594, 595, 596, 622, 648, 719, 742, 810, 839, 844, 924, 942, 946, 1022, 1023, 1087, 1115, 1116, 1181, 1182, 1205, 1227, 1300, 1301, 1319, 1350], "nan_as_nul": 179, "nan_max": [810, 1319], "nan_min": [810, 1319], "nan_to_nul": [128, 321, 924, 1319], "nana": 1342, "nanmax": [593, 594, 810, 1181, 1182, 1319], "nanosecond": [83, 212, 227, 253, 291, 321, 440, 445, 446, 456, 458, 467, 621, 624, 626, 628, 630, 632, 635, 637, 639, 754, 755, 756, 797, 798, 810, 850, 855, 873, 924, 1050, 1055, 1056, 1066, 1068, 1080, 1319, 1343], "nansum": [622, 810, 1205, 1319], "nativ": [10, 38, 136, 138, 141, 142, 144, 148, 224, 231, 255, 256, 275, 279, 307, 321, 560, 772, 789, 810, 816, 883, 907, 924, 1172, 1300, 1319, 1323, 1347, 1350], "natur": [556, 810, 1169, 1319, 1335, 1341], "ndarrai": [127, 177, 203, 279, 321, 483, 643, 810, 846, 924, 932, 1093, 1218, 1219, 1300, 1319], "ndjson": [48, 924], "ne": [596, 810, 1184, 1319], "ne_miss": [203, 321, 810, 846, 924, 1076, 1319], "nearest": [53, 190, 227, 248, 313, 321, 399, 479, 495, 609, 631, 632, 783, 810, 836, 855, 870, 913, 924, 1003, 1019, 1092, 1105, 1194, 1210, 1319, 1341], "nearest_pow2": 53, "necessari": [37, 38, 46, 50, 91, 141, 279, 321, 924, 1300, 1319], "need": [59, 93, 102, 130, 136, 137, 139, 148, 150, 153, 155, 175, 212, 253, 256, 265, 321, 324, 551, 621, 646, 681, 682, 683, 699, 756, 782, 785, 801, 810, 850, 873, 924, 1224, 1259, 1260, 1261, 1277, 1319, 1324, 1350], "neg": [13, 65, 66, 67, 68, 136, 137, 142, 144, 148, 157, 214, 230, 253, 264, 266, 272, 298, 321, 365, 544, 545, 605, 606, 621, 645, 652, 672, 685, 696, 810, 873, 879, 881, 897, 898, 924, 930, 968, 1101, 1126, 1157, 1158, 1191, 1223, 1231, 1250, 1263, 1274, 1291, 1319], "negat": [598, 810, 1186, 1319], "neither": [130, 141, 147, 257, 321, 370, 551, 973, 1164], "nest": [50, 130, 133, 167, 168, 198, 321, 822, 1078, 1319, 1347, 1350], "nest_asyncio": 158, "nesting_level": 167, "net": [667, 1245], "netherland": [227, 321, 855, 924], "never": [37, 46, 138, 226, 227, 254, 321, 854, 855, 924], "new": [38, 39, 40, 150, 175, 180, 206, 216, 217, 231, 242, 243, 246, 250, 285, 287, 289, 290, 295, 296, 321, 332, 422, 472, 482, 484, 495, 585, 586, 601, 615, 616, 620, 678, 681, 682, 687, 688, 706, 708, 806, 810, 822, 848, 871, 889, 891, 894, 895, 907, 924, 934, 936, 1028, 1084, 1094, 1185, 1198, 1199, 1200, 1204, 1259, 1260, 1265, 1266, 1284, 1287, 1296, 1319, 1347, 1349], "new_column": [136, 137, 141, 150], "new_dai": 443, "new_dat": 440, "new_df": [290, 321, 891, 924], "new_fil": [35, 37, 41, 42, 45, 321], "new_from_index": 1319, "new_id": [285, 321], "new_lf": [891, 924], "new_tabl": 1349, "new_valu": [746, 747, 760, 784], "new_york": 754, "newli": 51, "newlin": [44, 136, 146, 150, 154, 321], "next": [18, 53, 212, 227, 253, 291, 321, 373, 418, 440, 445, 458, 611, 621, 624, 626, 628, 630, 632, 635, 637, 639, 751, 752, 754, 755, 797, 798, 810, 850, 855, 873, 924, 1024, 1050, 1055, 1068, 1195, 1319], "next_batch": 137, "next_pow2": 53, "nfc": [678, 1256], "nfd": [678, 1256], "nfkc": [678, 1256], "nfkd": [678, 1256], "nfruit": 696, "nl": [418, 737, 1024], "nnel_id": 130, "no1": 930, "no_default": [207, 321, 615, 616, 683, 810, 1199, 1200, 1261, 1319], "no_optim": [46, 47, 48, 49, 57, 58, 831, 832, 860, 869, 924], "nodataerror": [136, 137, 141, 147, 150], "nodd": [666, 1244], "node": [827, 831, 852, 860, 864, 869, 871, 924], "nodefault": [207, 321, 615, 616, 683, 810, 1199, 1200, 1261, 1319], "non": [4, 5, 37, 39, 40, 46, 51, 66, 67, 128, 157, 182, 189, 225, 237, 253, 259, 260, 264, 284, 285, 288, 290, 295, 296, 321, 373, 390, 391, 395, 400, 404, 405, 418, 444, 481, 497, 551, 559, 560, 566, 601, 602, 615, 616, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 660, 667, 676, 681, 682, 683, 703, 705, 710, 717, 718, 728, 730, 738, 739, 740, 741, 743, 745, 749, 756, 774, 776, 779, 786, 787, 788, 792, 794, 810, 826, 835, 864, 873, 875, 876, 879, 887, 890, 891, 894, 895, 924, 928, 930, 992, 997, 1006, 1011, 1012, 1019, 1024, 1054, 1107, 1164, 1172, 1188, 1199, 1200, 1205, 1206, 1207, 1208, 1209, 1210, 1212, 1213, 1214, 1223, 1238, 1245, 1254, 1259, 1260, 1281, 1283, 1300, 1304, 1319, 1339, 1347], "non_exist": [444, 1054], "non_numer": [37, 46, 321, 924], "none": [1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 58, 60, 63, 66, 67, 68, 69, 70, 78, 82, 91, 123, 125, 126, 127, 128, 129, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 177, 178, 184, 189, 190, 194, 195, 201, 202, 203, 205, 207, 210, 212, 213, 218, 222, 226, 227, 229, 231, 234, 237, 242, 243, 246, 253, 254, 257, 261, 264, 266, 267, 273, 274, 276, 278, 279, 280, 283, 285, 286, 287, 288, 289, 290, 291, 302, 306, 321, 333, 335, 336, 348, 349, 350, 357, 358, 370, 373, 393, 395, 396, 397, 400, 404, 405, 406, 409, 411, 416, 417, 425, 440, 443, 444, 450, 465, 466, 467, 468, 469, 470, 473, 474, 475, 481, 488, 489, 491, 493, 495, 496, 497, 504, 505, 506, 507, 512, 514, 515, 522, 528, 530, 532, 539, 540, 541, 542, 543, 545, 551, 559, 560, 571, 574, 575, 576, 578, 583, 596, 597, 598, 599, 601, 602, 608, 611, 612, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 642, 645, 646, 647, 648, 652, 653, 657, 658, 660, 662, 663, 664, 667, 670, 672, 673, 674, 675, 676, 677, 679, 680, 685, 687, 688, 689, 690, 691, 692, 695, 696, 697, 698, 700, 702, 705, 706, 707, 708, 709, 716, 723, 728, 729, 730, 732, 738, 739, 740, 741, 742, 743, 745, 749, 751, 752, 753, 754, 755, 756, 758, 759, 766, 767, 768, 769, 770, 771, 772, 774, 776, 779, 785, 786, 787, 792, 794, 796, 797, 798, 800, 810, 829, 830, 832, 835, 836, 839, 840, 842, 844, 845, 846, 850, 853, 854, 855, 858, 860, 864, 867, 873, 877, 879, 880, 881, 882, 888, 889, 890, 891, 896, 899, 902, 906, 907, 916, 917, 924, 928, 929, 930, 932, 933, 937, 938, 940, 947, 948, 952, 953, 960, 961, 973, 983, 988, 991, 994, 997, 998, 999, 1005, 1006, 1011, 1012, 1018, 1019, 1021, 1022, 1023, 1031, 1038, 1039, 1040, 1044, 1053, 1054, 1060, 1074, 1076, 1079, 1080, 1081, 1082, 1086, 1087, 1088, 1090, 1098, 1100, 1102, 1104, 1105, 1106, 1107, 1117, 1118, 1121, 1122, 1123, 1125, 1127, 1128, 1131, 1135, 1141, 1143, 1145, 1152, 1153, 1154, 1155, 1156, 1158, 1164, 1172, 1173, 1174, 1175, 1176, 1184, 1187, 1193, 1194, 1195, 1199, 1200, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1212, 1213, 1214, 1217, 1218, 1219, 1220, 1223, 1226, 1227, 1230, 1231, 1234, 1235, 1236, 1238, 1240, 1241, 1242, 1245, 1248, 1250, 1251, 1252, 1253, 1254, 1255, 1257, 1258, 1263, 1265, 1266, 1267, 1268, 1269, 1270, 1273, 1274, 1275, 1276, 1278, 1280, 1283, 1286, 1294, 1296, 1297, 1298, 1300, 1301, 1302, 1308, 1309, 1319, 1328, 1330, 1331, 1332, 1334, 1337, 1339, 1343, 1347], "nonexist": [444, 1054], "nor": [141, 147, 257, 321], "normal": [39, 133, 212, 321, 463, 509, 651, 723, 810, 850, 924, 1074, 1122, 1230, 1308, 1319], "normalised_scor": 138, "norowsreturnederror": [254, 321], "north": 69, "not_": [295, 321, 810, 894, 924, 930, 1319], "not_c": [295, 321, 894, 924], "notabl": 138, "notat": [11, 40, 321], "note": [4, 10, 20, 39, 40, 45, 50, 51, 58, 65, 66, 68, 83, 90, 91, 123, 124, 125, 127, 129, 130, 136, 138, 139, 140, 141, 145, 146, 147, 150, 151, 152, 154, 156, 159, 161, 164, 166, 170, 172, 175, 179, 186, 188, 190, 191, 194, 201, 203, 212, 213, 222, 223, 224, 226, 227, 231, 242, 245, 246, 250, 253, 254, 255, 256, 261, 264, 268, 275, 278, 280, 283, 285, 286, 288, 290, 291, 295, 297, 298, 321, 365, 378, 393, 395, 396, 397, 400, 408, 409, 413, 416, 417, 423, 437, 438, 440, 445, 450, 458, 467, 474, 480, 482, 489, 497, 504, 505, 523, 526, 544, 551, 560, 574, 575, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 615, 616, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 645, 647, 651, 657, 658, 659, 665, 666, 667, 668, 669, 670, 671, 672, 676, 677, 681, 682, 683, 685, 690, 691, 692, 695, 696, 703, 705, 706, 712, 719, 728, 730, 737, 746, 751, 752, 754, 755, 756, 760, 770, 782, 784, 785, 789, 797, 798, 800, 801, 806, 810, 821, 832, 836, 837, 839, 844, 846, 850, 855, 871, 873, 877, 879, 880, 882, 883, 888, 890, 891, 894, 897, 898, 924, 930, 968, 980, 997, 998, 1006, 1015, 1016, 1019, 1022, 1023, 1029, 1047, 1048, 1050, 1055, 1060, 1068, 1080, 1087, 1100, 1107, 1136, 1139, 1157, 1172, 1199, 1200, 1204, 1211, 1218, 1220, 1223, 1225, 1230, 1235, 1236, 1237, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1254, 1255, 1259, 1260, 1261, 1263, 1268, 1269, 1270, 1273, 1274, 1281, 1283, 1290, 1301, 1303, 1319, 1328, 1329, 1333, 1334, 1345, 1347], "noth": [20, 666, 675, 1244, 1253], "notic": [138, 203, 321, 846, 924, 1319], "notimplementederror": 179, "now": [51, 141, 253, 279, 321, 568, 873, 924, 1300, 1319], "np": [127, 177, 203, 279, 321, 483, 559, 643, 810, 846, 924, 932, 1093, 1110, 1113, 1115, 1116, 1218, 1219, 1319], "npt": [177, 932], "nr": [304, 315, 904, 915], "nth": [206, 321, 484, 688, 806, 810, 848, 924, 1094, 1266, 1319], "nthe": [666, 1244], "nthose": [666, 1244], "nu": 663, "null": [16, 37, 39, 45, 46, 49, 51, 59, 66, 125, 126, 129, 133, 136, 137, 146, 148, 150, 154, 155, 156, 163, 166, 170, 179, 182, 183, 184, 189, 190, 194, 195, 197, 202, 203, 205, 218, 226, 234, 235, 236, 243, 246, 248, 264, 267, 269, 270, 271, 274, 279, 280, 284, 287, 290, 292, 295, 302, 321, 333, 335, 336, 346, 349, 350, 357, 358, 365, 366, 373, 375, 378, 390, 391, 392, 393, 395, 396, 397, 400, 404, 405, 406, 409, 414, 416, 417, 440, 443, 444, 451, 452, 453, 454, 455, 456, 457, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 481, 488, 493, 495, 496, 504, 505, 506, 507, 512, 514, 515, 521, 522, 525, 526, 528, 530, 531, 532, 540, 541, 542, 543, 544, 546, 551, 559, 560, 583, 596, 597, 598, 599, 602, 612, 616, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 645, 646, 648, 653, 654, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 672, 673, 674, 675, 676, 677, 679, 680, 685, 687, 688, 689, 695, 696, 698, 700, 705, 706, 707, 708, 709, 716, 717, 718, 727, 728, 729, 730, 735, 738, 739, 740, 741, 743, 745, 749, 753, 758, 769, 770, 774, 776, 779, 786, 787, 792, 794, 800, 810, 826, 829, 835, 836, 839, 840, 845, 846, 853, 854, 867, 879, 882, 887, 889, 891, 894, 896, 902, 924, 930, 937, 938, 949, 952, 953, 960, 961, 968, 969, 977, 980, 992, 993, 994, 997, 998, 999, 1005, 1006, 1011, 1012, 1020, 1022, 1023, 1053, 1054, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1076, 1077, 1079, 1080, 1081, 1082, 1086, 1088, 1089, 1098, 1099, 1104, 1105, 1106, 1117, 1118, 1119, 1125, 1127, 1128, 1131, 1134, 1135, 1138, 1139, 1141, 1143, 1144, 1145, 1154, 1156, 1157, 1159, 1164, 1172, 1184, 1187, 1188, 1200, 1203, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1223, 1227, 1232, 1235, 1236, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1248, 1250, 1251, 1252, 1253, 1254, 1255, 1257, 1258, 1263, 1265, 1266, 1267, 1273, 1274, 1276, 1278, 1283, 1286, 1297, 1300, 1301, 1302, 1304, 1319, 1331, 1335, 1337, 1339, 1343, 1345, 1347, 1348, 1350], "null_behavior": [414, 521, 810, 1020, 1134, 1319], "null_count": [45, 49, 190, 195, 321, 410, 810, 836, 924, 1017, 1019, 1319], "null_equ": [197, 321, 1077, 1319], "null_on_oob": [357, 526, 528, 960, 1139, 1141], "null_prob": [163, 166, 170], "null_valu": [37, 46, 136, 137, 150, 321, 924], "nullabl": [39, 321], "nullbehavior": [414, 521, 810, 1020, 1134, 1319], "nullif": 1340, "nulls_last": [267, 321, 346, 366, 546, 653, 654, 735, 810, 882, 924, 949, 969, 1119, 1159, 1232, 1319], "num": [13, 40, 282, 321, 497, 810, 1107, 1319], "num_row": 179, "number": [10, 11, 12, 13, 14, 17, 25, 37, 38, 40, 41, 45, 46, 47, 48, 49, 50, 51, 65, 66, 67, 83, 91, 112, 123, 125, 126, 127, 129, 132, 133, 136, 137, 138, 139, 141, 145, 146, 147, 148, 150, 153, 154, 155, 157, 164, 166, 169, 171, 172, 173, 182, 184, 189, 198, 199, 201, 202, 210, 214, 215, 224, 225, 230, 241, 242, 253, 257, 264, 269, 272, 284, 289, 292, 294, 302, 304, 306, 315, 321, 347, 363, 365, 370, 373, 382, 383, 384, 385, 387, 388, 390, 391, 396, 404, 410, 411, 414, 418, 421, 429, 431, 433, 435, 436, 446, 459, 460, 462, 466, 467, 468, 469, 473, 474, 475, 481, 490, 504, 505, 512, 513, 521, 529, 532, 537, 539, 544, 547, 549, 551, 553, 601, 605, 608, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 647, 656, 672, 674, 676, 677, 681, 685, 687, 688, 696, 699, 713, 717, 718, 724, 737, 742, 743, 744, 756, 764, 769, 786, 787, 791, 795, 799, 810, 826, 829, 835, 843, 844, 845, 851, 859, 869, 879, 884, 886, 887, 892, 893, 902, 904, 906, 915, 924, 929, 966, 968, 973, 984, 985, 986, 987, 989, 990, 992, 998, 1005, 1011, 1017, 1018, 1020, 1024, 1027, 1035, 1037, 1042, 1045, 1046, 1056, 1069, 1070, 1072, 1078, 1079, 1080, 1081, 1082, 1086, 1087, 1088, 1101, 1125, 1126, 1134, 1142, 1145, 1150, 1152, 1157, 1162, 1164, 1178, 1179, 1193, 1205, 1206, 1207, 1208, 1209, 1210, 1212, 1213, 1214, 1215, 1216, 1217, 1223, 1226, 1234, 1250, 1252, 1254, 1255, 1259, 1263, 1265, 1266, 1274, 1277, 1291, 1304, 1309, 1319, 1335, 1338, 1341, 1350], "number_of_two": [354, 520], "numbers_decim": 699, "numer": [10, 16, 37, 40, 46, 140, 151, 183, 192, 227, 279, 280, 288, 289, 321, 330, 378, 392, 400, 480, 497, 556, 580, 582, 606, 614, 646, 648, 668, 705, 711, 719, 810, 822, 828, 838, 855, 890, 924, 930, 980, 993, 1006, 1019, 1107, 1224, 1227, 1246, 1283, 1300, 1319, 1341, 1350], "numeric_dtyp": 1350, "numericliter": [400, 810, 1006, 1319], "numpi": [97, 127, 158, 177, 188, 224, 255, 256, 275, 279, 280, 321, 559, 593, 594, 622, 810, 924, 932, 1110, 1113, 1115, 1116, 1181, 1182, 1205, 1300, 1301, 1319], "nworld": 690, "o": [142, 153, 379, 390, 391, 410, 665, 717, 718, 810, 981, 992, 1017, 1243, 1268, 1304, 1319, 1332], "oauth": 152, "obj": 930, "object": [35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 59, 82, 100, 124, 125, 130, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 164, 166, 167, 178, 179, 186, 191, 211, 212, 227, 229, 244, 253, 256, 261, 268, 278, 279, 280, 321, 413, 574, 751, 752, 754, 755, 770, 789, 797, 798, 810, 822, 831, 837, 850, 855, 858, 873, 883, 921, 924, 930, 933, 1294, 1319, 1329, 1331, 1334, 1347, 1349], "observ": [226, 321, 411, 466, 467, 468, 469, 608, 810, 854, 924, 1018, 1079, 1080, 1081, 1082, 1193, 1319], "obtain": 551, "obvious": 708, "occur": [40, 57, 58, 98, 107, 113, 228, 321, 354, 520, 581, 611, 810, 831, 832, 842, 856, 869, 880, 924, 957, 1133, 1177, 1195, 1300, 1319], "occurr": [491, 493, 500, 503, 723, 810, 1102, 1104, 1111, 1114, 1308, 1319], "oct": 1342, "octet_length": 1340, "octob": [450, 1060, 1342], "od": [147, 822], "odbc": [38, 138, 321], "odd": 666, "odi": [669, 671, 1249], "off": [46, 47, 48, 49, 57, 58, 136, 137, 150, 226, 227, 321, 418, 737, 831, 832, 842, 854, 855, 860, 869, 924, 1024], "offer": [245, 321, 605, 810, 868, 924, 1343, 1347], "offic": [40, 321], "offset": [68, 136, 137, 142, 144, 146, 148, 150, 153, 154, 155, 206, 212, 253, 266, 297, 298, 321, 418, 419, 427, 437, 438, 440, 445, 458, 484, 527, 545, 621, 652, 670, 671, 685, 698, 810, 848, 850, 873, 881, 897, 898, 924, 1024, 1025, 1033, 1047, 1048, 1050, 1055, 1068, 1094, 1140, 1158, 1231, 1248, 1249, 1263, 1276, 1319, 1346], "offset_bi": 756, "often": [139, 175, 212, 253, 321, 354, 520, 614, 621, 810, 850, 873, 924, 957, 1133, 1334, 1347], "ok": 551, "old": [39, 250, 321, 615, 616, 810, 871, 924, 1199, 1200, 1319], "old_tabl": 1349, "older": [45, 49, 321, 924], "oldw": 691, "omit": [27, 126, 130, 141, 147, 164, 175, 242, 256, 278, 283, 321, 751, 754, 766, 767, 797, 798, 930, 1348], "onc": [136, 137, 172, 231, 255, 257, 300, 321, 539, 559, 560, 642, 693, 694, 810, 827, 900, 924, 1152, 1172, 1217, 1271, 1272, 1319, 1332], "one": [20, 37, 38, 40, 46, 51, 104, 123, 125, 126, 127, 128, 129, 136, 137, 141, 145, 146, 147, 150, 154, 169, 171, 175, 183, 191, 194, 202, 203, 210, 211, 212, 224, 228, 229, 237, 246, 253, 254, 255, 261, 262, 264, 279, 282, 288, 301, 321, 331, 365, 411, 413, 475, 476, 480, 483, 486, 488, 544, 551, 556, 574, 584, 585, 587, 589, 591, 592, 601, 620, 621, 645, 653, 666, 667, 668, 683, 706, 751, 754, 772, 790, 800, 806, 810, 828, 837, 839, 840, 845, 846, 849, 850, 856, 864, 873, 877, 878, 879, 890, 896, 901, 924, 939, 968, 973, 1018, 1088, 1098, 1099, 1157, 1164, 1169, 1193, 1204, 1223, 1244, 1245, 1246, 1261, 1284, 1300, 1319, 1334, 1335, 1337, 1341, 1349], "one_to_mani": [226, 321, 854, 924], "one_to_on": [226, 321, 854, 924], "oneormoredatatyp": [40, 164, 321], "ones": [624, 626, 628, 630, 632, 635, 637, 639, 810, 930], "onf": [685, 1263], "onli": [1, 5, 10, 13, 20, 30, 37, 38, 40, 46, 50, 51, 56, 59, 91, 136, 137, 138, 141, 142, 144, 146, 148, 150, 153, 154, 155, 156, 159, 160, 161, 162, 166, 170, 175, 194, 195, 200, 212, 213, 224, 227, 228, 231, 246, 253, 255, 256, 275, 277, 278, 279, 290, 291, 307, 321, 331, 333, 335, 347, 399, 400, 413, 418, 440, 448, 450, 470, 479, 489, 559, 560, 567, 568, 584, 585, 586, 587, 588, 589, 590, 591, 592, 601, 613, 659, 669, 671, 683, 721, 737, 772, 810, 834, 837, 839, 840, 841, 850, 855, 856, 873, 874, 891, 893, 907, 924, 928, 930, 937, 938, 939, 1003, 1006, 1024, 1050, 1060, 1085, 1092, 1100, 1172, 1197, 1237, 1247, 1249, 1261, 1294, 1297, 1300, 1319, 1328, 1331, 1347, 1348, 1350], "onlin": [200, 321, 1085, 1319], "ont": [669, 671, 1247, 1249], "onto": 166, "oof": [684, 1262, 1337, 1342], "op": [20, 136, 137, 170, 250, 321, 567, 614, 810, 858, 871, 924, 1319], "opac": [321, 324, 1319, 1324], "opaqu": 907, "open": [40, 134, 136, 137, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 191, 321, 413, 810, 837, 924], "openoffic": 147, "openpyxl": [141, 158], "oper": [4, 40, 50, 59, 91, 100, 103, 110, 117, 123, 125, 126, 127, 128, 129, 136, 138, 185, 200, 203, 205, 211, 217, 229, 231, 238, 242, 244, 245, 246, 249, 251, 253, 256, 257, 262, 264, 273, 279, 280, 285, 288, 289, 299, 300, 321, 330, 331, 334, 365, 405, 406, 407, 408, 409, 410, 464, 465, 480, 482, 485, 487, 511, 539, 540, 541, 542, 543, 544, 551, 558, 577, 580, 582, 583, 584, 585, 587, 589, 591, 592, 595, 596, 597, 600, 601, 606, 613, 642, 645, 711, 719, 726, 727, 729, 740, 741, 745, 757, 789, 800, 810, 822, 830, 834, 836, 841, 846, 849, 854, 864, 865, 874, 878, 879, 883, 890, 893, 900, 924, 928, 968, 1007, 1012, 1013, 1014, 1015, 1016, 1017, 1075, 1076, 1085, 1095, 1097, 1124, 1152, 1153, 1154, 1155, 1156, 1157, 1171, 1183, 1184, 1197, 1217, 1223, 1259, 1294, 1299, 1300, 1301, 1319, 1338, 1346, 1347], "operand": [719, 810], "opp": 930, "oppos": 737, "opposit": [264, 321, 365, 544, 645, 810, 879, 924, 968, 1157, 1223, 1319], "opt": [283, 321], "optim": [46, 47, 48, 49, 57, 58, 148, 150, 153, 154, 155, 224, 229, 245, 249, 255, 286, 321, 827, 831, 832, 842, 860, 869, 880, 888, 897, 898, 907, 924, 1002, 1218, 1319], "optimis": [138, 231, 256, 307, 321, 924, 1172, 1220, 1319, 1350], "optimist": 14, "option": [2, 3, 4, 5, 6, 7, 30, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 51, 67, 69, 136, 138, 139, 140, 141, 142, 144, 146, 148, 150, 151, 152, 153, 154, 155, 156, 158, 163, 164, 165, 166, 169, 170, 171, 191, 207, 212, 222, 227, 237, 261, 268, 274, 285, 288, 290, 321, 378, 413, 418, 509, 567, 568, 574, 601, 622, 623, 625, 627, 629, 631, 634, 636, 638, 651, 659, 669, 671, 683, 685, 723, 792, 800, 810, 822, 831, 837, 850, 854, 855, 864, 877, 883, 890, 891, 899, 924, 930, 980, 1024, 1122, 1205, 1206, 1207, 1208, 1209, 1210, 1212, 1213, 1214, 1230, 1237, 1247, 1249, 1261, 1263, 1296, 1308, 1319, 1337, 1342], "optional_memb": [501, 810, 1112, 1319], "or_": 810, "oracl": 139, "orang": [187, 302, 303, 305, 306, 308, 309, 311, 313, 314, 321, 391, 718, 810, 902, 903, 905, 906, 908, 909, 911, 913, 914, 1342], "order": [10, 40, 46, 47, 48, 49, 51, 57, 63, 126, 136, 138, 157, 159, 160, 161, 162, 182, 186, 187, 194, 195, 196, 203, 211, 212, 226, 228, 244, 245, 246, 253, 255, 257, 258, 262, 267, 278, 279, 284, 286, 291, 321, 346, 366, 371, 390, 391, 416, 417, 476, 522, 539, 546, 552, 601, 606, 611, 621, 642, 643, 644, 653, 654, 684, 691, 692, 693, 694, 708, 717, 718, 720, 721, 723, 735, 789, 800, 810, 821, 826, 834, 839, 840, 841, 846, 849, 850, 854, 856, 864, 873, 874, 878, 882, 883, 887, 888, 924, 929, 930, 949, 969, 974, 992, 1001, 1022, 1023, 1089, 1119, 1135, 1152, 1159, 1165, 1191, 1195, 1202, 1217, 1219, 1221, 1232, 1262, 1287, 1304, 1305, 1306, 1308, 1319, 1328, 1331, 1337, 1346, 1347, 1350], "order_bi": [601, 810], "ordin": [441, 611, 810, 1051, 1195, 1319, 1348], "ordinal_dai": [426, 460], "org": [20, 41, 42, 124, 138, 139, 142, 144, 177, 178, 179, 188, 321, 575, 678, 880, 924, 932, 933, 1256], "orient": [52, 54, 98, 127, 129, 242, 321, 924, 1328], "origin": [51, 136, 137, 150, 194, 195, 203, 286, 321, 416, 417, 444, 445, 458, 476, 522, 560, 584, 601, 613, 614, 615, 616, 617, 619, 660, 666, 675, 733, 734, 810, 839, 840, 846, 888, 924, 1022, 1023, 1054, 1055, 1068, 1089, 1135, 1199, 1200, 1201, 1203, 1238, 1244, 1253, 1319], "orld": 1269, "other": [1, 20, 36, 40, 45, 58, 135, 136, 137, 138, 141, 150, 155, 159, 160, 161, 162, 195, 197, 200, 203, 226, 227, 228, 237, 238, 246, 254, 256, 259, 260, 283, 288, 290, 293, 295, 296, 319, 321, 324, 330, 334, 336, 346, 347, 400, 415, 450, 464, 465, 476, 480, 485, 487, 497, 501, 511, 518, 540, 541, 542, 543, 558, 564, 570, 580, 582, 595, 596, 600, 615, 616, 647, 654, 683, 710, 711, 716, 719, 726, 728, 730, 735, 738, 739, 740, 741, 749, 756, 774, 776, 779, 788, 792, 794, 810, 822, 832, 846, 854, 855, 856, 864, 865, 875, 876, 890, 891, 894, 895, 896, 924, 930, 939, 1006, 1021, 1060, 1075, 1076, 1077, 1085, 1095, 1097, 1112, 1124, 1131, 1153, 1154, 1155, 1156, 1171, 1183, 1184, 1199, 1200, 1302, 1310, 1318, 1319, 1324, 1334, 1347], "other_df": [226, 321], "other_lf": [854, 924], "otherwis": [38, 138, 141, 148, 153, 165, 168, 172, 207, 231, 238, 256, 259, 278, 283, 307, 321, 370, 375, 396, 400, 411, 466, 467, 468, 469, 551, 560, 571, 601, 605, 606, 608, 613, 648, 658, 661, 665, 670, 672, 677, 681, 682, 685, 696, 723, 727, 756, 759, 768, 772, 800, 810, 865, 875, 907, 924, 929, 973, 977, 998, 1006, 1018, 1079, 1080, 1081, 1082, 1164, 1172, 1191, 1193, 1197, 1218, 1220, 1227, 1236, 1239, 1243, 1248, 1250, 1255, 1259, 1260, 1263, 1274, 1308, 1319, 1339], "our": 180, "out": [8, 14, 38, 46, 47, 48, 49, 105, 130, 155, 158, 166, 170, 203, 253, 256, 321, 357, 375, 526, 528, 658, 661, 670, 800, 846, 873, 924, 960, 977, 1139, 1141, 1236, 1239, 1248, 1345], "outcom": [601, 810], "outer": [51, 59, 290, 321, 891, 924], "outermost": 50, "outlin": 7, "output": [0, 8, 30, 37, 40, 41, 42, 43, 44, 45, 46, 182, 190, 224, 231, 235, 238, 244, 246, 255, 259, 261, 271, 284, 291, 295, 321, 333, 335, 358, 390, 391, 396, 411, 450, 530, 551, 559, 560, 571, 574, 585, 608, 615, 657, 673, 677, 717, 718, 723, 727, 728, 729, 730, 740, 741, 742, 771, 772, 776, 794, 810, 822, 826, 836, 842, 860, 864, 865, 875, 877, 887, 894, 907, 924, 937, 938, 961, 992, 998, 1018, 1060, 1143, 1172, 1193, 1235, 1251, 1255, 1304, 1308, 1319], "output_path": [575, 880, 924], "outsid": [400, 810, 1006, 1319], "over": [132, 136, 137, 138, 141, 147, 150, 155, 166, 167, 182, 200, 223, 224, 225, 231, 254, 255, 256, 268, 284, 285, 299, 307, 321, 325, 390, 391, 410, 413, 467, 475, 559, 560, 571, 573, 574, 575, 576, 577, 585, 586, 611, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 717, 718, 746, 747, 760, 771, 772, 784, 789, 810, 826, 831, 883, 887, 899, 907, 921, 924, 930, 992, 1017, 1080, 1085, 1172, 1206, 1207, 1209, 1213, 1304, 1319, 1347], "overflow": [392, 408, 409, 700, 712, 810, 828, 924, 993, 1015, 1016, 1278, 1290, 1319], "overhead": [50, 91, 150, 153, 154, 155], "overlap": [660, 667, 669, 671, 1238, 1245, 1247, 1249], "overrid": [1, 40, 123, 125, 126, 127, 128, 129, 136, 138, 139, 141, 145, 146, 147, 154, 163, 164, 170, 172, 321, 924], "overridden": [40, 123, 125, 127, 129, 145, 146, 154, 172, 321, 924], "overview": [321, 810, 822, 924, 1319, 1346, 1350], "overwrit": [14, 38, 39, 123, 125, 126, 127, 129, 133, 136, 137, 145, 146, 150, 154, 179, 290, 321, 332, 710, 810, 891, 924], "overwrite_schema": [39, 321], "ow": 690, "own": [800, 1300, 1319, 1350], "p": [53, 245, 321, 605, 792, 810, 868, 924, 930, 1248, 1250, 1332], "p13dt14h0": 450, "p1dt42": 450, "pa": [39, 123, 156, 321, 789], "pa_tabl": 789, "pacif": [419, 1025], "pack": [242, 321], "packag": [32, 33, 34, 138, 321, 325, 418, 737, 928, 1024], "pad": [679, 680, 705, 1257, 1258, 1283], "pad_end": [680, 1258], "pad_start": [679, 705, 1257, 1283], "page": [45, 49, 142, 148, 153, 155, 321, 810, 822, 924, 1319, 1346], "pair": [123, 125, 126, 127, 129, 145, 146, 154, 250, 321, 871, 924, 1350], "pairwis": [188, 321], "panda": [38, 124, 128, 133, 158, 203, 212, 280, 286, 288, 321, 437, 438, 716, 789, 810, 846, 850, 888, 890, 924, 1047, 1048, 1301, 1302, 1319, 1329, 1331, 1347], "pandas_df": 1347, "pane": [40, 321], "panic": 106, "pap": 1250, "papa": 672, "papai": [672, 1250], "papaya": [672, 685, 696, 1250, 1263, 1274], "parallel": [57, 59, 132, 139, 148, 155, 212, 227, 229, 245, 260, 296, 321, 410, 523, 723, 800, 810, 822, 850, 854, 855, 876, 895, 907, 924, 1017, 1136, 1308, 1319], "parallelis": [231, 307, 321, 1172, 1319], "parallelstrategi": [148, 155], "param": [40, 123, 125, 126, 127, 129, 136, 137, 145, 146, 150, 154, 165, 166, 170, 254, 321, 924], "paramet": [2, 3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 63, 66, 67, 68, 69, 70, 78, 82, 92, 98, 107, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 179, 180, 182, 183, 184, 188, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 216, 217, 222, 224, 225, 226, 227, 228, 230, 231, 235, 237, 238, 241, 242, 244, 245, 246, 248, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 264, 266, 267, 268, 269, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 300, 304, 306, 307, 313, 315, 321, 330, 332, 333, 334, 335, 336, 346, 353, 354, 357, 358, 365, 366, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 390, 391, 392, 393, 397, 400, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 418, 420, 422, 423, 428, 440, 443, 444, 445, 446, 447, 449, 450, 458, 461, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 493, 495, 496, 497, 501, 509, 511, 513, 518, 519, 520, 521, 523, 526, 527, 528, 529, 530, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 558, 559, 560, 567, 568, 574, 575, 576, 580, 582, 585, 586, 587, 588, 589, 590, 595, 596, 600, 601, 602, 605, 606, 608, 609, 611, 613, 614, 615, 616, 617, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 705, 706, 708, 710, 711, 713, 717, 718, 719, 720, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 806, 810, 826, 828, 829, 831, 832, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 848, 849, 850, 851, 854, 855, 856, 859, 860, 864, 865, 868, 869, 870, 871, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 904, 906, 907, 913, 915, 924, 928, 929, 930, 934, 936, 937, 938, 939, 949, 956, 957, 960, 961, 968, 969, 973, 974, 976, 977, 978, 979, 980, 982, 992, 993, 994, 999, 1005, 1006, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1024, 1026, 1028, 1029, 1034, 1050, 1053, 1054, 1055, 1056, 1057, 1059, 1060, 1068, 1071, 1074, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1085, 1086, 1087, 1088, 1089, 1093, 1094, 1100, 1101, 1102, 1104, 1105, 1106, 1107, 1119, 1122, 1126, 1131, 1132, 1133, 1134, 1136, 1139, 1140, 1141, 1142, 1143, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1162, 1163, 1164, 1165, 1172, 1184, 1188, 1191, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1223, 1226, 1230, 1231, 1232, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1256, 1257, 1258, 1259, 1260, 1261, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1280, 1283, 1284, 1287, 1291, 1294, 1295, 1296, 1297, 1298, 1300, 1301, 1304, 1305, 1308, 1309, 1310, 1319, 1328, 1329, 1330, 1331, 1332, 1334, 1339, 1342, 1347], "parameteris": 138, "parametr": 822, "paramount": [860, 924], "parent": [40, 70, 205, 321], "parenthes": 18, "parquet": [45, 49, 148, 149, 155, 321, 822, 924], "parquetcompress": [45, 321], "pars": [37, 46, 135, 136, 137, 139, 141, 146, 147, 148, 150, 153, 154, 155, 182, 211, 259, 260, 264, 267, 284, 295, 296, 300, 321, 391, 400, 497, 601, 615, 616, 654, 674, 683, 699, 700, 710, 718, 728, 730, 735, 738, 739, 740, 741, 749, 762, 774, 776, 779, 788, 790, 792, 794, 800, 810, 826, 849, 875, 876, 879, 882, 887, 894, 895, 900, 924, 1006, 1107, 1199, 1200, 1223, 1252, 1277, 1278, 1319, 1328], "parseerror": [700, 1278], "parser": [136, 141], "part": [123, 141, 175, 180, 278, 283, 321, 601, 667, 687, 688, 810, 842, 869, 880, 896, 924, 934, 1245, 1265, 1266, 1343], "parti": [559, 810], "partial": [126, 136, 150, 321, 924], "particip": [40, 321], "particular": [136, 141, 142, 144, 182, 198, 284, 321, 390, 391, 717, 718, 810, 826, 887, 924, 992, 1078, 1304, 1319], "partit": [45, 139, 148, 151, 153, 155, 156, 225, 244, 321, 601, 810], "partition_bi": [45, 137, 225, 321, 601, 810], "partition_chunk_size_byt": [45, 321], "partition_col": [45, 139, 321], "partition_df": 137, "partition_num": 139, "partition_on": 139, "partition_rang": 139, "partitioned_object": [45, 321], "pass": [32, 33, 34, 36, 38, 39, 40, 45, 51, 98, 125, 133, 135, 138, 139, 141, 148, 150, 153, 156, 159, 161, 164, 166, 168, 170, 182, 188, 192, 211, 212, 214, 227, 230, 244, 245, 246, 250, 253, 259, 264, 267, 272, 280, 283, 284, 291, 295, 300, 321, 365, 391, 418, 428, 440, 444, 450, 473, 494, 544, 559, 560, 575, 601, 605, 615, 616, 621, 645, 654, 683, 690, 691, 692, 718, 727, 735, 737, 762, 792, 800, 806, 810, 826, 838, 849, 850, 852, 855, 860, 868, 871, 873, 875, 879, 880, 882, 887, 894, 899, 900, 907, 924, 928, 929, 968, 1024, 1034, 1054, 1060, 1086, 1101, 1126, 1157, 1172, 1199, 1200, 1223, 1261, 1268, 1269, 1270, 1291, 1301, 1319, 1332, 1347], "pass_nam": [560, 810], "pass_name_to_appli": [810, 928], "password": [136, 139, 142, 144], "past": [36, 321, 860, 924], "pat": [670, 1248], "patch": 69, "path": [3, 6, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 134, 136, 137, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 191, 261, 321, 413, 574, 575, 578, 644, 810, 837, 877, 880, 924, 928, 1221, 1253, 1319, 1350], "pathlib": [35, 37, 41, 42, 45, 150, 321], "pattern": [59, 94, 136, 137, 141, 150, 153, 154, 155, 224, 321, 393, 397, 569, 658, 659, 660, 663, 666, 667, 668, 669, 670, 671, 681, 682, 683, 689, 907, 930, 994, 999, 1218, 1220, 1236, 1237, 1238, 1241, 1244, 1245, 1246, 1247, 1248, 1249, 1259, 1260, 1261, 1267, 1319, 1342], "paya": 696, "pct": 166, "pct_chang": [810, 1319], "pd": [124, 128, 716, 789, 810, 1301, 1302, 1319, 1329, 1347], "pd_df": 128, "pd_frame": 789, "pd_seri": 128, "pdsh": [132, 137], "pea": 672, "peak": [255, 321, 603, 604, 810, 1189, 1190, 1319], "peak_max": [810, 1319], "peak_min": [810, 1319], "pear": [672, 685, 696, 1250, 1263, 1274], "pearson": [188, 321, 509, 651, 742, 810, 1122, 1230, 1319], "penalti": [695, 697, 698, 1273, 1275, 1276], "per": [14, 37, 40, 46, 141, 164, 166, 182, 210, 242, 243, 246, 260, 267, 284, 296, 310, 312, 313, 321, 357, 391, 523, 526, 528, 559, 560, 584, 585, 587, 589, 591, 592, 654, 718, 723, 735, 810, 826, 876, 882, 887, 895, 910, 912, 913, 924, 928, 960, 1136, 1139, 1141, 1308, 1319], "percent": [602, 810, 1188, 1319], "percentag": [163, 166, 170, 602, 810, 1188, 1319], "percentil": [190, 321, 836, 924, 1019, 1319], "perform": [38, 45, 47, 49, 51, 96, 101, 103, 108, 110, 117, 124, 136, 137, 138, 142, 146, 148, 150, 153, 154, 155, 179, 203, 211, 212, 226, 227, 228, 231, 249, 253, 255, 256, 279, 307, 321, 381, 386, 389, 395, 396, 480, 551, 559, 560, 601, 621, 659, 669, 671, 676, 677, 683, 695, 697, 698, 810, 846, 850, 854, 855, 856, 873, 882, 897, 898, 924, 983, 988, 991, 997, 998, 1172, 1237, 1247, 1249, 1254, 1255, 1261, 1273, 1275, 1276, 1300, 1319], "perhap": [285, 321], "period": [136, 137, 150, 212, 253, 321, 445, 458, 466, 468, 469, 602, 621, 751, 752, 754, 755, 797, 798, 810, 850, 873, 924, 1055, 1068, 1079, 1081, 1082, 1188, 1319], "persist": 1334, "phase": [38, 289, 321], "philadelphia": [681, 682], "phone": [703, 1281], "physic": [50, 63, 91, 136, 137, 227, 246, 321, 716, 810, 827, 854, 855, 924, 1000, 1302, 1319], "pi": [10, 412, 810, 1008, 1010, 1228, 1292, 1319, 1340, 1344], "pick": [167, 800], "pickl": [413, 810, 837, 924], "pip": [418, 737, 1024], "pipe": [321, 810, 924], "pipelin": [141, 283, 321], "pitfal": 108, "pivot": [289, 321, 930], "pivot_long": [288, 321, 890, 924], "pivot_wid": [246, 321], "pivotagg": [246, 321], "pixel": [40, 321], "pk": [463, 810, 1074, 1319], "pl": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 35, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 69, 78, 82, 90, 91, 95, 98, 99, 100, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 142, 145, 146, 147, 150, 151, 152, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 170, 172, 175, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 321, 324, 325, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 806, 810, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 924, 929, 930, 934, 935, 936, 937, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1091, 1092, 1093, 1094, 1096, 1098, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1286, 1287, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1319, 1324, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1341, 1342, 1343, 1344, 1345, 1347, 1348, 1350], "pl_frame": 789, "place": [10, 11, 37, 46, 175, 193, 200, 216, 217, 246, 251, 256, 267, 293, 321, 325, 346, 358, 366, 530, 546, 653, 654, 735, 810, 882, 924, 939, 949, 961, 969, 1085, 1143, 1159, 1196, 1232, 1319], "placehold": 761, "plai": [12, 741], "plain": [842, 924], "plan": [227, 229, 321, 413, 810, 827, 831, 837, 842, 854, 855, 877, 880, 924, 1349], "plane": [733, 734], "platform": 158, "ple": 1342, "pleas": [128, 138, 139, 203, 212, 237, 321, 325, 467, 743, 756, 810, 846, 850, 864, 924, 1080, 1319], "plenti": 930, "plot": [321, 869, 880, 924, 1319], "plu": [411, 556, 810, 1018, 1169, 1193, 1319, 1341], "plugin": [0, 810, 822], "plugin_path": 928, "point": [10, 11, 31, 32, 33, 34, 37, 40, 41, 45, 46, 47, 48, 49, 57, 58, 67, 69, 71, 72, 73, 133, 146, 148, 150, 153, 154, 155, 156, 163, 164, 166, 167, 168, 169, 170, 171, 194, 201, 212, 228, 229, 268, 278, 283, 289, 290, 321, 324, 325, 399, 410, 411, 416, 445, 446, 474, 479, 480, 491, 504, 505, 539, 560, 608, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 739, 786, 787, 810, 831, 832, 839, 842, 844, 850, 856, 860, 871, 883, 891, 924, 1001, 1003, 1017, 1018, 1022, 1055, 1056, 1087, 1092, 1102, 1152, 1193, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1217, 1298, 1303, 1319, 1324, 1347], "poison": [593, 594, 810, 1181, 1182, 1319], "pola": 321, "polar": [1, 321, 324, 325, 809, 810, 816, 822, 924, 928, 929, 930, 1319, 1323, 1324, 1346, 1347, 1349], "polars_df": 1347, "polars_file_cache_ttl": [146, 150, 153, 154], "polars_hypothesis_profil": [169, 171], "polars_max_thread": 172, "polars_seri": 1347, "polars_verbos": [831, 924], "polarsdatafram": 179, "polarsdataset": [283, 321], "polarsdatatyp": [60, 70, 78, 136, 137, 150, 163, 164, 165, 166, 167, 170, 183, 231, 278, 283, 321, 378, 392, 470, 559, 560, 615, 616, 674, 758, 770, 771, 772, 782, 785, 801, 806, 810, 828, 924, 930, 980, 993, 1172, 1199, 1200, 1252, 1319], "polarsintegertyp": [732, 766, 767], "polarstemporaltyp": [695, 1273], "polarstyp": 59, "pool": [14, 58, 172, 173, 832, 924], "poor": 138, "pop2": [227, 321, 855, 924], "popul": [227, 321, 855, 924], "port": [38, 136, 138, 139, 142, 144, 321], "portion": 1342, "pos_a": 1342, "posit": [40, 134, 136, 137, 141, 142, 143, 144, 145, 146, 147, 148, 149, 180, 192, 199, 211, 244, 259, 260, 264, 267, 287, 295, 296, 300, 321, 365, 466, 468, 469, 470, 544, 601, 606, 608, 645, 654, 668, 681, 682, 700, 710, 733, 734, 735, 738, 739, 740, 741, 758, 788, 792, 806, 810, 838, 843, 849, 875, 876, 879, 882, 889, 894, 895, 900, 924, 930, 968, 1079, 1081, 1082, 1157, 1191, 1193, 1223, 1246, 1278, 1319, 1348], "position": 1319, "possibl": [40, 45, 49, 98, 100, 125, 126, 129, 136, 141, 163, 166, 170, 211, 224, 231, 255, 286, 307, 321, 557, 560, 571, 622, 688, 722, 810, 831, 849, 882, 888, 924, 1172, 1205, 1266, 1319], "post": [51, 69], "postgresql": [38, 138, 139, 321, 601, 810, 1345], "potenti": [108, 110, 150, 153, 154, 224, 254, 256, 321, 584, 681, 682, 834, 836, 841, 874, 893, 924, 928, 1259, 1260], "pow": [810, 1319, 1340], "pow_n": 53, "power": [790, 1191, 1319, 1341], "powersofn": 53, "pre": [551, 560, 608, 782, 785, 801, 810, 1193, 1319], "preced": [166, 930], "precis": [10, 11, 37, 40, 46, 67, 138, 224, 255, 256, 275, 278, 283, 321, 420, 699, 924, 930, 1026, 1277], "predefin": [246, 321], "predic": [39, 46, 47, 48, 49, 57, 58, 150, 153, 154, 155, 156, 183, 203, 222, 228, 254, 321, 392, 476, 725, 760, 800, 810, 831, 832, 842, 846, 856, 860, 869, 871, 880, 897, 898, 924, 1089, 1218, 1220, 1319], "predicate_pushdown": [46, 47, 48, 49, 57, 58, 831, 832, 842, 860, 869, 880, 924], "predict": [249, 291, 321], "prefer": [136, 137, 141, 150, 171, 182, 200, 224, 231, 254, 255, 284, 307, 321, 390, 391, 470, 560, 717, 718, 810, 826, 887, 924, 992, 1085, 1172, 1304, 1319, 1329, 1350], "prefilt": 155, "prefix": [39, 136, 137, 150, 175, 321, 332, 380, 397, 450, 569, 585, 588, 589, 591, 592, 689, 692, 693, 705, 810, 930, 982, 999, 1267, 1271, 1283], "prefix_": 588, "prefix_a": 588, "prefix_b": 588, "prefix_field": [586, 590], "presenc": [759, 768, 930], "present": [126, 166, 207, 321, 501, 575, 691, 692, 810, 880, 924], "preserv": [194, 195, 203, 211, 226, 228, 231, 279, 280, 321, 416, 417, 418, 437, 438, 476, 522, 601, 615, 648, 665, 810, 839, 840, 846, 854, 856, 924, 1022, 1023, 1024, 1089, 1135, 1199, 1227, 1243, 1301, 1319], "pressur": [49, 136, 137, 146, 148, 150, 154, 155, 646, 810, 924, 1224, 1319], "presum": [559, 810], "prev_pow2": 53, "prevent": [279, 321, 332, 408, 409, 584, 712, 810, 924, 1015, 1016, 1290, 1319], "preview": [210, 321], "previou": [53, 175, 321, 324, 418, 584, 585, 587, 589, 591, 592, 602, 708, 810, 1024, 1188, 1319, 1324], "previous": [2, 3], "price": [321, 324, 1350], "primari": [141, 1347, 1350], "primarili": 1, "primit": [39, 321, 501, 810], "print": [9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 25, 27, 28, 137, 158, 159, 161, 196, 210, 211, 225, 229, 277, 299, 321, 494, 576, 751, 754, 810, 831, 852, 924, 930, 1112, 1297, 1319, 1350], "prior": [128, 321, 324, 1319, 1324], "prioriti": 167, "probabl": [463, 608, 810, 1074, 1193, 1319], "process": [14, 37, 46, 47, 48, 49, 57, 58, 136, 137, 138, 150, 172, 255, 321, 831, 832, 924], "process_index": [278, 321], "produc": [2, 3, 166, 170, 183, 226, 321, 354, 392, 520, 571, 771, 810, 854, 860, 924, 957, 1133], "product": [51, 188, 226, 321, 408, 415, 810, 854, 924, 1015, 1021, 1319], "profil": [32, 169, 171, 831, 924], "profile_nam": 32, "programmat": [190, 321, 836, 924], "progress": [67, 69, 73], "project": [46, 47, 48, 49, 57, 58, 150, 152, 153, 154, 155, 653, 654, 810, 831, 832, 842, 860, 869, 871, 880, 924], "projection_pushdown": [46, 47, 48, 49, 57, 58, 831, 832, 842, 860, 869, 880, 924], "prompt": 130, "propag": [358, 465, 530, 593, 594, 596, 657, 673, 740, 741, 810, 961, 1076, 1143, 1181, 1182, 1184, 1235, 1251, 1319], "propagate_nan": 742, "proper": [228, 321, 856, 924], "properti": [40, 179, 186, 187, 196, 204, 215, 258, 263, 294, 298, 321, 324, 325, 833, 834, 841, 874, 893, 898, 924, 929, 930, 1073, 1091, 1180, 1222, 1319, 1324, 1350], "proport": [723, 810, 1308, 1319], "protocol": [39, 124, 139, 179, 321], "prototyp": 806, "provid": [31, 32, 33, 34, 37, 38, 40, 41, 45, 46, 47, 48, 49, 136, 137, 139, 140, 141, 146, 148, 150, 151, 152, 153, 154, 155, 166, 170, 203, 207, 222, 268, 278, 321, 324, 375, 376, 450, 470, 491, 551, 559, 560, 661, 662, 666, 674, 675, 691, 692, 693, 694, 762, 792, 810, 822, 831, 846, 883, 899, 921, 924, 977, 978, 1060, 1102, 1121, 1172, 1239, 1240, 1244, 1252, 1253, 1298, 1319, 1332, 1339, 1342, 1347, 1350], "provis": 823, "prune": [148, 153, 155, 860, 924], "pt0": 450, "public": [139, 321, 810, 822, 924, 1319, 1346], "pulp": 1328, "pure": [40, 321], "purpos": [583, 810, 924], "push": [150, 153, 154, 155, 156, 183, 321, 392, 810], "pushdown": [46, 47, 48, 49, 57, 58, 831, 832, 842, 860, 869, 871, 880, 897, 898, 924, 1218, 1220, 1319], "put": [37, 46, 69, 321, 325, 924], "pwd": 138, "py": 152, "pyarrow": [39, 45, 123, 128, 136, 139, 140, 142, 144, 148, 151, 156, 158, 273, 279, 280, 321, 789, 822, 1294, 1300, 1301, 1319, 1329, 1331, 1347], "pyarrow_opt": [45, 140, 148, 151, 321], "pyarrow_t": 1347, "pycapsul": [178, 933], "pycapsuleinterfac": [178, 933], "pydant": 158, "pyiceberg": [152, 158], "pyodbc": [38, 321], "pyodbc_uri": [38, 321], "pyspark": 172, "pytest": [159, 161], "python": [0, 32, 33, 34, 41, 42, 69, 80, 94, 124, 136, 137, 142, 144, 158, 159, 161, 179, 224, 231, 255, 256, 275, 307, 321, 413, 418, 422, 480, 559, 560, 668, 737, 751, 752, 754, 755, 797, 798, 800, 810, 816, 837, 907, 924, 929, 1024, 1028, 1038, 1039, 1040, 1044, 1172, 1246, 1299, 1319, 1323, 1346], "pythondatatyp": [60, 78, 183, 321, 806, 828, 924, 930], "pythonliter": [940, 983, 988, 991, 1090, 1123, 1173, 1174, 1175, 1176, 1218, 1319], "pytorch": [283, 321, 1303, 1319], "q": [256, 321, 792, 1319, 1324, 1332], "q1": [40, 321], "q2": [40, 321], "q3": [40, 321], "q4": [40, 321], "qcut": [411, 810, 1018, 1319], "qhoo": 1350, "qmark": 138, "qqr": 930, "quad": [467, 810, 1080, 1319], "qualifi": [38, 321], "quantifi": [667, 1245], "quantil": [321, 608, 631, 632, 810, 924, 1193, 1210, 1319, 1336], "quantile_cont": 1340, "quantile_disc": 1340, "quarter": [212, 227, 253, 291, 321, 440, 445, 458, 621, 624, 626, 628, 630, 632, 635, 637, 639, 751, 752, 754, 755, 797, 798, 810, 850, 855, 873, 924, 1050, 1055, 1068, 1343], "queri": [46, 47, 48, 49, 57, 58, 138, 139, 142, 150, 153, 154, 155, 200, 229, 245, 268, 321, 551, 559, 560, 675, 789, 810, 831, 832, 842, 869, 880, 883, 897, 898, 899, 907, 916, 924, 1085, 1172, 1253, 1319, 1328, 1329, 1331, 1335, 1346, 1348, 1349], "quick": [806, 1019, 1319, 1350], "quit": [227, 321, 855, 924], "quot": [37, 38, 46, 136, 137, 139, 150, 321, 703, 924, 1281], "quota_project_id": 34, "quote_char": [37, 46, 136, 137, 150, 321, 924], "quote_plu": 139, "quote_styl": [37, 46, 321, 924], "quotes_titl": 703, "quotient": 1341, "r": [136, 137, 150, 321, 566, 605, 660, 665, 666, 667, 668, 681, 682, 810, 930, 1238, 1243, 1244, 1245, 1246, 1259, 1260, 1274, 1332, 1342], "r1": 59, "r2": 59, "r3": 59, "rab": [658, 684, 1236, 1262, 1337], "rad": 1344, "radian": [412, 733, 810, 1340], "radix": [700, 1278], "rai": [733, 734], "raini": [681, 682, 1259, 1260], "rais": [1, 15, 16, 20, 39, 95, 96, 99, 100, 102, 103, 104, 105, 106, 107, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 136, 137, 141, 147, 148, 150, 155, 159, 161, 179, 183, 207, 246, 254, 279, 321, 357, 375, 392, 418, 443, 444, 526, 528, 571, 606, 608, 616, 658, 661, 670, 695, 697, 698, 700, 702, 753, 770, 810, 899, 960, 977, 1024, 1053, 1054, 1139, 1141, 1191, 1193, 1200, 1236, 1239, 1248, 1273, 1275, 1276, 1278, 1280, 1300, 1319], "raise_if_empti": [136, 137, 141, 147, 150], "raise_if_undetermin": 571, "raise_on_fail": 899, "raker": 133, "ram": [46, 47, 48, 49, 924], "ran": [810, 928], "random": [40, 41, 142, 157, 164, 213, 257, 321, 489, 539, 611, 642, 647, 723, 810, 822, 1100, 1152, 1195, 1217, 1226, 1308, 1319], "randomli": 165, "rang": [17, 40, 138, 139, 190, 198, 212, 225, 321, 337, 412, 418, 426, 436, 441, 442, 443, 445, 458, 459, 495, 732, 737, 740, 750, 751, 752, 753, 754, 755, 766, 767, 796, 797, 798, 810, 836, 850, 924, 930, 1019, 1024, 1032, 1046, 1051, 1052, 1053, 1055, 1068, 1069, 1078, 1188, 1319, 1342], "rank": [346, 523, 735, 742, 757, 810, 949, 1136, 1319], "rankmethod": [611, 810, 1195, 1319], "rare": [419, 1025], "rather": [227, 321, 482, 559, 576, 608, 620, 705, 810, 855, 924, 1193, 1204, 1283, 1319], "raw": 139, "raw_output": [575, 880, 924], "re": [207, 212, 223, 286, 288, 321, 437, 438, 447, 450, 850, 888, 890, 924, 1047, 1048, 1057, 1060, 1347], "reach": [679, 680, 705, 1257, 1258, 1283], "read": [36, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 191, 200, 321, 324, 413, 482, 800, 810, 837, 924, 1085, 1319, 1324], "read_arrow_batches_from_odbc": 138, "read_clipboard": [36, 321], "read_csv": [135, 141, 150], "read_csv_batch": 132, "read_databas": 139, "read_database_uri": 138, "read_excel": 147, "read_ndjson": 145, "read_od": 141, "read_opt": 141, "read_parquet": 155, "read_tabl": 148, "readabl": 806, "reader": [45, 49, 132, 136, 137, 142, 144, 148, 321, 924], "readi": 917, "readthedoc": [40, 321], "real": [667, 1245], "realli": [410, 659, 683, 810, 1017, 1237, 1261, 1319], "realloc": [146, 150, 153, 154, 200, 321, 1085, 1319], "rearrang": [231, 321], "reason": [172, 190, 321, 551, 559, 810, 836, 924], "receiv": [51, 138, 150, 231, 245, 307, 321, 560, 605, 810, 868, 924, 1350], "recent": [159, 160, 161, 162, 279, 321, 602, 616, 810, 1188, 1200, 1300, 1319, 1331, 1347], "rechunk": [59, 123, 128, 136, 137, 140, 142, 144, 146, 148, 150, 151, 153, 154, 155, 200, 321, 810, 1004, 1085, 1096, 1178, 1319], "recognis": [15, 16, 20, 930], "recommend": [40, 172, 190, 224, 229, 245, 321, 551, 827, 836, 924, 930], "record": [37, 42, 46, 133, 144, 156, 321, 924], "record_batch": [225, 321], "recordbatch": [123, 225, 321, 789, 1329, 1331, 1347], "recurs": [466, 468, 469, 810, 1079, 1081, 1082, 1319], "red": [50, 90, 91, 307, 723, 810, 907, 1308, 1319], "redempt": 1328, "redshift": 139, "reduc": [49, 136, 137, 146, 148, 150, 153, 154, 155, 255, 308, 309, 311, 314, 321, 646, 747, 760, 810, 908, 909, 911, 914, 924, 1174, 1192, 1224, 1290, 1319], "reduct": [205, 321, 560, 810], "ref": [666, 668, 1244, 1246], "refer": [0, 32, 40, 94, 134, 136, 137, 141, 142, 143, 144, 145, 146, 147, 148, 149, 188, 191, 321, 325, 413, 447, 450, 611, 666, 681, 682, 695, 697, 698, 702, 810, 837, 924, 1057, 1060, 1195, 1259, 1260, 1273, 1275, 1276, 1280, 1319], "referenc": [40, 321, 559, 681, 682, 708, 810, 1259, 1260, 1329, 1347], "reg": 133, "regard": [136, 742], "regardless": [128, 182, 211, 227, 284, 321, 391, 423, 675, 718, 800, 810, 826, 855, 887, 924, 1029, 1253], "regex": [92, 470, 566, 567, 569, 658, 660, 666, 667, 668, 670, 681, 682, 706, 758, 810, 930, 1236, 1238, 1244, 1245, 1246, 1248, 1259, 1260], "regexp_lik": 1340, "region": [40, 152, 321], "regist": [1, 52, 53, 54, 55, 169, 171, 268, 321, 810, 883, 924, 928, 1328, 1329, 1331, 1332, 1333, 1334, 1347, 1349], "register_dataframe_namespac": [1, 53, 54, 55], "register_expr_namespac": [1, 52, 54, 55], "register_glob": [1330, 1332, 1334, 1347], "register_lazyframe_namespac": [1, 52, 53, 55], "register_mani": [1330, 1331, 1334], "register_plugin": 810, "register_plugin_funct": [810, 928], "register_series_namespac": [1, 52, 53, 54], "registr": [268, 321, 789, 822, 883, 924, 1334, 1347], "regrid": [495, 810], "regular": [131, 224, 254, 255, 291, 298, 321, 470, 658, 659, 660, 664, 666, 667, 668, 669, 670, 671, 681, 682, 683, 737, 758, 806, 810, 898, 924, 930, 1236, 1237, 1238, 1242, 1244, 1245, 1246, 1247, 1248, 1249, 1259, 1260, 1261, 1345], "reinterpret": [810, 1319], "rel": [40, 139, 140, 151, 152, 159, 160, 161, 162, 321, 440, 466, 468, 469, 723, 810, 1050, 1079, 1081, 1082, 1308, 1319], "relat": [138, 175, 681, 682, 930, 1259, 1260, 1335], "releas": [58, 226, 321, 560, 810, 832, 854, 924, 1350], "release_year": 1328, "relev": 59, "reli": [226, 321, 854, 924], "reliabl": [90, 91], "remain": [136, 137, 150, 194, 195, 198, 203, 246, 321, 416, 417, 476, 522, 615, 687, 688, 810, 839, 840, 846, 860, 924, 1022, 1023, 1078, 1089, 1135, 1199, 1265, 1266, 1319, 1334], "remaind": [378, 688, 980, 1266, 1341], "remap": 93, "remot": [136, 137, 142, 144], "remov": [4, 136, 137, 150, 179, 192, 276, 321, 470, 585, 690, 691, 692, 693, 694, 758, 810, 838, 924, 1268, 1269, 1270, 1271, 1272, 1295, 1319, 1349], "removes_pronoun": 683, "renam": [1, 126, 136, 137, 173, 211, 259, 260, 295, 296, 300, 302, 321, 332, 482, 577, 578, 584, 585, 586, 587, 589, 591, 592, 708, 710, 788, 792, 810, 849, 875, 876, 894, 895, 900, 902, 924, 936, 1248, 1287, 1296, 1319, 1347], "rename_field": [687, 688, 1265, 1266], "render": [575, 880, 924], "render_as_str": 138, "reoconstruct": [256, 321], "repeat": [142, 153, 612, 614, 782, 801, 810], "repeat_bi": 810, "replac": [38, 39, 136, 137, 150, 201, 202, 251, 285, 288, 295, 296, 321, 324, 422, 444, 474, 559, 560, 616, 682, 683, 698, 810, 844, 890, 894, 895, 924, 1028, 1054, 1087, 1200, 1218, 1220, 1260, 1261, 1276, 1319, 1324, 1340], "replace_al": [616, 681, 810, 1199, 1200, 1259, 1319], "replace_column": 321, "replace_strict": [615, 810, 1199, 1319], "replace_time_zon": [419, 425, 427, 1030, 1031, 1058], "replace_with": [683, 1261], "replic": [716, 810, 1302, 1319], "report": [138, 678, 1256], "repr": [130, 393, 397, 450, 994, 999, 1060], "repres": [37, 40, 46, 65, 66, 68, 79, 83, 88, 123, 125, 127, 128, 129, 138, 246, 268, 269, 278, 279, 292, 299, 321, 396, 480, 504, 505, 547, 553, 559, 656, 672, 677, 681, 682, 685, 696, 724, 727, 744, 756, 758, 770, 771, 772, 781, 786, 787, 791, 799, 806, 810, 883, 884, 892, 924, 930, 998, 1218, 1234, 1250, 1255, 1259, 1260, 1263, 1274, 1300, 1309, 1319, 1347], "represent": [10, 43, 44, 65, 66, 68, 83, 130, 261, 277, 321, 393, 395, 396, 397, 421, 426, 429, 431, 432, 433, 434, 435, 436, 439, 441, 442, 446, 459, 460, 462, 574, 716, 810, 842, 858, 877, 924, 994, 997, 998, 999, 1000, 1027, 1032, 1035, 1036, 1037, 1041, 1042, 1043, 1045, 1046, 1049, 1051, 1052, 1056, 1069, 1070, 1072, 1297, 1302, 1319, 1338], "request": 34, "requested_schema": [178, 933], "requir": [1, 32, 33, 34, 39, 40, 51, 128, 138, 139, 159, 160, 161, 162, 188, 194, 254, 278, 279, 280, 283, 321, 371, 393, 397, 466, 468, 469, 552, 560, 601, 624, 626, 628, 630, 632, 635, 637, 639, 646, 695, 697, 698, 720, 785, 810, 834, 839, 840, 841, 882, 893, 924, 974, 1077, 1079, 1081, 1082, 1165, 1224, 1259, 1273, 1275, 1276, 1300, 1301, 1305, 1319], "require_al": 930, "rerais": [58, 832, 924], "rerun": [200, 321, 1085, 1319], "resampl": [212, 321, 850, 924], "reset": [4, 175], "reset_index": [128, 212, 321, 850, 924], "reshap": [246, 279, 321, 524, 739, 810, 1137, 1319], "resolv": [422, 551, 833, 834, 841, 874, 893, 924], "resourc": [899, 928], "respect": [40, 136, 150, 321, 659, 669, 671, 683, 930, 1237, 1247, 1249, 1261, 1303, 1319], "respons": [139, 238, 321, 865, 924], "rest": [703, 1281], "restor": [175, 321, 324, 1319, 1324], "restore_default": 175, "restrict": [30, 688, 1266], "result": [13, 37, 43, 44, 45, 46, 47, 48, 49, 51, 59, 127, 128, 129, 138, 139, 141, 150, 153, 155, 156, 170, 200, 203, 212, 213, 226, 227, 228, 242, 246, 253, 256, 261, 262, 264, 278, 279, 280, 291, 298, 300, 306, 321, 418, 445, 447, 450, 458, 466, 467, 468, 469, 473, 480, 489, 497, 509, 550, 551, 559, 560, 574, 601, 606, 608, 615, 616, 617, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 644, 645, 665, 682, 686, 687, 698, 719, 723, 746, 747, 751, 753, 754, 755, 756, 770, 771, 782, 785, 786, 787, 789, 801, 810, 827, 831, 836, 846, 850, 854, 855, 856, 860, 869, 873, 877, 878, 879, 898, 900, 906, 917, 918, 924, 930, 939, 1055, 1057, 1060, 1068, 1079, 1081, 1082, 1085, 1086, 1100, 1107, 1122, 1163, 1172, 1191, 1193, 1199, 1200, 1201, 1205, 1206, 1207, 1208, 1209, 1210, 1212, 1213, 1214, 1221, 1223, 1243, 1264, 1265, 1276, 1300, 1301, 1308, 1319, 1329, 1335, 1347, 1348, 1350], "resultset": 138, "retri": [37, 41, 45, 46, 47, 48, 49, 146, 148, 150, 153, 154, 155, 321, 924], "retriev": [207, 278, 321, 351, 352, 516, 517, 706, 781, 954, 955, 1129, 1130, 1284, 1298, 1319, 1335], "return": [1, 5, 6, 30, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 101, 104, 112, 120, 123, 125, 126, 127, 128, 129, 131, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 172, 173, 177, 180, 182, 184, 187, 188, 189, 193, 196, 198, 199, 200, 201, 202, 204, 205, 206, 207, 210, 211, 212, 214, 215, 216, 220, 222, 223, 224, 225, 226, 229, 230, 231, 233, 235, 240, 241, 242, 244, 245, 246, 250, 253, 254, 255, 256, 257, 261, 268, 271, 272, 278, 279, 280, 283, 284, 285, 286, 291, 294, 295, 296, 302, 304, 306, 307, 310, 315, 321, 333, 335, 338, 339, 340, 341, 342, 343, 346, 347, 351, 352, 353, 355, 357, 358, 369, 374, 375, 376, 377, 378, 379, 380, 390, 391, 395, 396, 401, 402, 403, 404, 405, 411, 412, 418, 419, 421, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 467, 472, 480, 483, 484, 486, 490, 491, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 512, 513, 516, 517, 519, 524, 526, 528, 529, 530, 532, 539, 549, 550, 557, 559, 560, 572, 574, 575, 576, 581, 605, 608, 610, 614, 615, 616, 617, 619, 620, 642, 643, 648, 649, 650, 657, 658, 660, 661, 662, 664, 665, 666, 667, 668, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 684, 685, 686, 687, 688, 696, 700, 705, 713, 714, 715, 717, 718, 719, 721, 722, 723, 726, 727, 732, 733, 734, 735, 736, 737, 743, 745, 750, 751, 752, 753, 754, 755, 756, 759, 762, 764, 766, 767, 768, 769, 770, 771, 772, 782, 785, 788, 789, 792, 795, 796, 797, 798, 800, 801, 810, 826, 829, 831, 832, 834, 835, 836, 841, 842, 848, 850, 851, 854, 858, 859, 860, 868, 869, 871, 873, 877, 880, 886, 887, 888, 893, 894, 895, 902, 904, 906, 910, 915, 917, 924, 928, 929, 930, 932, 934, 937, 938, 939, 947, 948, 950, 951, 952, 953, 954, 955, 956, 958, 960, 961, 972, 974, 976, 977, 978, 980, 981, 992, 996, 997, 998, 1001, 1005, 1011, 1012, 1018, 1019, 1024, 1025, 1027, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1072, 1078, 1080, 1084, 1085, 1090, 1094, 1101, 1102, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1120, 1121, 1123, 1125, 1126, 1127, 1128, 1129, 1130, 1132, 1137, 1139, 1141, 1142, 1143, 1145, 1152, 1162, 1163, 1170, 1172, 1177, 1186, 1193, 1199, 1200, 1201, 1202, 1203, 1204, 1217, 1219, 1227, 1235, 1236, 1238, 1239, 1240, 1242, 1243, 1244, 1245, 1246, 1248, 1249, 1250, 1251, 1253, 1254, 1255, 1256, 1257, 1258, 1262, 1263, 1264, 1265, 1266, 1274, 1278, 1283, 1291, 1294, 1301, 1304, 1306, 1307, 1308, 1310, 1319, 1328, 1329, 1333, 1335, 1336, 1337, 1338, 1339, 1341, 1342, 1345, 1347, 1348, 1349, 1350], "return_as_str": [210, 321, 576], "return_dtyp": [40, 231, 321, 559, 560, 615, 616, 726, 771, 772, 810, 1172, 1199, 1200, 1319], "return_typ": [278, 283, 321], "returns_scalar": [559, 560, 772, 810, 928], "reus": [57, 58, 175, 831, 832, 842, 869, 880, 924], "reusabl": 175, "rev": [228, 321, 856, 924], "revers": [182, 198, 284, 321, 391, 405, 406, 407, 408, 409, 585, 587, 589, 718, 739, 745, 810, 826, 887, 924, 1012, 1013, 1014, 1015, 1016, 1319, 1337, 1340], "reverse_": 587, "reverse_a": 587, "reverse_b": 587, "revert": [7, 9, 10], "rhap": [669, 671, 1249], "rhapsodi": [669, 671, 1249], "right": [9, 10, 15, 16, 18, 27, 40, 67, 136, 137, 159, 160, 161, 162, 212, 226, 227, 253, 290, 321, 411, 466, 467, 468, 469, 497, 540, 541, 542, 543, 608, 621, 624, 626, 628, 630, 632, 635, 637, 639, 643, 651, 738, 751, 752, 754, 755, 797, 798, 810, 850, 854, 855, 873, 891, 924, 1018, 1079, 1080, 1081, 1082, 1107, 1153, 1154, 1155, 1156, 1193, 1219, 1230, 1319, 1335, 1340], "right_left": [226, 321, 854, 924], "right_on": [226, 227, 290, 321, 854, 855, 891, 924], "rightmost": [643, 810, 1219, 1319, 1342], "rld": [690, 692, 1270], "rle": [620, 810, 1204, 1319], "rle_id": [619, 810, 1319], "rle_id_a": [620, 810], "rle_id_ab": [620, 810], "rmm": 899, "rn": [136, 137, 150], "role": [32, 139], "roll": [212, 321, 418, 437, 438, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 740, 786, 787, 810, 850, 924, 1024, 1047, 1048, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1319], "rollback": [438, 1048], "rolled_forward": 418, "rollforward": [437, 1047], "rolling_map": [810, 1319], "rolling_max": [810, 1319], "rolling_max_bi": 810, "rolling_mean": [810, 1319], "rolling_mean_bi": 810, "rolling_median": [810, 1319], "rolling_median_bi": 810, "rolling_min": [810, 1319], "rolling_min_bi": 810, "rolling_quantil": [810, 1319], "rolling_quantile_bi": 810, "rolling_row_max": [624, 810], "rolling_row_mean": [626, 810], "rolling_row_median": [628, 810], "rolling_row_min": [630, 810], "rolling_row_quantil": [632, 810], "rolling_row_std": [635, 810], "rolling_row_sum": [637, 810], "rolling_row_var": [639, 810], "rolling_skew": [810, 1319], "rolling_std": [810, 1319], "rolling_std_bi": 810, "rolling_sum": [622, 810, 1205, 1319], "rolling_sum_bi": 810, "rolling_var": [810, 1319], "rolling_var_bi": 810, "rollinggroupbi": [253, 321], "rollinginterpolationmethod": [190, 248, 313, 321, 609, 631, 632, 783, 810, 836, 870, 913, 924, 1019, 1194, 1210, 1319], "ronaldo": [666, 1244], "root": [140, 151, 398, 573, 584, 585, 587, 589, 591, 592, 655, 809, 810, 1002, 1233, 1319, 1341], "rotat": [321, 324, 1319, 1324], "round": [20, 40, 53, 130, 138, 321, 399, 403, 479, 641, 714, 810, 1003, 1092, 1216, 1319, 1340], "round_sig_fig": [810, 1319], "round_str": 1055, "round_td": 1055, "rounded_corn": 20, "row": [14, 20, 25, 37, 38, 40, 45, 46, 49, 51, 52, 54, 59, 98, 104, 112, 120, 126, 127, 128, 129, 130, 133, 136, 137, 138, 141, 142, 144, 145, 146, 147, 148, 150, 153, 154, 155, 156, 159, 160, 166, 180, 182, 183, 184, 194, 195, 200, 203, 205, 206, 210, 211, 212, 213, 214, 215, 219, 220, 221, 222, 224, 225, 226, 227, 228, 230, 231, 237, 242, 246, 253, 256, 257, 266, 272, 275, 277, 278, 283, 284, 286, 288, 289, 290, 297, 298, 302, 304, 306, 307, 315, 321, 325, 346, 347, 355, 370, 391, 392, 472, 480, 484, 490, 513, 524, 551, 601, 602, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 647, 652, 654, 665, 674, 713, 718, 732, 735, 741, 743, 760, 764, 766, 767, 769, 784, 786, 787, 795, 800, 810, 826, 829, 839, 840, 846, 847, 848, 850, 851, 854, 855, 856, 857, 859, 860, 864, 881, 886, 887, 888, 890, 891, 897, 898, 902, 904, 906, 907, 915, 924, 934, 949, 958, 1084, 1085, 1094, 1101, 1126, 1137, 1188, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1231, 1243, 1252, 1291, 1319, 1328, 1335, 1337, 1348, 1350], "row_group": [148, 155], "row_group_s": [45, 49, 321, 924], "row_height": [40, 321], "row_index": [40, 321], "row_index_nam": [136, 137, 142, 144, 146, 148, 150, 153, 154, 155], "row_index_offset": [136, 137, 142, 144, 146, 148, 150, 153, 154, 155], "row_nr": [297, 321, 897, 924], "row_tot": [40, 321], "rowname_col": [321, 325], "rows_by_kei": [224, 255, 274, 321], "rowserror": [254, 321], "rowtotalsdefinit": [40, 321], "rpc": 138, "rstrip": 585, "rtol": [159, 160, 161, 162], "rtrim": 1340, "ru": 1342, "rule": [136, 148, 150, 155, 205, 321, 659, 683, 698, 1237, 1261, 1276], "run": [46, 47, 48, 49, 57, 58, 66, 138, 166, 169, 170, 171, 211, 226, 229, 231, 260, 286, 296, 307, 321, 396, 410, 523, 559, 560, 619, 620, 677, 788, 810, 831, 832, 842, 849, 854, 860, 864, 869, 876, 880, 888, 895, 899, 924, 930, 998, 1017, 1136, 1172, 1203, 1204, 1255, 1319, 1347, 1350], "runtimeerror": [279, 321, 1300, 1319], "rust": [37, 45, 46, 94, 106, 141, 142, 144, 148, 231, 307, 321, 668, 924, 928, 1172, 1246, 1319], "s1": [50, 90, 91, 161, 162, 205, 321, 973, 1076, 1077, 1096, 1121, 1131, 1164, 1184, 1196, 1310, 1319], "s2": [1, 50, 90, 91, 161, 162, 205, 321, 973, 1004, 1021, 1076, 1077, 1096, 1112, 1121, 1131, 1164, 1178, 1184, 1196, 1310, 1319], "s3": [1, 39, 140, 151, 152, 155, 156, 321, 973, 1164, 1319], "s_": 450, "s_bar": 1337, "s_dt": [450, 1342, 1343], "s_dt1": 1342, "s_dt2": 1342, "s_dtm": 450, "s_foo": 1337, "s_from_str_repr": [1297, 1319], "s_head_5": 672, "s_head_n": 672, "s_tail_5": 696, "s_tail_n": 696, "s_td": 450, "s_tm": [450, 1342, 1343], "safe": [613, 810, 1197, 1319], "sale": [601, 810], "sam": 12, "same": [20, 39, 40, 50, 51, 57, 58, 59, 90, 91, 107, 142, 150, 159, 160, 161, 162, 164, 175, 203, 211, 231, 246, 255, 256, 267, 286, 295, 296, 300, 307, 321, 329, 336, 369, 395, 416, 417, 450, 476, 480, 482, 483, 486, 550, 564, 570, 601, 615, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 647, 654, 665, 676, 708, 806, 810, 831, 832, 846, 849, 858, 860, 882, 888, 894, 895, 900, 924, 930, 935, 972, 997, 1022, 1023, 1028, 1060, 1163, 1172, 1199, 1205, 1206, 1207, 1208, 1209, 1210, 1212, 1213, 1214, 1243, 1254, 1310, 1319, 1333, 1335, 1343], "samoa": [419, 1025], "sampl": [136, 137, 307, 321, 647, 651, 810, 907, 1230, 1319, 1336], "sample_s": [136, 137], "sampled_from": 1350, "sandwich": [208, 321], "sat": [321, 324], "satisfi": [497, 810, 1107, 1319], "saturdai": [212, 321, 850, 924], "save": [2, 3, 6, 212, 227, 253, 291, 321, 419, 427, 440, 445, 458, 621, 624, 626, 628, 630, 632, 635, 637, 639, 751, 752, 754, 755, 756, 797, 798, 806, 810, 822, 850, 855, 873, 924, 1033, 1050, 1055, 1068], "save_to_fil": 5, "say\u014dnara": 1, "scalar": [180, 222, 231, 254, 321, 396, 559, 643, 672, 677, 685, 696, 770, 772, 810, 928, 934, 998, 1121, 1219, 1250, 1255, 1263, 1274, 1319], "scale": [28, 67, 198, 321, 379, 560, 605, 699, 810, 930, 1078, 1277, 1319], "scale_negative_even": [605, 810], "scan": [126, 129, 136, 137, 138, 141, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 321, 674, 924, 1252], "scan_csv": [46, 47, 48, 49, 136, 137, 924], "scan_parquet": [148, 156], "scan_pyarrow_dataset": [148, 155], "scatter": [321, 324, 1319, 1324], "scenario": 1319, "schedul": [58, 832, 924], "schema": [0, 1, 14, 28, 35, 38, 39, 52, 53, 54, 59, 98, 115, 116, 123, 125, 126, 127, 129, 133, 136, 137, 138, 139, 141, 143, 145, 146, 147, 148, 149, 150, 153, 154, 155, 184, 185, 186, 192, 196, 198, 225, 229, 231, 238, 242, 250, 279, 283, 321, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 425, 550, 551, 560, 571, 586, 588, 590, 674, 726, 792, 810, 822, 829, 830, 833, 834, 838, 841, 860, 865, 871, 893, 907, 924, 930, 1007, 1252, 1319, 1328], "schema_mod": [39, 321], "schema_overrid": [123, 125, 126, 127, 128, 129, 136, 137, 138, 139, 141, 145, 146, 147, 150, 154, 225, 279, 321, 924, 930], "schemadefinit": [123, 125, 126, 127, 129, 145, 146, 154, 321, 924], "schemadict": [82, 123, 125, 126, 127, 128, 129, 136, 138, 139, 141, 147, 148, 150, 153, 155, 321, 792, 860, 907, 924], "schemainitdatatyp": 929, "schindler": 1328, "scientif": [11, 37, 46, 321, 924], "scikit": [283, 321], "scipi": [509, 651, 810, 1122, 1230, 1319], "scope": [33, 34, 175, 821, 930, 1331, 1334, 1347], "score": [40, 246, 321], "script": [321, 324, 1319, 1324], "scroll": [40, 321], "sdiff": 542, "search": [227, 321, 551, 659, 669, 671, 683, 855, 882, 924, 1104, 1237, 1247, 1249, 1261, 1319], "search_sort": [810, 1319], "searchsortedsid": [643, 810, 1219, 1319], "searchstrategi": [163, 165, 166, 167, 168, 170], "season": [681, 682], "sec": [1343, 1350], "second": [37, 46, 146, 150, 153, 154, 159, 160, 161, 162, 212, 227, 253, 291, 321, 429, 432, 434, 435, 439, 440, 443, 445, 450, 457, 458, 467, 621, 624, 626, 628, 630, 632, 635, 637, 639, 681, 682, 695, 698, 753, 754, 755, 756, 796, 797, 798, 800, 810, 850, 855, 873, 924, 930, 1050, 1053, 1055, 1067, 1068, 1080, 1259, 1260, 1273, 1276, 1319, 1342, 1343, 1348, 1350], "second_part": [687, 688, 1265, 1266], "seconds_diff": 457, "secret": [152, 155], "section": [246, 321, 658, 666, 667, 670, 681, 682, 751, 752, 754, 755, 797, 798, 1236, 1244, 1245, 1248, 1259, 1260], "secur": [413, 810, 837, 924], "see": [37, 39, 40, 41, 42, 45, 46, 47, 48, 49, 57, 58, 66, 138, 139, 140, 141, 142, 144, 146, 148, 150, 151, 152, 153, 154, 155, 159, 160, 161, 162, 166, 170, 177, 188, 203, 212, 226, 245, 246, 321, 325, 384, 385, 387, 388, 400, 450, 475, 509, 559, 651, 658, 666, 667, 670, 672, 681, 682, 696, 751, 752, 754, 755, 784, 797, 798, 806, 810, 831, 832, 846, 850, 899, 924, 928, 930, 932, 986, 987, 989, 990, 1000, 1006, 1060, 1122, 1230, 1236, 1244, 1245, 1248, 1250, 1259, 1260, 1274, 1319, 1350], "seed": [157, 213, 257, 321, 489, 539, 611, 642, 647, 810, 1100, 1152, 1195, 1217, 1226, 1319], "seed_1": [213, 321, 489, 810, 1100, 1319], "seed_2": [213, 321, 489, 810, 1100, 1319], "seed_3": [213, 321, 489, 810, 1100, 1319], "seen": [450, 1060], "seen_group": 137, "select": [1, 8, 38, 51, 52, 53, 54, 95, 134, 136, 137, 138, 139, 140, 142, 144, 148, 150, 156, 165, 180, 181, 222, 223, 227, 231, 242, 245, 254, 260, 266, 268, 281, 287, 291, 298, 321, 329, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 355, 360, 361, 362, 367, 368, 369, 370, 371, 372, 373, 374, 377, 380, 381, 386, 389, 390, 391, 394, 398, 399, 401, 402, 403, 404, 410, 412, 414, 415, 416, 417, 420, 422, 423, 431, 437, 438, 440, 444, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 463, 466, 468, 469, 470, 471, 472, 473, 477, 479, 481, 484, 488, 489, 490, 491, 492, 493, 494, 495, 498, 499, 502, 508, 509, 510, 512, 513, 523, 524, 551, 554, 555, 556, 557, 559, 560, 561, 562, 563, 567, 579, 581, 583, 584, 586, 588, 590, 593, 594, 598, 599, 600, 601, 603, 604, 607, 609, 610, 611, 612, 613, 614, 617, 618, 619, 622, 633, 640, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 665, 666, 667, 668, 669, 670, 671, 673, 678, 695, 706, 708, 709, 712, 713, 714, 715, 717, 718, 720, 721, 722, 723, 724, 727, 729, 731, 734, 735, 736, 739, 740, 742, 743, 744, 745, 748, 755, 756, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 773, 775, 777, 778, 780, 781, 784, 785, 789, 790, 791, 792, 793, 795, 799, 806, 810, 825, 831, 834, 855, 868, 876, 881, 883, 889, 896, 898, 899, 924, 930, 934, 1054, 1093, 1136, 1218, 1220, 1231, 1249, 1253, 1273, 1319, 1328, 1329, 1330, 1331, 1336, 1337, 1338, 1339, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349], "select_from": [165, 168, 170], "select_seq": [321, 924], "selector": [0, 40, 183, 192, 194, 195, 199, 237, 244, 246, 267, 276, 278, 283, 286, 288, 289, 321, 325, 450, 470, 567, 810, 822, 828, 838, 839, 840, 843, 864, 882, 888, 890, 924], "selectortyp": [40, 321, 930], "self": [1, 52, 53, 54, 55, 57, 58, 268, 299, 321, 789, 810, 831, 832, 842, 869, 880, 883, 896, 924, 939, 984, 985, 986, 987, 989, 990, 993, 1007, 1012, 1085, 1089, 1103, 1170, 1172, 1185, 1189, 1190, 1196, 1199, 1200, 1218, 1220, 1221, 1232, 1307, 1310, 1319, 1330, 1331, 1332, 1334, 1335, 1336, 1337, 1338, 1339, 1341, 1342, 1343, 1344, 1345, 1347], "semi": [133, 226, 321, 854, 924, 1335], "semigraph": 20, "sens": [136, 142, 144, 238, 291, 321, 601, 810, 865, 924], "sensit": [658, 667, 670, 681, 682, 1236, 1245, 1248, 1259, 1260], "sep": 133, "separ": [9, 10, 24, 27, 36, 37, 46, 132, 133, 135, 136, 137, 141, 150, 244, 246, 276, 285, 287, 321, 355, 358, 450, 524, 530, 560, 665, 741, 746, 747, 810, 889, 924, 958, 961, 1060, 1137, 1143, 1243, 1289, 1295, 1319, 1342], "seq": 26, "seq1": 26, "seq2": 26, "sequenc": [40, 45, 51, 82, 123, 125, 126, 127, 129, 133, 136, 137, 138, 141, 145, 146, 147, 150, 154, 164, 165, 166, 167, 168, 182, 190, 199, 200, 226, 227, 237, 242, 244, 245, 246, 256, 267, 276, 278, 283, 284, 288, 289, 290, 291, 321, 370, 391, 411, 483, 501, 551, 559, 605, 608, 615, 616, 654, 683, 693, 694, 708, 718, 735, 746, 747, 760, 762, 771, 772, 781, 784, 790, 810, 826, 836, 843, 854, 855, 864, 868, 882, 887, 890, 891, 924, 930, 973, 1018, 1019, 1085, 1164, 1193, 1199, 1200, 1261, 1287, 1319], "sequenti": [57, 58, 260, 296, 321, 831, 832, 842, 869, 876, 880, 895, 924], "ser": [1030, 1031, 1058], "seri": [0, 1, 11, 25, 40, 50, 52, 53, 54, 55, 59, 60, 69, 82, 90, 91, 100, 123, 125, 128, 130, 161, 162, 166, 180, 193, 203, 205, 207, 209, 212, 213, 216, 217, 219, 221, 223, 233, 235, 240, 251, 253, 257, 271, 274, 277, 279, 281, 282, 301, 321, 336, 347, 370, 374, 393, 394, 395, 396, 397, 399, 444, 473, 476, 479, 483, 484, 494, 499, 501, 502, 504, 505, 506, 507, 518, 524, 526, 551, 557, 559, 560, 611, 612, 613, 614, 615, 616, 621, 622, 633, 644, 646, 672, 683, 695, 696, 697, 698, 702, 706, 717, 722, 732, 736, 739, 746, 747, 751, 752, 754, 755, 760, 762, 766, 767, 770, 771, 772, 782, 784, 785, 788, 789, 792, 797, 798, 801, 810, 822, 846, 850, 873, 901, 924, 928, 1311, 1313, 1315, 1318, 1320, 1323, 1324, 1325, 1326, 1327, 1329, 1331, 1347, 1350], "serial": [43, 44, 191, 321, 413, 578, 810, 837, 924], "serializ": [810, 928], "serializationformat": [191, 261, 321, 413, 574, 810, 837, 877, 924], "seriesplot": [1319, 1324], "server": [38, 138, 139, 321], "servic": 32, "service_account": [140, 151], "service_account_json_absolute_path": [140, 151], "session": 138, "set": [2, 3, 4, 5, 6, 7, 9, 10, 12, 13, 15, 16, 17, 20, 25, 26, 27, 30, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 57, 58, 63, 66, 67, 69, 124, 125, 126, 129, 136, 137, 138, 141, 142, 144, 145, 146, 147, 148, 150, 153, 154, 155, 156, 157, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 175, 179, 187, 194, 195, 204, 207, 211, 213, 224, 226, 227, 235, 237, 255, 257, 259, 261, 266, 271, 276, 278, 279, 283, 285, 286, 288, 289, 290, 295, 321, 324, 333, 335, 357, 358, 370, 382, 384, 385, 387, 388, 400, 411, 443, 444, 461, 489, 501, 526, 528, 530, 539, 540, 541, 542, 543, 545, 551, 559, 560, 567, 568, 574, 605, 608, 615, 616, 622, 623, 625, 627, 629, 631, 634, 636, 638, 642, 647, 651, 652, 657, 673, 674, 681, 682, 685, 690, 691, 692, 693, 694, 695, 697, 698, 702, 723, 727, 729, 732, 736, 741, 751, 752, 753, 754, 755, 756, 766, 767, 770, 776, 782, 785, 786, 787, 788, 792, 794, 797, 798, 800, 801, 810, 822, 831, 832, 839, 840, 842, 849, 854, 855, 860, 864, 875, 877, 881, 888, 890, 891, 894, 907, 924, 928, 937, 938, 960, 961, 973, 977, 984, 986, 987, 989, 990, 1006, 1018, 1053, 1054, 1071, 1091, 1100, 1112, 1119, 1139, 1141, 1143, 1152, 1153, 1154, 1155, 1156, 1158, 1164, 1172, 1193, 1199, 1200, 1205, 1206, 1207, 1208, 1209, 1210, 1212, 1213, 1214, 1217, 1218, 1219, 1226, 1230, 1231, 1235, 1251, 1252, 1259, 1260, 1263, 1268, 1269, 1270, 1273, 1275, 1276, 1280, 1300, 1308, 1319, 1338, 1346, 1350], "set_": 175, "set_auto_structifi": [259, 295, 321, 875, 894, 924], "set_decimal_separ": 27, "set_environ": 169, "set_except": [58, 832, 924], "set_fmt_float": 30, "set_fmt_str_length": [659, 669, 671, 683, 1237, 1249, 1261], "set_index": [212, 321, 850, 924], "set_legend": [40, 321], "set_sort": [253, 291, 321, 621, 810, 873, 924, 1319], "set_stat": 30, "set_streaming_chunk_s": [831, 924], "set_styl": [40, 321], "set_tbl_column_data_type_inlin": 24, "set_tbl_format": [7, 51], "set_tbl_row": 175, "set_tbl_width_char": 683, "set_thousands_separ": 9, "set_titl": [40, 321], "set_verbos": 175, "setosa": [321, 324], "setup": 1350, "seventeen": [493, 810], "sever": [123, 125, 126, 127, 129, 145, 146, 154, 321, 924, 1350], "sfu": 139, "shape": [1, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 50, 51, 52, 53, 54, 55, 59, 60, 78, 82, 90, 91, 98, 117, 123, 124, 125, 126, 127, 128, 129, 130, 133, 136, 145, 146, 150, 156, 163, 166, 170, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 205, 206, 207, 209, 211, 212, 213, 214, 216, 217, 218, 219, 221, 222, 223, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 257, 259, 261, 264, 266, 267, 268, 269, 270, 271, 272, 274, 276, 277, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 321, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 579, 580, 581, 582, 583, 584, 585, 587, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 806, 810, 825, 826, 828, 829, 831, 832, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 877, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 924, 929, 930, 934, 935, 936, 939, 941, 942, 943, 944, 945, 946, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 992, 993, 994, 995, 997, 998, 999, 1000, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1076, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1092, 1093, 1094, 1096, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1120, 1121, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1172, 1177, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1193, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1223, 1224, 1226, 1227, 1228, 1229, 1231, 1232, 1233, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1286, 1289, 1291, 1292, 1293, 1295, 1296, 1297, 1302, 1304, 1305, 1306, 1307, 1308, 1310, 1319, 1328, 1329, 1330, 1331, 1333, 1335, 1336, 1337, 1338, 1339, 1341, 1342, 1343, 1344, 1345, 1347, 1348], "share": [159, 160, 161, 162, 198, 321, 1078, 1319], "shawshank": 1328, "sheet": [40, 141, 147, 321], "sheet1": [40, 321], "sheet_id": [141, 147], "sheet_nam": [141, 147], "sheet_zoom": [40, 321], "sheetnam": [141, 147], "shift": [212, 321, 373, 414, 481, 521, 602, 740, 810, 850, 924, 1020, 1134, 1188, 1319], "short": [159, 161, 378, 980], "shorten": [159, 161], "shorter": [136, 137, 150, 551, 766, 767], "shorthand": [321, 324, 1319, 1324], "should": [10, 38, 40, 45, 46, 47, 48, 49, 59, 123, 125, 127, 129, 133, 141, 145, 146, 150, 154, 156, 163, 164, 166, 170, 192, 224, 227, 231, 254, 255, 256, 267, 275, 276, 287, 307, 321, 331, 410, 413, 461, 467, 470, 504, 505, 523, 560, 574, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 643, 651, 654, 681, 682, 723, 735, 756, 758, 770, 772, 786, 787, 800, 806, 810, 831, 837, 838, 854, 855, 860, 877, 882, 889, 924, 930, 1017, 1071, 1080, 1136, 1172, 1205, 1206, 1207, 1208, 1209, 1210, 1212, 1213, 1214, 1219, 1230, 1259, 1260, 1308, 1319, 1329], "show": [30, 40, 190, 195, 210, 229, 243, 321, 491, 575, 810, 836, 869, 880, 924, 1102, 1319, 1333, 1346], "show_graph": [229, 321, 924], "show_plot": [869, 924], "shrink": [265, 321, 646, 810, 1224, 1225, 1319], "shrink_dtyp": [810, 1319], "shrink_to_fit": [321, 1319], "shuffl": [157, 257, 283, 307, 321, 539, 642, 810, 907, 1152, 1217, 1319], "side": [40, 212, 253, 321, 497, 540, 541, 542, 543, 621, 624, 626, 628, 630, 632, 635, 637, 639, 643, 751, 752, 754, 755, 797, 798, 810, 850, 873, 924, 928, 1107, 1153, 1154, 1155, 1156, 1219, 1319], "sign": [65, 66, 68, 73, 74, 75, 76, 77, 83, 440, 613, 681, 682, 705, 810, 930, 1050, 1197, 1259, 1260, 1283, 1319, 1340], "sign_x": 1341, "signed_integ": 930, "signific": [155, 224, 231, 321, 384, 385, 387, 388, 560, 641, 810, 986, 987, 989, 990, 1172, 1216, 1319], "significantli": [141, 231, 307, 321, 1172, 1319, 1350], "silenc": 98, "silent": [700, 1278], "similar": [36, 45, 135, 172, 205, 227, 264, 286, 288, 321, 365, 447, 450, 544, 601, 645, 710, 769, 800, 810, 855, 879, 888, 890, 924, 968, 1057, 1060, 1157, 1223, 1319], "similarli": [40, 126, 212, 227, 253, 291, 321, 440, 445, 458, 621, 624, 626, 628, 630, 632, 635, 637, 639, 751, 752, 754, 755, 797, 798, 810, 850, 855, 873, 924, 1050, 1055, 1068], "simpl": [40, 242, 321], "simpler": [930, 1259], "simpli": [150, 746, 760], "simplifi": [46, 47, 48, 49, 57, 58, 831, 832, 842, 869, 880, 924], "simplify_express": [46, 47, 48, 49, 57, 58, 831, 832, 842, 869, 880, 924], "sin": [810, 1319, 1340], "sinc": [39, 65, 66, 83, 136, 137, 138, 140, 146, 150, 151, 153, 154, 163, 164, 165, 166, 170, 173, 181, 237, 279, 297, 302, 321, 425, 428, 461, 482, 559, 578, 615, 657, 665, 725, 734, 742, 762, 810, 825, 842, 864, 882, 896, 897, 902, 924, 1031, 1034, 1039, 1040, 1071, 1099, 1199, 1235, 1243, 1300, 1319], "sind": 1340, "sine": [340, 341, 559, 649, 650, 810, 943, 944, 1228, 1229, 1319, 1344], "singl": [40, 45, 51, 57, 58, 59, 70, 135, 136, 137, 138, 139, 140, 141, 148, 150, 151, 153, 164, 183, 192, 193, 194, 195, 200, 207, 213, 222, 231, 244, 254, 256, 267, 278, 279, 321, 354, 396, 400, 418, 440, 483, 486, 489, 520, 526, 559, 560, 612, 615, 617, 619, 654, 657, 672, 673, 677, 685, 696, 725, 735, 739, 740, 741, 767, 771, 772, 790, 798, 806, 810, 828, 831, 832, 838, 839, 840, 882, 924, 930, 957, 998, 1006, 1024, 1050, 1085, 1100, 1133, 1139, 1196, 1199, 1201, 1203, 1235, 1250, 1251, 1255, 1263, 1274, 1294, 1300, 1319, 1330], "singlecolselector": 180, "singleindexselector": [180, 934], "sinh": [810, 1319], "sink_csv": 924, "sink_ipc": 924, "sink_ndjson": 924, "sink_parquet": 924, "site_id": [321, 325], "six": [643, 810], "size": [14, 45, 49, 136, 137, 138, 163, 164, 165, 166, 170, 172, 198, 289, 321, 551, 617, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 732, 766, 767, 786, 787, 810, 831, 924, 1078, 1201, 1211, 1319, 1350], "sizeunit": [198, 321, 379, 981, 1078, 1319], "skew": [633, 810, 1211, 1319], "skewtest": [651, 810, 1230, 1319], "skip": [136, 137, 141, 148, 150, 155, 227, 289, 321, 855, 924, 1172, 1319, 1335], "skip_empty_lin": 141, "skip_lin": [136, 150], "skip_nul": [560, 810, 1172, 1319], "skip_row": [136, 137, 150], "skip_rows_after_head": [136, 137, 150], "sklearn": [283, 321], "slice": [46, 47, 48, 49, 52, 57, 58, 198, 214, 225, 272, 321, 529, 549, 560, 571, 573, 622, 623, 625, 627, 629, 631, 634, 636, 638, 672, 696, 810, 831, 832, 842, 860, 869, 880, 924, 928, 1078, 1101, 1142, 1162, 1205, 1206, 1207, 1208, 1209, 1210, 1212, 1213, 1214, 1250, 1274, 1291, 1319, 1342], "slice_pushdown": [46, 47, 48, 49, 57, 58, 831, 832, 842, 860, 869, 880, 924], "slide": [410, 810, 1017, 1319], "slightli": [46, 47, 48, 49, 94, 480, 810, 924, 1343], "slot": [410, 414, 521, 810, 1017, 1020, 1134, 1319], "slow": [110, 126, 129, 136, 137, 138, 141, 145, 146, 147, 150, 154, 155, 321, 410, 560, 622, 674, 810, 907, 924, 1017, 1205, 1252, 1319], "slower": [127, 129, 141, 211, 231, 244, 291, 307, 321, 560, 772, 810, 849, 907, 924, 1172, 1319], "small": [11, 139, 445, 924, 1350], "smaller": [45, 49, 198, 321, 924, 1078, 1319], "smallest": [182, 284, 321, 390, 391, 718, 810, 826, 887, 924, 992, 1319, 1336, 1339], "smooth": [466, 468, 469, 810, 1079, 1081, 1082, 1319], "snappi": [35, 45, 49, 321, 924], "snapshot": 152, "snapshot_id": 152, "snowflak": [138, 139], "snowi": [681, 682], "so": [1, 40, 139, 141, 150, 172, 175, 210, 212, 228, 246, 253, 321, 347, 357, 413, 480, 497, 528, 551, 560, 621, 681, 682, 683, 690, 691, 692, 706, 810, 837, 850, 856, 873, 924, 930, 960, 1141, 1259, 1260, 1261, 1268, 1269, 1270], "softwar": [36, 135, 321], "solut": [38, 321], "some": [14, 30, 40, 50, 91, 126, 136, 137, 138, 150, 179, 195, 246, 256, 279, 321, 325, 681, 682, 806, 1112, 1259, 1260, 1319, 1350], "some_account": [667, 1245], "some_t": 1349, "someth": [559, 810], "sometim": [756, 809], "somewher": [667, 1245], "sort": [51, 52, 182, 212, 227, 238, 245, 246, 253, 262, 284, 291, 304, 315, 321, 346, 390, 391, 467, 476, 560, 601, 621, 644, 654, 717, 718, 723, 725, 735, 751, 754, 772, 810, 826, 842, 850, 855, 865, 868, 869, 873, 878, 880, 887, 904, 915, 924, 930, 949, 992, 1080, 1119, 1221, 1304, 1305, 1308, 1319, 1335, 1348, 1350], "sort_bi": 810, "sort_column": [246, 321], "sorted_asc": [1091, 1319], "sorted_desc": [1091, 1319], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 321, 324, 325, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 806, 810, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 924, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1286, 1287, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1319, 1324, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1347], "source_ac": 130, "source_actor_id": 130, "source_alia": [39, 321], "source_cha": 130, "source_channel_id": 130, "south": 69, "space": [20, 212, 321, 450, 850, 924, 930, 1060], "spam": [234, 321, 667, 1245], "span": [466, 468, 469, 810, 1079, 1081, 1082, 1319], "spanner": [321, 325], "spark": [45, 321], "sparklin": [40, 321], "speak": [651, 810, 1230, 1319], "spearman": 742, "speci": [321, 324], "special": [38, 136, 137, 139, 150, 283, 298, 321, 622, 667, 681, 682, 810, 898, 924, 1172, 1205, 1245, 1259, 1260, 1319], "specif": [1, 30, 39, 40, 41, 42, 94, 123, 125, 127, 129, 136, 139, 140, 141, 145, 146, 147, 151, 152, 154, 183, 224, 226, 273, 278, 321, 447, 450, 695, 697, 698, 702, 723, 810, 828, 854, 924, 929, 930, 1057, 1060, 1273, 1275, 1276, 1280, 1294, 1298, 1308, 1319, 1335, 1347, 1350], "specifi": [37, 38, 39, 40, 45, 46, 51, 95, 98, 101, 116, 119, 136, 141, 147, 148, 150, 155, 167, 182, 183, 198, 199, 202, 207, 211, 212, 226, 227, 244, 246, 253, 254, 256, 259, 260, 264, 267, 278, 284, 287, 295, 296, 300, 321, 391, 400, 443, 450, 466, 468, 469, 470, 475, 601, 614, 616, 623, 625, 627, 629, 631, 634, 636, 638, 645, 654, 710, 718, 735, 738, 739, 740, 741, 751, 752, 754, 755, 756, 758, 788, 792, 797, 798, 806, 810, 826, 828, 843, 845, 849, 850, 854, 855, 873, 875, 876, 879, 882, 887, 889, 894, 895, 900, 924, 930, 1006, 1053, 1060, 1078, 1079, 1081, 1082, 1088, 1200, 1223, 1298, 1319, 1335, 1349], "speed": [49, 262, 321, 560, 810, 878, 924, 1350], "speedup": [51, 155, 224, 231, 321, 560, 810, 1172, 1319], "split": [1, 40, 45, 52, 225, 321, 665, 687, 688, 1243, 1265, 1266], "split_by_column_dtyp": 54, "split_inclus": 686, "splitfram": [1, 52], "spreadsheet": [36, 135, 141, 147, 246, 321], "spring": [681, 682], "sql": [0, 38, 113, 114, 122, 138, 139, 226, 264, 321, 365, 544, 645, 769, 790, 810, 822, 879, 924, 968, 1157, 1223, 1319, 1328, 1329, 1331, 1333, 1336, 1337, 1338, 1339, 1341, 1342, 1343, 1344, 1345, 1348, 1349], "sql_expr": 1347, "sqlalchemi": [38, 138, 158, 321], "sqlcontext": [268, 321, 789, 883, 924, 1346], "sqlite": [38, 138, 321], "sqrt": [560, 651, 710, 810, 1172, 1230, 1319, 1340], "sqrt_x": 1341, "squar": [1, 55, 307, 509, 617, 655, 810, 907, 1122, 1201, 1233, 1319, 1341], "st": [32, 1350], "stabil": [213, 321, 489, 810, 1100, 1319], "stabl": [148, 177, 188, 190, 191, 213, 257, 261, 268, 321, 413, 489, 556, 574, 716, 810, 836, 837, 864, 877, 882, 883, 924, 932, 1100, 1302, 1319], "stack": [59, 216, 293, 321, 324, 1329], "stai": [559, 647, 810], "standalon": [164, 930], "standard": [7, 10, 40, 269, 278, 283, 321, 431, 468, 634, 635, 651, 656, 675, 678, 791, 806, 810, 884, 924, 1037, 1076, 1081, 1184, 1230, 1234, 1253, 1256, 1319, 1336, 1350], "standardis": [40, 321], "start": [40, 134, 136, 137, 139, 141, 142, 144, 146, 147, 148, 150, 153, 154, 155, 172, 206, 211, 212, 229, 266, 291, 297, 298, 321, 374, 377, 380, 393, 397, 418, 426, 436, 441, 445, 458, 459, 470, 484, 527, 545, 620, 624, 626, 628, 630, 632, 635, 637, 639, 652, 658, 663, 667, 671, 680, 685, 689, 690, 692, 693, 696, 705, 732, 737, 746, 750, 751, 752, 753, 754, 755, 758, 760, 766, 767, 797, 798, 800, 806, 810, 848, 849, 850, 869, 881, 897, 898, 924, 930, 982, 994, 999, 1024, 1026, 1029, 1032, 1034, 1035, 1041, 1043, 1045, 1046, 1049, 1051, 1055, 1059, 1068, 1069, 1094, 1140, 1158, 1204, 1231, 1241, 1245, 1249, 1258, 1263, 1267, 1268, 1270, 1274, 1283, 1319, 1335, 1342, 1350], "start_bi": [212, 321, 850, 924], "startbi": [212, 321, 850, 924], "starts_a": 1342, "starts_with": [52, 246, 321, 325, 374, 377, 393, 567, 658, 663, 789, 883, 924, 930, 994, 1241, 1340], "starts_with_expr": 380, "starts_with_lit": 380, "startup": [278, 321], "stat": [509, 651, 810, 1122, 1230, 1319], "state": [4, 5, 106, 746, 822, 842, 869, 880, 924, 1347], "statement": [601, 800, 810, 1333, 1348], "static": [88, 907], "statist": [45, 49, 136, 137, 148, 153, 155, 190, 321, 468, 469, 509, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 651, 810, 836, 924, 1019, 1081, 1082, 1122, 1211, 1230, 1319], "std": [190, 321, 634, 635, 810, 836, 924, 1019, 1212, 1319], "std_dev": [40, 321], "stddev": 1340, "stddev_samp": 1336, "stdev": [40, 321, 1336], "stdev_samp": 1336, "stdout": [175, 210, 321, 576], "step": [289, 321, 480, 732, 766, 767, 810], "steve": [238, 321, 865, 924], "still": [138, 139], "stock": [321, 324], "stop": [134, 136, 137, 142, 144, 146, 148, 150, 153, 154, 155, 624, 626, 628, 630, 632, 635, 637, 639, 810, 1026, 1029, 1034, 1035, 1041, 1043, 1045, 1049, 1055, 1059], "storag": [37, 39, 41, 45, 46, 47, 48, 49, 136, 140, 142, 144, 146, 148, 150, 151, 152, 153, 154, 155, 321, 924], "storage_opt": [37, 39, 41, 45, 46, 47, 48, 49, 136, 140, 142, 144, 146, 148, 150, 151, 152, 153, 154, 155, 321, 924], "store": [39, 136, 152, 200, 224, 255, 321, 394, 619, 810, 995, 1085, 1203, 1319], "store_id": [601, 810], "str": [1, 2, 3, 5, 6, 9, 10, 12, 15, 16, 17, 20, 21, 26, 27, 30, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 66, 69, 70, 92, 123, 124, 125, 126, 127, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 163, 164, 166, 169, 170, 171, 175, 182, 183, 187, 190, 191, 192, 193, 194, 195, 196, 198, 199, 203, 204, 205, 207, 208, 210, 211, 212, 214, 216, 219, 221, 222, 224, 226, 227, 228, 230, 232, 234, 236, 237, 238, 239, 242, 244, 246, 248, 250, 251, 252, 253, 254, 255, 257, 261, 262, 266, 267, 268, 269, 270, 272, 274, 275, 276, 277, 278, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 321, 330, 331, 332, 353, 358, 370, 374, 375, 376, 377, 380, 381, 386, 389, 391, 393, 394, 397, 405, 411, 413, 415, 423, 440, 444, 445, 447, 450, 458, 467, 470, 476, 478, 482, 483, 486, 494, 497, 518, 519, 528, 529, 530, 545, 549, 551, 560, 571, 573, 574, 575, 576, 578, 585, 586, 587, 588, 589, 590, 591, 592, 598, 601, 605, 608, 614, 615, 616, 618, 620, 621, 624, 626, 628, 630, 632, 635, 637, 639, 646, 653, 654, 706, 707, 708, 709, 718, 723, 725, 726, 727, 728, 729, 730, 731, 733, 734, 740, 741, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 806, 810, 817, 826, 828, 831, 832, 834, 836, 837, 838, 839, 840, 842, 843, 846, 849, 850, 852, 854, 855, 856, 864, 865, 868, 869, 871, 872, 873, 877, 878, 880, 881, 882, 883, 887, 888, 889, 890, 891, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 924, 928, 929, 930, 936, 956, 961, 973, 978, 993, 994, 995, 999, 1018, 1019, 1029, 1050, 1054, 1055, 1057, 1060, 1068, 1080, 1088, 1091, 1131, 1132, 1143, 1164, 1180, 1181, 1182, 1193, 1198, 1199, 1200, 1220, 1284, 1286, 1287, 1295, 1296, 1297, 1298, 1308, 1319, 1325, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1339, 1342, 1343, 1347, 1348, 1350], "str_date": 1342, "str_timestamp": 1342, "strategi": [37, 46, 51, 59, 136, 155, 163, 164, 165, 166, 167, 168, 170, 202, 212, 226, 227, 241, 290, 321, 475, 551, 560, 810, 845, 850, 854, 855, 891, 924, 1088, 1164, 1319], "stream": [14, 41, 42, 46, 47, 48, 49, 57, 58, 134, 136, 137, 141, 142, 143, 144, 145, 146, 147, 148, 149, 211, 226, 286, 321, 559, 810, 831, 832, 842, 849, 854, 860, 864, 869, 880, 882, 888, 924], "streamabl": [860, 864, 890, 924], "strftime": [94, 450, 1060, 1340, 1342], "strict": [125, 126, 129, 133, 183, 192, 250, 321, 375, 392, 450, 658, 661, 670, 695, 697, 698, 700, 702, 810, 828, 838, 871, 924, 930, 977, 993, 1060, 1236, 1239, 1248, 1273, 1275, 1276, 1278, 1280, 1319], "strictli": [37, 46, 50, 91, 321, 924], "string": [1, 2, 3, 5, 6, 12, 14, 15, 16, 20, 35, 37, 38, 39, 40, 43, 44, 46, 50, 63, 66, 69, 82, 89, 90, 91, 92, 94, 100, 118, 126, 130, 133, 136, 137, 138, 139, 150, 159, 160, 161, 162, 163, 170, 174, 182, 183, 186, 191, 196, 198, 205, 207, 210, 211, 212, 227, 244, 246, 253, 256, 258, 259, 260, 261, 267, 277, 278, 284, 285, 289, 291, 295, 296, 300, 321, 330, 353, 358, 375, 376, 377, 391, 393, 395, 396, 397, 400, 413, 440, 445, 447, 450, 458, 467, 470, 478, 482, 497, 530, 574, 576, 601, 605, 615, 616, 621, 624, 626, 628, 630, 632, 635, 637, 639, 654, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 710, 718, 726, 728, 730, 735, 738, 739, 740, 741, 749, 751, 752, 754, 755, 761, 774, 776, 779, 788, 792, 794, 797, 798, 800, 806, 810, 822, 826, 828, 833, 837, 841, 842, 849, 850, 855, 873, 874, 875, 876, 877, 882, 887, 894, 895, 900, 924, 929, 930, 961, 977, 978, 979, 994, 996, 997, 998, 999, 1050, 1055, 1057, 1060, 1068, 1080, 1107, 1143, 1199, 1200, 1235, 1236, 1237, 1238, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1286, 1297, 1298, 1319, 1328, 1329, 1337, 1340, 1343, 1346, 1350], "stringcach": [90, 91, 226, 321, 822, 996, 1000], "stringio": [145, 146, 482, 810], "strings_hex": 662, "strip": [28, 690, 691, 692, 693, 694, 1268, 1269, 1270, 1342], "strip_chars_end": [692, 694], "strip_chars_start": [691, 693], "strip_prefix": [692, 694], "strip_suffix": [691, 693], "strongli": [40, 172, 231, 254, 307, 321, 560, 810, 1172, 1319], "strpo": 1340, "strpost": 1342, "strptime": [253, 321, 444, 621, 810, 873, 924, 1054, 1340], "struct": [8, 70, 119, 130, 242, 259, 282, 287, 295, 321, 370, 411, 491, 551, 559, 560, 586, 588, 590, 608, 619, 620, 668, 674, 687, 688, 716, 723, 746, 747, 749, 771, 810, 875, 889, 894, 907, 924, 973, 1018, 1164, 1172, 1193, 1203, 1246, 1252, 1265, 1266, 1300, 1302, 1319], "struct_col": [706, 708, 709], "struct_seri": 907, "structarrai": [198, 321, 1078, 1319], "structfieldnotfounderror": 708, "structur": [40, 41, 42, 100, 103, 117, 133, 200, 245, 256, 273, 279, 321, 605, 810, 868, 924, 1085, 1294, 1319, 1347], "student": [246, 321], "style": [7, 20, 40, 138, 246, 321], "sub": [307, 351, 352, 353, 356, 357, 358, 359, 360, 361, 362, 363, 367, 368, 372, 530, 537, 810, 954, 955, 956, 959, 960, 961, 962, 963, 964, 965, 966, 970, 971, 975, 1143, 1150], "subarrai": [349, 350, 952, 953], "subclass": [1, 321], "subexpress": [57, 58, 831, 832, 842, 869, 880, 924], "subinterv": 1336, "subject": [45, 246, 321], "sublist": [357, 516, 517, 519, 521, 525, 526, 527, 528, 529, 530, 531, 540, 545, 549, 551, 960, 1112, 1129, 1130, 1132, 1134, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1153, 1158, 1162, 1164, 1319], "subplan": [57, 58, 831, 832, 842, 869, 880, 924], "subsequ": [40, 148, 155, 249, 280, 321, 551, 789, 800, 842, 924, 1301, 1319, 1334], "subset": [194, 195, 242, 286, 321, 839, 840, 888, 924], "substr": [374, 377, 380, 393, 397, 658, 663, 670, 681, 682, 685, 686, 687, 688, 689, 930, 976, 979, 982, 994, 999, 1236, 1241, 1248, 1259, 1260, 1263, 1264, 1265, 1266, 1267, 1340], "subtl": [40, 321], "subtli": [480, 810], "subtract": [509, 711, 810, 1122, 1319], "succe": [136, 137, 150], "success": [660, 667, 1238, 1245], "successfulli": [831, 924], "suffix": [226, 227, 228, 259, 295, 300, 321, 332, 377, 391, 393, 504, 505, 506, 507, 565, 585, 587, 590, 591, 592, 618, 663, 691, 694, 718, 810, 854, 855, 856, 875, 894, 896, 900, 924, 930, 979, 994, 1241, 1272], "suffix_field": [586, 588], "sugar": [290, 321, 615, 616, 683, 727, 729, 731, 743, 745, 748, 758, 763, 764, 765, 773, 775, 777, 778, 780, 782, 783, 788, 791, 793, 795, 799, 801, 810, 891, 924, 1199, 1200, 1233, 1261, 1319], "suggest": [321, 324, 1319, 1324], "suitabl": [51, 59, 138, 164, 231, 321, 560, 643, 810, 1172, 1219, 1319], "sum": [40, 198, 205, 211, 212, 222, 246, 253, 271, 300, 321, 408, 409, 413, 463, 476, 551, 560, 571, 573, 574, 575, 576, 577, 615, 616, 621, 636, 637, 725, 727, 739, 746, 748, 749, 760, 772, 784, 794, 810, 831, 832, 837, 842, 849, 850, 867, 869, 873, 877, 880, 900, 924, 928, 930, 1015, 1016, 1074, 1078, 1213, 1319, 1328, 1335, 1337, 1340, 1347], "sum_": [651, 810, 1230, 1319], "sum_a": [253, 321, 621, 810, 873, 924], "sum_horizont": [51, 321, 793], "summari": [190, 321, 836, 924, 1019, 1319, 1335], "summer": [681, 682], "sun": [321, 324, 695, 1273], "sundai": [212, 321, 418, 447, 450, 460, 737, 850, 924, 1024, 1057, 1060, 1070], "sunni": [681, 682, 1259, 1260], "supercast": [205, 321], "supertyp": [59, 202, 279, 283, 321, 336, 740, 810, 845, 924, 928, 1319], "suppli": [38, 40, 123, 125, 126, 127, 129, 138, 145, 146, 154, 203, 254, 278, 321, 476, 605, 810, 846, 924, 1298, 1319], "support": [1, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 59, 123, 124, 125, 126, 127, 128, 129, 130, 138, 139, 140, 141, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 163, 167, 170, 175, 224, 225, 226, 227, 255, 256, 266, 267, 275, 280, 283, 321, 450, 467, 545, 601, 615, 616, 652, 654, 659, 669, 671, 672, 681, 682, 683, 685, 696, 806, 810, 816, 831, 854, 855, 881, 882, 924, 930, 1060, 1080, 1158, 1199, 1200, 1231, 1237, 1247, 1249, 1250, 1259, 1260, 1261, 1263, 1274, 1301, 1303, 1319, 1323, 1337, 1342, 1343, 1345, 1346, 1347], "supportsinterchang": 124, "suppos": [180, 246, 321, 560, 810, 1172, 1319], "sure": [59, 123, 128, 136, 137, 140, 142, 144, 148, 151, 249, 321, 810, 928], "surreal": 138, "surreal_query_to_fram": 138, "surrealdb": 138, "surrealhttp": 138, "surrealql": 138, "suscept": 924, "swap": [871, 924], "swim": 741, "switch": [419, 831, 924, 1025], "sy": 175, "sydnei": 753, "symbol": [36, 37, 46, 321, 810, 924], "symmetr": [542, 930, 1155], "symmetri": [834, 841, 874, 893, 924], "synchron": 918, "syntact": [290, 321, 615, 616, 683, 727, 729, 731, 743, 745, 748, 758, 763, 764, 765, 773, 775, 777, 778, 780, 782, 783, 788, 791, 793, 795, 799, 801, 810, 891, 924, 1199, 1200, 1233, 1261, 1319], "syntax": [40, 114, 203, 231, 242, 321, 575, 658, 666, 667, 670, 681, 682, 766, 767, 806, 846, 880, 924, 1236, 1244, 1245, 1248, 1259, 1260, 1319, 1343, 1345], "system": [36, 136, 137, 321, 423, 831, 924, 1029], "t": [36, 37, 39, 46, 59, 135, 136, 141, 147, 150, 212, 227, 231, 245, 286, 289, 321, 410, 419, 427, 444, 450, 463, 466, 468, 469, 523, 560, 601, 605, 666, 670, 681, 682, 692, 695, 698, 703, 800, 810, 850, 855, 868, 888, 924, 930, 1017, 1054, 1060, 1074, 1079, 1081, 1082, 1136, 1172, 1244, 1248, 1259, 1260, 1269, 1270, 1273, 1276, 1281, 1319, 1331, 1332, 1342], "t_": [287, 321, 467, 810, 889, 924, 1080, 1319], "t_0": [253, 321, 467, 621, 624, 626, 628, 630, 632, 635, 637, 639, 810, 873, 924, 1080, 1319], "t_1": [253, 321, 467, 621, 624, 626, 628, 630, 632, 635, 637, 639, 810, 873, 924, 1080, 1319], "t_a": [287, 321, 889, 924], "t_b": [287, 321, 889, 924], "t_c": [287, 321, 889, 924], "t_d": [287, 321, 889, 924], "t_i": [467, 810, 1080, 1319], "t_id": [228, 321, 856, 924], "t_n": [253, 321, 621, 624, 626, 628, 630, 632, 635, 637, 639, 810, 873, 924], "t_struct": [287, 321, 889, 924], "tab_spann": [321, 325], "tab_stub": [321, 325], "tab_styl": [321, 325], "tabl": [7, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 38, 39, 40, 123, 130, 133, 140, 141, 147, 151, 152, 226, 228, 246, 268, 273, 280, 289, 290, 321, 325, 789, 822, 854, 856, 883, 891, 924, 1329, 1330, 1331, 1332, 1334, 1335, 1346, 1347], "table_nam": [38, 40, 141, 268, 321, 883, 924], "table_path": [39, 140, 151, 152, 321], "table_styl": [40, 321], "tablemerg": [39, 321], "tablenotfounderror": [39, 321], "tables_scale_100": [132, 137], "tail": [210, 214, 321, 336, 651, 810, 924, 1101, 1230, 1319], "take": [40, 133, 141, 147, 166, 167, 175, 205, 206, 212, 235, 238, 245, 246, 250, 321, 346, 418, 440, 476, 483, 484, 526, 527, 559, 586, 588, 590, 654, 735, 737, 757, 759, 768, 810, 848, 850, 865, 871, 924, 949, 1024, 1050, 1093, 1094, 1139, 1140, 1310, 1319, 1337], "taken": [545, 685, 1158, 1263], "talkin": [703, 1281], "tan": [810, 1319, 1340], "tand": 1340, "tangent": [342, 343, 714, 715, 810, 945, 946, 1292, 1293, 1319, 1344], "tanh": [246, 321, 810, 1319], "target": [1, 38, 39, 40, 56, 141, 283, 321, 666, 681, 682, 695, 697, 698, 930, 1244, 1259, 1260, 1273, 1275, 1276, 1342], "target_alia": [39, 321], "target_t": [38, 321], "task": [58, 832, 924], "tau": [466, 467, 810, 1079, 1080, 1319], "tb": [159, 161, 198, 321, 379, 1078, 1319], "tbl": [132, 137, 1349], "tbl0": 1334, "tbl1": [1332, 1334], "tbl2": [1332, 1334], "tbl3": 1332, "tbl4": 1332, "tbl_cell_numeric_align": [9, 10, 27], "tbl_col": 17, "tbl_format": [20, 175], "tbl_hide_column_data_typ": 20, "tbl_hide_dataframe_shap": 20, "tbl_row": [25, 190, 321, 836, 924], "tbl_width_char": 756, "td": 450, "td1": 930, "td2": 930, "td3": 930, "tdf": [245, 321], "technic": 806, "tell": [659, 683, 1237, 1261], "tempor": [94, 183, 212, 224, 253, 255, 256, 275, 321, 400, 450, 497, 621, 624, 626, 628, 630, 632, 635, 637, 639, 810, 822, 828, 850, 873, 924, 930, 1006, 1060, 1107, 1319, 1340, 1346], "temporalliter": [400, 810, 1006, 1039, 1040, 1319], "temporari": [38, 321], "temporarili": [172, 175, 212, 253, 321, 621, 810, 850, 873, 924], "tenant": 33, "tenant_id": 33, "tend": [159, 161], "tensor": [283, 321, 1303, 1319], "tensordataset": [283, 321], "term": [466, 468, 469, 672, 685, 696, 810, 1079, 1081, 1082, 1250, 1263, 1274, 1319], "termin": [37, 46, 321, 924], "test": [0, 38, 138, 139, 141, 147, 197, 246, 321, 822, 1077, 1319], "test1": 1334, "test2": 1334, "test3": 1334, "test_1": [246, 321], "test_1_math": [246, 321], "test_1_phys": [246, 321], "test_2": [246, 321], "test_2_math": [246, 321], "test_2_phys": [246, 321], "test_data": 138, "test_df_height": 166, "test_func": 771, "test_lf": [896, 924], "test_miscellan": 1350, "test_numer": 1350, "test_price_calcul": 1350, "test_series_len": 170, "test_tabl": 139, "test_unique_xyz": 164, "testdb": 139, "testing1234": 1334, "text": [135, 138, 395, 396, 664, 672, 676, 677, 678, 681, 682, 684, 685, 696, 790, 997, 998, 1250, 1254, 1255, 1262, 1263, 1274, 1334, 1350], "text1": 682, "text2": 682, "textclaus": 138, "texttt": [651, 810, 1230, 1319], "th": [206, 321, 484, 527, 540, 651, 672, 696, 810, 848, 924, 1094, 1140, 1153, 1230, 1250, 1274, 1319], "than": [40, 46, 47, 48, 49, 57, 58, 97, 120, 127, 129, 136, 137, 138, 141, 147, 150, 156, 184, 211, 224, 226, 227, 231, 244, 254, 255, 257, 289, 307, 321, 395, 480, 482, 485, 487, 497, 511, 539, 558, 559, 560, 576, 608, 620, 642, 651, 672, 676, 679, 680, 688, 696, 705, 742, 772, 810, 831, 832, 849, 854, 855, 907, 924, 997, 1107, 1152, 1172, 1193, 1204, 1217, 1230, 1250, 1254, 1257, 1258, 1266, 1274, 1283, 1300, 1319, 1350], "the_aws_access_key_id": [39, 140, 151, 152, 321], "the_aws_region": [39, 321], "the_aws_secret_access_kei": [39, 140, 151, 152, 321], "thei": [37, 40, 46, 50, 58, 59, 90, 91, 126, 150, 175, 227, 229, 256, 321, 601, 683, 691, 692, 810, 831, 855, 924, 928, 930, 1261], "them": [58, 123, 125, 126, 127, 129, 138, 139, 141, 145, 146, 147, 148, 150, 153, 154, 155, 175, 199, 200, 212, 227, 238, 246, 253, 283, 291, 321, 358, 467, 497, 530, 593, 594, 601, 621, 740, 751, 752, 754, 755, 797, 798, 810, 832, 843, 850, 855, 865, 873, 924, 930, 961, 1080, 1085, 1143, 1181, 1182, 1319, 1337, 1347], "therebi": [150, 153, 154], "therefor": [198, 321, 560, 800, 810, 1078, 1319], "theta": [466, 468, 469, 810, 1079, 1081, 1082, 1319], "thi": [1, 4, 5, 10, 12, 14, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 57, 58, 59, 65, 66, 67, 68, 69, 73, 83, 91, 98, 123, 125, 126, 127, 128, 129, 130, 132, 133, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 179, 180, 181, 182, 185, 186, 188, 190, 191, 194, 195, 198, 200, 204, 205, 210, 211, 212, 213, 217, 219, 221, 222, 223, 224, 226, 227, 228, 229, 231, 232, 234, 236, 237, 238, 239, 241, 242, 244, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 264, 266, 268, 269, 270, 273, 275, 278, 279, 280, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 302, 307, 320, 321, 324, 325, 333, 336, 337, 346, 358, 364, 365, 366, 371, 390, 391, 394, 400, 410, 411, 413, 419, 420, 431, 437, 438, 440, 444, 445, 447, 450, 461, 465, 472, 482, 489, 491, 494, 495, 497, 501, 523, 524, 530, 539, 540, 541, 542, 543, 544, 546, 551, 552, 556, 557, 559, 560, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 578, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 601, 608, 611, 612, 613, 614, 615, 616, 617, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 644, 645, 646, 647, 652, 653, 654, 657, 659, 666, 669, 671, 673, 674, 678, 679, 680, 683, 690, 691, 692, 693, 694, 699, 703, 705, 707, 710, 717, 718, 720, 721, 722, 723, 727, 731, 739, 740, 743, 745, 746, 759, 760, 762, 764, 765, 768, 769, 772, 775, 777, 780, 782, 786, 787, 788, 791, 795, 799, 800, 801, 806, 810, 822, 825, 826, 827, 830, 831, 832, 833, 834, 836, 837, 839, 840, 841, 842, 849, 850, 852, 854, 855, 856, 858, 860, 864, 865, 869, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 887, 888, 890, 891, 893, 894, 895, 896, 897, 898, 899, 902, 907, 921, 922, 923, 924, 928, 929, 930, 932, 939, 940, 949, 961, 967, 968, 969, 974, 992, 995, 1000, 1001, 1006, 1007, 1017, 1018, 1025, 1026, 1028, 1037, 1047, 1048, 1050, 1054, 1055, 1057, 1060, 1071, 1073, 1076, 1078, 1084, 1085, 1094, 1096, 1100, 1102, 1112, 1121, 1136, 1137, 1143, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1165, 1170, 1172, 1173, 1174, 1175, 1176, 1178, 1179, 1180, 1181, 1182, 1184, 1187, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1217, 1218, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1231, 1232, 1234, 1235, 1237, 1244, 1247, 1249, 1251, 1252, 1256, 1257, 1258, 1261, 1268, 1269, 1270, 1277, 1281, 1283, 1284, 1286, 1289, 1290, 1294, 1296, 1298, 1299, 1300, 1301, 1303, 1304, 1305, 1307, 1308, 1309, 1319, 1324, 1328, 1329, 1330, 1334, 1342, 1345, 1346, 1347, 1348, 1350], "thing": [150, 157], "think": [437, 438, 1047, 1048], "third": [559, 810], "thoma": [238, 321, 865, 924], "those": [5, 30, 40, 136, 141, 256, 280, 290, 321, 480, 611, 666, 772, 810, 891, 924, 930, 1195, 1244, 1301, 1319], "though": [38, 138, 212, 321, 806, 850, 924], "thousand": [9, 27], "thousands_separ": [9, 10, 27], "thread": [14, 37, 46, 58, 132, 136, 137, 139, 172, 173, 267, 321, 523, 560, 654, 735, 810, 832, 882, 924, 969, 1136, 1159, 1232, 1319], "thread_loc": [560, 810], "thread_pool_s": 173, "threadpool": 57, "three": [40, 180, 253, 282, 321, 411, 608, 621, 643, 672, 681, 696, 810, 873, 924, 973, 1018, 1164, 1193, 1250, 1260, 1274, 1319], "threshold": [259, 321, 875, 924], "through": [124, 138, 806, 930, 1319, 1334], "throughout": 175, "throw": [39, 125, 126, 129, 192, 250, 321, 674, 675, 828, 838, 871, 924, 1252, 1253, 1319], "thu": [40, 200, 321, 324, 742, 1085, 1319], "thursdai": [212, 321, 418, 737, 850, 924, 1024], "ti": [611, 810, 1195, 1319], "time": [12, 37, 39, 41, 45, 46, 47, 48, 49, 56, 57, 58, 66, 68, 107, 140, 146, 148, 150, 151, 153, 154, 155, 166, 167, 170, 190, 200, 212, 227, 228, 253, 291, 321, 353, 390, 391, 419, 420, 422, 423, 424, 427, 428, 437, 438, 440, 443, 444, 445, 447, 449, 450, 458, 461, 467, 518, 519, 551, 620, 621, 624, 626, 628, 630, 632, 635, 637, 639, 647, 695, 698, 702, 716, 717, 718, 740, 741, 751, 752, 753, 754, 755, 756, 762, 797, 798, 810, 831, 832, 836, 850, 855, 856, 869, 873, 924, 930, 956, 992, 1025, 1026, 1028, 1029, 1033, 1034, 1050, 1053, 1054, 1055, 1057, 1059, 1060, 1068, 1071, 1080, 1085, 1131, 1132, 1204, 1226, 1273, 1276, 1280, 1302, 1304, 1319, 1328, 1334, 1343, 1350], "time_column": [291, 321], "time_format": [37, 46, 321, 924], "time_unit": [66, 68, 420, 422, 428, 449, 461, 698, 753, 754, 755, 756, 762, 929, 930, 1026, 1028, 1034, 1059, 1071, 1276], "time_unit_m": [420, 1026], "time_unit_n": [420, 1026], "time_unit_u": 461, "time_zon": [66, 423, 425, 444, 698, 753, 754, 755, 929, 930, 1025, 1029, 1033, 1054, 1276], "timedelta": [212, 227, 253, 291, 321, 440, 445, 450, 458, 467, 621, 624, 626, 628, 630, 632, 635, 637, 639, 751, 752, 754, 755, 797, 798, 810, 850, 855, 873, 924, 929, 930, 1038, 1044, 1050, 1055, 1068, 1080, 1181, 1182, 1234, 1309, 1319], "timeout": [58, 832, 924], "timestamp": [130, 140, 151, 212, 321, 444, 445, 458, 762, 850, 924, 1054, 1055, 1068, 1340], "timestamp_m": 449, "timestamp_n": 1059, "timestamp_u": [449, 1059], "timestep": 762, "timeunit": [37, 46, 66, 68, 321, 420, 422, 449, 461, 698, 753, 754, 755, 756, 924, 930, 1026, 1028, 1059, 1071, 1276], "timezon": [66, 140, 151, 425, 930, 1343], "tip": [560, 810], "titl": [40, 321, 324, 1319, 1324, 1328], "titlecas": [703, 1281], "tm": [422, 450, 930, 1343], "to_arrow": [225, 321, 1300, 1319, 1347], "to_batch": [225, 321], "to_dict": [183, 256, 321, 828, 924, 930], "to_dummi": [278, 283, 321, 1319], "to_fram": [394, 428, 445, 449, 458, 695, 929, 1018, 1193, 1218, 1220, 1265, 1266, 1273, 1319, 1324], "to_init_repr": [130, 321, 1319], "to_jax": [283, 321, 1319], "to_list": [130, 253, 321, 1236, 1248, 1319], "to_lowercas": 592, "to_numpi": [278, 283, 321, 559, 810, 1319], "to_panda": [321, 1319], "to_phys": [810, 1000, 1319], "to_python": 929, "to_seri": [52, 207, 321, 695, 736, 785, 1273], "to_sql": [38, 321], "to_str": [447, 1057], "to_struct": [321, 667], "to_torch": [278, 321, 1319], "to_uppercas": [332, 591, 668, 810], "togeth": 1342, "token": [37, 41, 45, 46, 47, 48, 49, 146, 148, 150, 152, 153, 154, 155, 321, 924], "tokyo": [130, 930], "tokyo_tz": 930, "toler": [159, 160, 161, 162, 227, 321, 855, 924], "tone": [40, 321], "tonight": [659, 683, 1237, 1261], "too": [14, 246, 321, 378, 601, 810, 924, 980], "tooltip": [321, 324, 1319, 1324], "toomanyrowsreturnederror": [254, 321], "top": [40, 268, 284, 321, 324, 718, 810, 883, 887, 924, 1319, 1324, 1347], "top_col": [40, 321], "top_k": [182, 321, 390, 391, 718, 810, 826, 924, 992, 1319], "top_k_bi": [390, 391, 717, 810], "top_row": [40, 321], "tor_id": 130, "torch": [158, 283, 321, 1303, 1319], "torchexporttyp": [283, 321], "total": [40, 198, 302, 321, 451, 452, 453, 454, 455, 456, 457, 512, 532, 810, 902, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1078, 1125, 1145, 1319], "total_gross": 1328, "toward": [302, 512, 532, 810, 902, 1125, 1145, 1319], "tp": [1, 54], "tpu": [278, 321, 1298, 1319], "tr15": [678, 1256], "trace": 69, "traceback": [159, 160, 161, 162, 279, 321, 616, 810, 1200, 1300, 1319], "tracebacktyp": 1347, "track": [140, 151, 152, 231, 321, 551, 1347], "trail": [28, 210, 321, 690, 691, 1268, 1269], "train": [283, 321], "train_lf": [896, 924], "transfer": 139, "transferencod": [375, 376, 661, 662, 977, 978, 1239, 1240], "transform": [231, 268, 321, 559, 703, 789, 810, 883, 924, 1281], "transform_dens": [1319, 1324], "transit": [203, 321, 846, 924], "translat": 138, "transpar": [831, 924], "transpos": [246, 321], "travel": [140, 151], "travers": [623, 625, 627, 629, 631, 634, 636, 638, 810, 1206, 1207, 1209, 1212, 1213, 1214, 1319], "treat": [136, 137, 150, 177, 467, 658, 660, 670, 681, 682, 800, 810, 932, 1080, 1236, 1238, 1248, 1259, 1260, 1319], "tree": [576, 842, 924], "tree_format": [842, 924], "trend": [40, 321], "tri": [231, 321], "triangl": [307, 907], "trigger": [39, 229, 280, 321, 810, 928, 1301, 1319], "trigonometri": [1340, 1346], "trim": [130, 1342], "trim_decimal_zero": 28, "trip": 138, "true": [7, 8, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 37, 38, 39, 40, 45, 46, 47, 48, 49, 57, 58, 59, 123, 124, 125, 126, 128, 129, 130, 132, 133, 136, 137, 138, 140, 141, 142, 144, 147, 148, 150, 151, 153, 155, 156, 159, 160, 161, 162, 163, 164, 166, 167, 169, 170, 175, 179, 183, 184, 185, 190, 192, 197, 202, 203, 205, 207, 209, 210, 211, 212, 217, 219, 220, 221, 224, 226, 227, 228, 229, 234, 235, 241, 242, 244, 246, 247, 250, 254, 255, 256, 257, 259, 267, 268, 271, 274, 276, 278, 279, 280, 283, 285, 286, 287, 289, 290, 291, 295, 301, 303, 305, 308, 309, 310, 311, 312, 313, 314, 321, 324, 331, 332, 333, 334, 335, 336, 347, 349, 350, 353, 357, 358, 366, 370, 374, 375, 377, 380, 381, 386, 389, 391, 392, 393, 397, 405, 406, 407, 408, 409, 411, 418, 420, 423, 426, 428, 430, 437, 438, 440, 441, 444, 445, 446, 449, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 463, 464, 465, 466, 468, 469, 476, 483, 485, 486, 487, 488, 491, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 514, 515, 519, 526, 528, 530, 546, 551, 558, 559, 560, 564, 565, 566, 567, 568, 569, 570, 571, 572, 575, 576, 577, 595, 596, 598, 600, 603, 604, 608, 613, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 646, 647, 651, 653, 654, 657, 658, 659, 660, 661, 663, 669, 670, 671, 673, 674, 675, 681, 682, 686, 687, 689, 695, 697, 698, 700, 702, 706, 708, 709, 718, 720, 723, 726, 727, 728, 729, 730, 732, 735, 736, 737, 742, 751, 754, 760, 766, 772, 776, 782, 785, 788, 789, 792, 794, 797, 800, 801, 810, 828, 829, 830, 831, 832, 836, 838, 842, 845, 846, 849, 850, 854, 855, 856, 858, 860, 864, 869, 871, 875, 880, 882, 883, 888, 889, 890, 891, 894, 899, 901, 903, 905, 908, 909, 910, 911, 912, 913, 914, 923, 924, 928, 929, 930, 937, 938, 950, 952, 953, 956, 960, 961, 969, 976, 977, 979, 982, 993, 994, 996, 999, 1001, 1004, 1005, 1018, 1024, 1025, 1026, 1029, 1032, 1033, 1034, 1035, 1036, 1040, 1041, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1059, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1074, 1076, 1077, 1079, 1081, 1082, 1089, 1098, 1102, 1104, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1122, 1127, 1128, 1132, 1139, 1141, 1143, 1159, 1172, 1178, 1184, 1186, 1189, 1190, 1193, 1196, 1197, 1211, 1230, 1232, 1235, 1236, 1237, 1238, 1239, 1241, 1247, 1248, 1249, 1251, 1252, 1253, 1259, 1260, 1264, 1265, 1267, 1273, 1275, 1276, 1278, 1280, 1295, 1300, 1301, 1308, 1310, 1319, 1324, 1328, 1329, 1331, 1333, 1337, 1339, 1342, 1347, 1350], "truediv": [480, 810], "truncat": [20, 130, 136, 137, 150, 210, 212, 224, 255, 256, 275, 321, 850, 869, 924, 1346], "truncate_nod": [869, 924], "truncate_ragged_lin": [136, 137, 150], "truncate_str": 458, "truncate_td": 458, "trust": [413, 810, 837, 924], "try": [37, 41, 45, 46, 47, 48, 49, 57, 58, 117, 136, 137, 142, 146, 148, 150, 153, 154, 155, 321, 831, 832, 842, 869, 880, 924], "try_cast": 1340, "try_parse_d": [132, 136, 137, 150], "try_parse_hive_d": [148, 153, 155], "ts_local": [444, 1054], "tseri": [437, 438, 1047, 1048], "tstamp": 930, "tstamp_tokyo": 930, "tstamp_utc": 930, "tue": [321, 324], "tuesdai": [212, 321, 850, 924], "tupl": [40, 60, 139, 141, 147, 180, 224, 231, 244, 254, 255, 256, 263, 283, 299, 321, 575, 617, 810, 869, 880, 924, 929, 930, 1201, 1222, 1319], "turn": [8, 46, 47, 48, 49, 57, 58, 136, 137, 150, 226, 227, 321, 831, 832, 842, 854, 855, 860, 869, 924], "twice": [40, 321], "two": [40, 50, 90, 91, 125, 127, 129, 139, 180, 203, 205, 227, 228, 237, 238, 255, 282, 288, 301, 307, 321, 325, 331, 415, 422, 480, 483, 486, 551, 608, 653, 733, 734, 740, 742, 744, 751, 754, 786, 787, 789, 810, 846, 855, 856, 864, 865, 890, 901, 907, 924, 930, 973, 1021, 1028, 1164, 1193, 1319, 1334, 1335, 1336, 1339, 1348], "two_a": 1347, "tworld": [692, 1268, 1270], "txt": [1, 12, 150, 658, 670, 1248], "type": [0, 1, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 39, 40, 46, 47, 48, 49, 52, 53, 54, 55, 57, 58, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 123, 125, 126, 127, 128, 129, 131, 136, 137, 138, 140, 141, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 170, 177, 180, 186, 196, 199, 205, 210, 212, 213, 225, 226, 231, 253, 258, 261, 273, 278, 279, 282, 283, 286, 298, 321, 333, 335, 338, 339, 340, 341, 342, 343, 346, 351, 352, 353, 355, 358, 369, 370, 374, 375, 376, 377, 378, 379, 380, 392, 394, 395, 396, 400, 401, 402, 403, 404, 411, 412, 418, 419, 421, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 467, 470, 472, 483, 486, 489, 497, 498, 499, 500, 501, 502, 503, 512, 516, 517, 519, 524, 530, 532, 550, 551, 559, 560, 574, 608, 610, 614, 615, 616, 617, 619, 620, 621, 624, 626, 628, 630, 632, 635, 637, 639, 648, 649, 650, 657, 660, 661, 662, 665, 666, 667, 668, 671, 672, 673, 675, 676, 677, 685, 686, 687, 688, 695, 696, 700, 714, 715, 716, 723, 732, 740, 743, 750, 751, 752, 753, 754, 755, 756, 758, 766, 767, 769, 770, 771, 772, 782, 785, 796, 797, 798, 801, 806, 810, 822, 831, 832, 841, 842, 843, 850, 854, 869, 873, 874, 880, 888, 898, 924, 929, 932, 937, 938, 950, 952, 953, 954, 955, 956, 958, 960, 961, 972, 973, 974, 976, 977, 978, 980, 981, 993, 995, 997, 998, 1006, 1018, 1019, 1024, 1025, 1027, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1077, 1080, 1084, 1100, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1120, 1127, 1128, 1129, 1130, 1132, 1137, 1143, 1145, 1163, 1164, 1186, 1193, 1199, 1200, 1201, 1203, 1204, 1225, 1227, 1235, 1236, 1238, 1239, 1240, 1242, 1243, 1244, 1245, 1246, 1249, 1250, 1251, 1253, 1254, 1255, 1263, 1264, 1265, 1266, 1273, 1274, 1278, 1299, 1300, 1302, 1310, 1319, 1328, 1335, 1340, 1342, 1346, 1347], "type_coercion": [46, 47, 48, 49, 57, 58, 831, 832, 842, 869, 880, 924], "typeerror": [39, 321], "typenam": [40, 321], "typic": [126, 138, 155, 231, 321, 427, 648, 810, 930, 1033, 1172, 1227, 1319], "tz": [698, 1276], "tzinfo": [140, 151, 930], "u": [40, 66, 68, 155, 168, 227, 321, 420, 422, 428, 449, 461, 695, 698, 728, 730, 753, 754, 755, 756, 762, 855, 924, 929, 930, 1026, 1028, 1034, 1059, 1071, 1273, 1276, 1332, 1343], "u1": [279, 321], "u16": [150, 1345, 1350], "u32": [12, 138, 181, 183, 189, 243, 297, 298, 302, 306, 312, 314, 321, 331, 337, 344, 345, 346, 347, 348, 351, 352, 354, 363, 379, 395, 396, 404, 405, 491, 493, 512, 516, 517, 520, 532, 537, 583, 599, 611, 619, 620, 624, 626, 628, 630, 632, 635, 637, 639, 643, 660, 670, 671, 676, 677, 678, 716, 721, 723, 727, 731, 735, 736, 743, 745, 766, 769, 780, 810, 825, 828, 835, 867, 897, 898, 902, 906, 912, 914, 924, 930, 949, 950, 951, 954, 955, 957, 966, 993, 997, 998, 1000, 1012, 1102, 1129, 1130, 1133, 1145, 1150, 1195, 1203, 1204, 1219, 1238, 1248, 1249, 1254, 1255, 1302, 1306, 1308, 1319, 1328, 1336, 1337, 1338, 1342, 1347], "u64": [213, 298, 321, 489, 613, 810, 869, 898, 924, 930, 1100, 1197, 1319], "u8": [183, 276, 277, 289, 321, 616, 726, 810, 828, 924, 930, 1200, 1295, 1319, 1350], "udf": [172, 231, 245, 307, 321, 413, 560, 605, 772, 810, 837, 868, 907, 924, 1172, 1319], "ufunc": 97, "uid": 138, "uint": 1350, "uint16": [150, 408, 409, 712, 810, 930, 1015, 1016, 1290, 1300, 1303, 1319], "uint2": 1345, "uint32": [131, 158, 183, 198, 253, 298, 321, 346, 351, 352, 379, 395, 396, 404, 467, 483, 486, 512, 516, 517, 532, 614, 619, 620, 621, 624, 626, 628, 630, 632, 635, 637, 639, 660, 671, 676, 677, 716, 743, 766, 769, 810, 828, 873, 898, 924, 930, 950, 954, 955, 981, 993, 997, 998, 1078, 1080, 1129, 1130, 1145, 1203, 1204, 1238, 1249, 1254, 1255, 1302, 1303, 1319], "uint4": 1347, "uint64": [131, 213, 253, 298, 321, 351, 352, 467, 489, 516, 517, 613, 621, 624, 626, 628, 630, 632, 635, 637, 639, 810, 873, 898, 924, 930, 954, 955, 1080, 1100, 1129, 1130, 1197, 1303, 1319], "uint8": [138, 183, 277, 278, 279, 289, 321, 408, 409, 616, 712, 726, 810, 828, 924, 929, 930, 1015, 1016, 1200, 1290, 1303, 1319, 1350], "uint8_pair": 1350, "uit": [685, 1263], "uk": [667, 1245], "unabl": [99, 141], "unalias": 566, "unari": [597, 810], "unbias": [468, 469, 810, 1081, 1082, 1319], "unchang": [198, 321, 615, 716, 810, 860, 907, 924, 1078, 1199, 1302, 1319], "uncompress": [35, 41, 42, 45, 49, 142, 153, 321, 924], "undefin": [719, 810], "under": [37, 41, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 90, 91, 146, 148, 150, 153, 154, 155, 246, 268, 321, 802, 803, 805, 806, 811, 812, 815, 817, 818, 819, 883, 924, 1311, 1313, 1315, 1320, 1325, 1326, 1327], "underli": [1, 50, 65, 66, 68, 83, 91, 96, 106, 123, 125, 126, 127, 129, 138, 139, 141, 145, 146, 147, 148, 154, 163, 166, 170, 199, 200, 224, 225, 255, 273, 279, 321, 375, 420, 421, 422, 426, 429, 430, 431, 432, 433, 434, 435, 436, 439, 441, 442, 444, 446, 450, 459, 460, 461, 462, 613, 640, 658, 661, 670, 810, 843, 924, 930, 977, 1000, 1026, 1027, 1028, 1032, 1035, 1036, 1037, 1041, 1042, 1043, 1045, 1046, 1049, 1051, 1052, 1054, 1056, 1060, 1069, 1070, 1071, 1072, 1085, 1197, 1215, 1225, 1236, 1239, 1248, 1294, 1300, 1319, 1347], "understood": 772, "undo": [577, 584, 585, 587, 589, 591, 592], "unexpect": [106, 115, 138, 559, 560, 810, 1172, 1319], "unhelpfulli": [159, 161], "unicod": [20, 396, 672, 677, 678, 685, 696, 930, 998, 1250, 1255, 1256, 1263, 1274], "unicodeform": [678, 1256], "unifi": [40, 278, 283, 321, 930], "uniform": [40, 321, 608, 810, 1193, 1319], "unimod": [651, 810, 1230, 1319], "unintend": [203, 321, 846, 924], "union": [57, 58, 59, 543, 831, 832, 842, 869, 880, 924, 930, 1156, 1346, 1347], "uniqu": [45, 49, 51, 69, 141, 163, 164, 165, 168, 170, 181, 221, 226, 242, 246, 256, 312, 321, 337, 348, 363, 411, 508, 537, 583, 608, 695, 697, 698, 702, 721, 723, 731, 780, 810, 825, 854, 912, 924, 928, 940, 951, 966, 1018, 1120, 1150, 1179, 1193, 1273, 1275, 1276, 1280, 1306, 1308, 1319, 1335, 1337], "unique_column_valu": [246, 321], "unique_count": [810, 1319], "uniquekeepstrategi": [286, 321, 888, 924], "unit": [40, 66, 68, 159, 160, 161, 162, 166, 170, 198, 321, 379, 420, 422, 428, 443, 449, 461, 467, 473, 557, 572, 695, 698, 722, 739, 753, 754, 755, 756, 762, 810, 869, 924, 928, 930, 981, 1026, 1028, 1034, 1053, 1059, 1071, 1078, 1080, 1086, 1170, 1273, 1276, 1307, 1319, 1350], "univers": [177, 932], "unix": [65, 66, 428, 762, 1034], "unknown": [551, 666, 770, 1244], "unless": [40, 51, 125, 278, 283, 321, 690, 691, 785, 924, 1268, 1342], "unlik": [133, 212, 321, 850, 924], "unnam": [668, 1246], "unnest": [133, 321, 411, 608, 619, 667, 668, 687, 688, 708, 710, 723, 810, 924, 973, 1018, 1164, 1193, 1203, 1265, 1266, 1319, 1340, 1346], "unpivot": [237, 321, 864, 924], "unregist": [1330, 1331, 1332, 1347, 1349], "unsaf": [810, 928], "unset": [38, 148, 153, 165, 306, 321, 383, 384, 385, 387, 388, 444, 551, 810, 906, 985, 986, 987, 989, 990, 1054, 1319, 1328], "unsign": [84, 85, 86, 87, 613, 810, 930, 1197, 1319], "unsigned_integ": 930, "unstabl": [31, 32, 33, 34, 37, 41, 45, 46, 47, 48, 49, 57, 58, 67, 69, 73, 121, 133, 138, 146, 148, 150, 153, 154, 155, 156, 163, 164, 166, 167, 168, 169, 170, 171, 268, 278, 283, 289, 290, 321, 324, 325, 410, 411, 445, 491, 560, 608, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 739, 786, 787, 810, 831, 832, 842, 883, 891, 924, 1001, 1017, 1018, 1055, 1102, 1193, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1298, 1303, 1319, 1324], "unstack": 321, "unstackdirect": [289, 321], "unsuit": 122, "unsupport": [39, 321], "until": [90, 212, 229, 321, 679, 680, 705, 850, 924, 1257, 1258, 1283], "up": [10, 40, 82, 139, 224, 227, 246, 255, 256, 262, 275, 321, 399, 400, 560, 672, 681, 682, 696, 810, 854, 855, 860, 878, 924, 930, 1003, 1250, 1259, 1260, 1274, 1319], "upcast": [336, 810], "upcast_integer_typ": [1, 54], "updat": [39, 134, 136, 137, 141, 142, 143, 144, 145, 146, 147, 148, 149, 175, 190, 321, 836, 924], "upgrad": 102, "upheld": [860, 924], "upon": 137, "upper": [136, 137, 138, 198, 212, 321, 400, 491, 497, 551, 586, 722, 732, 751, 752, 754, 755, 797, 798, 810, 850, 924, 1006, 1078, 1102, 1107, 1170, 1307, 1319, 1337, 1340], "upper_bound": [212, 321, 400, 497, 551, 810, 850, 924, 1006, 1107, 1170, 1319], "uppercas": [592, 704, 1282, 1342], "upsampl": [212, 321, 850, 924], "urandom": [379, 981], "uri": [38, 39, 138, 139, 140, 151, 152, 321], "url": [138, 139, 148, 153, 155, 666, 668, 1244, 1246], "urllib": 139, "us": [1, 7, 9, 11, 12, 14, 20, 25, 27, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 45, 46, 49, 50, 51, 57, 58, 59, 66, 82, 90, 91, 94, 98, 121, 124, 126, 127, 129, 131, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 172, 181, 182, 183, 186, 190, 192, 194, 195, 201, 202, 203, 205, 211, 212, 219, 221, 223, 224, 225, 227, 231, 237, 241, 242, 244, 245, 246, 253, 254, 255, 256, 257, 259, 260, 262, 267, 268, 269, 273, 275, 276, 277, 278, 279, 280, 283, 284, 285, 286, 288, 289, 290, 291, 292, 295, 296, 297, 298, 300, 307, 321, 324, 331, 333, 335, 337, 346, 347, 370, 375, 376, 378, 391, 393, 395, 396, 397, 400, 410, 413, 416, 417, 425, 443, 444, 445, 447, 450, 458, 461, 463, 466, 467, 468, 469, 470, 474, 475, 476, 480, 491, 495, 496, 497, 509, 523, 539, 547, 551, 553, 559, 560, 563, 584, 587, 589, 591, 592, 601, 608, 611, 613, 615, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 642, 644, 646, 647, 651, 653, 654, 656, 657, 658, 659, 661, 662, 663, 665, 666, 667, 669, 670, 671, 674, 675, 676, 677, 678, 681, 682, 683, 685, 687, 689, 691, 692, 693, 694, 695, 697, 698, 702, 705, 706, 710, 718, 724, 725, 727, 728, 729, 730, 731, 734, 735, 741, 742, 743, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 760, 762, 766, 767, 769, 770, 772, 773, 774, 776, 778, 779, 782, 785, 786, 787, 788, 789, 791, 792, 793, 794, 797, 798, 799, 800, 801, 806, 809, 810, 821, 822, 825, 826, 827, 828, 831, 832, 834, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 849, 850, 855, 858, 864, 873, 874, 875, 876, 878, 882, 883, 884, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 907, 924, 929, 930, 937, 938, 940, 969, 973, 977, 978, 980, 997, 998, 1001, 1017, 1019, 1022, 1023, 1031, 1039, 1040, 1053, 1054, 1055, 1057, 1060, 1068, 1071, 1074, 1079, 1080, 1081, 1082, 1087, 1088, 1093, 1099, 1102, 1105, 1106, 1107, 1122, 1136, 1152, 1159, 1164, 1172, 1193, 1195, 1197, 1199, 1201, 1203, 1204, 1205, 1217, 1218, 1220, 1221, 1224, 1230, 1232, 1234, 1235, 1236, 1237, 1239, 1240, 1243, 1244, 1245, 1247, 1248, 1249, 1254, 1255, 1256, 1259, 1260, 1261, 1263, 1265, 1273, 1275, 1276, 1280, 1283, 1294, 1295, 1297, 1300, 1301, 1309, 1319, 1328, 1329, 1330, 1331, 1332, 1334, 1335, 1342, 1343, 1347, 1350], "usag": [166, 170, 265, 321, 930, 1225, 1319], "usd": [210, 321, 1350], "use_pyarrow": [45, 49, 136, 140, 142, 144, 148, 151, 279, 321, 924, 1300, 1319], "use_pyarrow_extension_arrai": [280, 321, 1301, 1319], "use_pyarrow_write_to_dataset": [45, 321], "use_statist": [148, 155], "user": [38, 138, 139, 177, 231, 245, 307, 321, 559, 560, 605, 644, 772, 810, 868, 907, 924, 928, 932, 1172, 1221, 1319], "user_conn": 138, "usernam": [136, 139, 142, 144], "userwarn": 1, "usr": 138, "usual": [98, 139, 175, 283, 321, 419, 1025], "utc": [140, 151, 419, 423, 425, 427, 444, 695, 698, 929, 930, 1025, 1029, 1033, 1054, 1273, 1276], "utc_tz": 930, "utf": [37, 46, 81, 321, 924], "utf8": [20, 136, 137, 150, 672, 685, 696, 1250, 1263, 1274], "utf8_borders_onli": 20, "utf8_ful": [20, 51, 130], "utf8_full_condens": [7, 20, 130], "utf8_horizontal_onli": 20, "utf8_no_bord": 20, "util": [283, 321, 762, 924, 928], "uvw": [667, 1245], "v": [8, 9, 45, 198, 321, 643, 728, 730, 810, 1219, 1319, 1331, 1332], "v1": 32, "v2": [8, 142, 153], "val": [40, 252, 321, 560, 605, 716, 800, 810, 872, 924], "valid": [37, 40, 46, 66, 136, 138, 142, 144, 148, 150, 170, 175, 192, 198, 226, 250, 321, 410, 658, 660, 666, 667, 668, 670, 675, 681, 682, 800, 810, 838, 854, 871, 899, 924, 930, 1017, 1078, 1236, 1238, 1244, 1245, 1246, 1248, 1253, 1259, 1260, 1319, 1328, 1329], "validate_output_schema": [860, 924], "vals_phys": [716, 810], "valu": [4, 5, 10, 11, 12, 13, 17, 20, 28, 30, 36, 37, 40, 45, 46, 49, 50, 51, 59, 60, 63, 69, 70, 78, 79, 88, 91, 100, 125, 126, 128, 129, 136, 137, 138, 139, 148, 150, 153, 155, 156, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 175, 179, 181, 182, 183, 190, 194, 195, 197, 200, 201, 202, 203, 207, 210, 212, 213, 214, 218, 222, 224, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 242, 244, 246, 247, 248, 250, 253, 254, 255, 256, 257, 264, 267, 269, 270, 271, 272, 274, 275, 279, 280, 284, 285, 288, 289, 290, 291, 292, 299, 302, 303, 305, 308, 309, 311, 312, 321, 324, 325, 329, 330, 331, 333, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 354, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 371, 372, 373, 375, 376, 377, 378, 379, 380, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 409, 410, 411, 414, 416, 417, 422, 426, 436, 441, 450, 459, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 514, 515, 516, 517, 520, 521, 522, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 544, 546, 547, 548, 549, 551, 552, 553, 555, 557, 558, 559, 560, 561, 562, 563, 568, 579, 580, 581, 582, 583, 593, 594, 595, 596, 599, 601, 602, 605, 606, 608, 609, 611, 614, 615, 616, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 648, 649, 650, 651, 653, 654, 655, 657, 658, 660, 661, 662, 663, 664, 666, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 696, 705, 707, 711, 712, 714, 715, 717, 718, 719, 720, 721, 722, 723, 726, 727, 728, 729, 730, 731, 735, 738, 740, 741, 743, 745, 746, 747, 748, 749, 759, 760, 765, 766, 767, 768, 770, 773, 774, 775, 776, 777, 778, 779, 780, 784, 785, 786, 787, 793, 794, 800, 810, 825, 826, 836, 839, 840, 844, 845, 846, 850, 852, 853, 854, 855, 861, 862, 863, 864, 866, 867, 870, 871, 873, 879, 882, 884, 885, 887, 890, 891, 892, 902, 903, 905, 908, 909, 911, 912, 924, 930, 935, 937, 938, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 952, 953, 954, 955, 957, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 971, 974, 975, 977, 978, 979, 980, 981, 982, 993, 994, 997, 998, 999, 1003, 1006, 1008, 1009, 1010, 1012, 1017, 1018, 1019, 1020, 1022, 1023, 1028, 1032, 1046, 1051, 1060, 1069, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1085, 1086, 1087, 1088, 1092, 1093, 1094, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1120, 1125, 1126, 1127, 1128, 1129, 1130, 1133, 1134, 1135, 1138, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1157, 1159, 1160, 1161, 1162, 1165, 1166, 1172, 1173, 1174, 1176, 1177, 1179, 1181, 1182, 1184, 1185, 1187, 1188, 1192, 1193, 1194, 1195, 1199, 1200, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1217, 1218, 1219, 1220, 1223, 1227, 1228, 1229, 1230, 1232, 1235, 1236, 1238, 1239, 1240, 1241, 1242, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1265, 1266, 1267, 1274, 1283, 1286, 1290, 1291, 1292, 1293, 1300, 1301, 1302, 1306, 1308, 1310, 1319, 1328, 1333, 1335, 1336, 1337, 1338, 1339, 1341, 1342, 1343, 1345, 1347, 1349, 1350], "value1": [654, 810], "value2": [654, 810], "value_a": 1347, "value_b": 1347, "value_count": [721, 810, 1319], "value_cum_sum": [409, 810], "value_cum_sum_all_fil": [409, 810], "value_nam": [237, 288, 321, 864, 890, 924], "value_var": [237, 288, 321, 864, 890, 924], "valueerror": [15, 20], "valueexcept": 770, "var": [40, 171, 321, 638, 639, 810, 924, 1319, 1336], "var_samp": 1336, "vari": [141, 147, 419, 1025, 1350], "variabl": [30, 37, 41, 45, 46, 47, 48, 49, 78, 146, 148, 150, 153, 154, 155, 169, 172, 237, 276, 288, 321, 864, 890, 924, 1295, 1319, 1329, 1331, 1347], "variable_nam": [237, 288, 321, 864, 890, 924], "variad": 138, "varianc": [292, 321, 469, 509, 638, 639, 724, 799, 810, 892, 924, 1082, 1122, 1214, 1309, 1319, 1340], "variou": [138, 180, 186, 321, 810, 833, 924, 929, 930, 1319], "vector": [623, 625, 627, 629, 631, 634, 636, 638, 810, 1206, 1207, 1209, 1212, 1213, 1214, 1319], "vectoris": [437, 438, 1047, 1048], "vein": 175, "verbos": [29, 159, 161, 175, 667, 1245], "veri": [138, 224, 285, 321, 560, 810, 907, 1341], "verifi": [227, 321, 855, 924], "versicolor": [321, 324], "version": [38, 39, 56, 136, 137, 140, 141, 151, 158, 163, 164, 165, 166, 170, 173, 179, 181, 191, 213, 226, 237, 261, 268, 278, 279, 283, 297, 302, 321, 324, 413, 425, 437, 438, 450, 461, 482, 489, 567, 568, 574, 578, 615, 657, 665, 710, 725, 734, 742, 784, 789, 810, 825, 837, 842, 854, 864, 877, 883, 896, 897, 902, 924, 930, 1031, 1039, 1040, 1047, 1048, 1060, 1071, 1099, 1100, 1199, 1235, 1243, 1298, 1300, 1303, 1319, 1324], "versu": [190, 321, 836, 924], "vertic": [59, 200, 289, 293, 321, 657, 673, 1235, 1251], "vertical_relax": 59, "via": [30, 136, 137, 138, 148, 150, 153, 154, 155, 178, 180, 191, 224, 255, 321, 413, 560, 668, 810, 837, 924, 933, 1246], "view": [560, 810], "visibl": [17, 198, 321, 1078, 1319], "visit": [410, 810, 1017, 1319], "visual": [219, 221, 321, 575, 880, 924], "volk": 133, "vote": [666, 668, 1244, 1246], "vowel": [681, 682, 1259, 1260], "vstack": [59, 200, 321], "w": [40, 138, 212, 256, 321, 660, 664, 666, 668, 728, 730, 850, 924, 930, 1238, 1242, 1244, 1246, 1269, 1331, 1332, 1335], "w_i": [466, 468, 469, 810, 1079, 1081, 1082, 1319], "wa": [38, 56, 98, 141, 191, 278, 279, 321, 324, 413, 616, 683, 756, 810, 837, 924, 930, 1200, 1261, 1300, 1319, 1324], "wai": [90, 91, 123, 125, 126, 127, 129, 145, 146, 154, 211, 225, 245, 267, 300, 321, 445, 605, 654, 666, 743, 806, 810, 834, 841, 849, 868, 874, 882, 893, 900, 907, 924, 1055, 1244], "walk": 741, "want": [58, 126, 128, 136, 141, 150, 175, 200, 231, 242, 253, 268, 321, 395, 418, 476, 559, 560, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 647, 659, 676, 681, 682, 683, 737, 746, 751, 754, 760, 782, 785, 801, 810, 832, 883, 899, 924, 930, 997, 1024, 1085, 1172, 1237, 1254, 1259, 1260, 1261, 1319, 1334], "warehous": 139, "warn": [93, 94, 97, 98, 101, 108, 110, 111, 121, 601, 810, 1319], "watermark": [45, 321], "wb": [40, 321], "we": [45, 134, 136, 137, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 180, 190, 191, 212, 227, 246, 253, 291, 321, 324, 413, 440, 445, 458, 491, 523, 551, 559, 560, 621, 624, 626, 628, 630, 632, 635, 637, 639, 668, 681, 682, 700, 750, 751, 752, 753, 754, 755, 770, 797, 798, 800, 810, 836, 837, 850, 855, 860, 873, 924, 1050, 1055, 1068, 1102, 1136, 1172, 1246, 1260, 1278, 1319, 1324, 1331], "weather": [681, 682, 1259, 1260], "wed": [321, 324], "wednesdai": [212, 321, 447, 450, 850, 924, 1057, 1060], "week": [212, 227, 253, 291, 321, 418, 440, 445, 458, 460, 467, 621, 624, 626, 628, 630, 632, 635, 637, 639, 737, 751, 752, 754, 755, 756, 797, 798, 810, 850, 855, 873, 924, 930, 1024, 1050, 1055, 1068, 1070, 1080, 1319, 1343], "week_mask": [418, 737, 1024], "weekdai": [426, 441], "weekend": [418, 737, 1024], "weekli": [212, 321, 458, 850, 924, 1068], "weghorst": [668, 1246], "weight": [133, 466, 467, 468, 469, 622, 623, 625, 627, 629, 631, 634, 636, 638, 651, 810, 1079, 1080, 1081, 1082, 1205, 1206, 1207, 1208, 1209, 1210, 1212, 1213, 1214, 1230, 1319], "wei\u00df": 1342, "well": [40, 136, 137, 138, 150, 321, 497, 789, 810, 1107, 1319, 1347], "were": [175, 615, 616, 806, 810, 1199, 1200, 1319], "west": [69, 228, 321, 856, 924], "what": [180, 242, 321, 418, 559, 659, 683, 810, 1024, 1237, 1261], "whatev": 175, "when": [10, 14, 17, 19, 23, 37, 38, 39, 40, 41, 42, 45, 46, 49, 50, 66, 82, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 133, 136, 137, 138, 139, 141, 142, 144, 146, 147, 148, 150, 151, 153, 154, 155, 156, 159, 160, 161, 162, 166, 170, 175, 182, 190, 196, 198, 200, 202, 205, 212, 226, 228, 231, 245, 250, 254, 256, 259, 260, 264, 267, 273, 276, 278, 279, 283, 284, 286, 290, 296, 321, 365, 378, 395, 396, 400, 418, 466, 468, 469, 475, 544, 551, 572, 605, 615, 616, 645, 653, 654, 659, 665, 669, 671, 672, 676, 677, 683, 685, 690, 691, 692, 695, 696, 735, 737, 746, 760, 810, 826, 836, 845, 850, 854, 856, 860, 871, 875, 876, 879, 882, 887, 888, 891, 895, 921, 924, 968, 980, 997, 998, 1006, 1019, 1024, 1078, 1079, 1081, 1082, 1085, 1088, 1157, 1199, 1200, 1218, 1220, 1223, 1237, 1243, 1247, 1249, 1250, 1254, 1255, 1261, 1263, 1268, 1269, 1270, 1273, 1274, 1294, 1295, 1300, 1319, 1334, 1347], "when_matched_update_al": [39, 321], "when_not_matched_insert_al": [39, 321], "where": [40, 51, 98, 138, 139, 141, 194, 195, 200, 203, 212, 224, 228, 237, 246, 255, 268, 269, 278, 283, 288, 290, 292, 321, 347, 450, 460, 463, 465, 467, 476, 547, 553, 559, 596, 614, 643, 651, 654, 656, 683, 703, 724, 736, 742, 744, 786, 787, 789, 791, 799, 800, 810, 839, 840, 846, 850, 856, 864, 883, 884, 890, 891, 892, 924, 950, 1060, 1070, 1074, 1076, 1080, 1085, 1089, 1184, 1219, 1230, 1234, 1261, 1281, 1309, 1310, 1319, 1328, 1336, 1346, 1347, 1349], "wherea": [136, 150, 253, 321, 393, 397, 445, 458, 593, 594, 621, 810, 873, 924, 1055, 1068, 1181, 1182, 1319], "wherev": [40, 231, 307, 321, 560, 810, 1172, 1319], "whether": [37, 46, 127, 129, 133, 141, 147, 148, 153, 155, 170, 174, 197, 223, 227, 262, 267, 321, 333, 335, 349, 350, 430, 446, 488, 514, 515, 644, 654, 669, 671, 735, 810, 855, 860, 878, 882, 924, 930, 937, 938, 952, 953, 996, 1001, 1036, 1056, 1077, 1098, 1099, 1127, 1128, 1247, 1249, 1319, 1331, 1347], "which": [1, 6, 10, 20, 35, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 126, 128, 136, 137, 138, 139, 140, 141, 146, 147, 148, 150, 151, 152, 153, 154, 155, 166, 169, 171, 175, 182, 183, 190, 191, 194, 195, 200, 201, 211, 212, 217, 226, 227, 246, 253, 261, 278, 279, 284, 286, 291, 321, 333, 370, 378, 413, 418, 440, 445, 447, 458, 467, 473, 497, 499, 502, 504, 505, 506, 507, 551, 559, 560, 572, 574, 621, 624, 626, 628, 630, 632, 635, 637, 639, 682, 700, 737, 751, 752, 754, 755, 756, 797, 798, 800, 810, 826, 828, 831, 834, 836, 837, 839, 840, 841, 842, 850, 854, 855, 873, 877, 887, 888, 893, 924, 930, 973, 980, 1024, 1050, 1055, 1057, 1068, 1080, 1085, 1086, 1107, 1110, 1113, 1115, 1116, 1117, 1118, 1164, 1220, 1278, 1298, 1300, 1319, 1329, 1335, 1347, 1350], "while": [39, 58, 137, 140, 141, 151, 155, 166, 170, 175, 224, 237, 285, 288, 290, 321, 396, 615, 677, 810, 832, 864, 890, 891, 924, 998, 1199, 1255, 1319], "white": [40, 321], "whitespac": [130, 690, 691, 692, 1268, 1269, 1270, 1342], "whole": [559, 653, 654, 666, 810, 907, 924, 1244], "whose": [51, 227, 246, 321, 470, 758, 810, 855, 924, 930], "why": [831, 924], "wide": [138, 210, 237, 246, 288, 289, 321, 864, 890, 924], "width": [26, 40, 60, 136, 137, 150, 321, 324, 550, 739, 924, 1163, 1319, 1324], "wiki": 20, "wikipedia": 20, "wildcard": [470, 706, 746, 747, 760, 784, 806, 810, 928], "win_loss": [40, 321], "window": [136, 137, 150, 212, 253, 321, 410, 466, 468, 469, 560, 601, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 740, 786, 787, 810, 850, 873, 924, 1017, 1079, 1081, 1082, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1319], "window_s": [622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 786, 787, 810, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1319], "windowmappingstrategi": [601, 810], "winter": [669, 671, 681, 682, 1247, 1249], "wise": [40, 51, 138, 205, 321, 338, 339, 340, 341, 342, 343, 401, 402, 403, 471, 555, 648, 649, 650, 714, 715, 760, 784, 810, 941, 942, 943, 944, 945, 946, 1008, 1009, 1010, 1083, 1168, 1169, 1227, 1228, 1229, 1292, 1293, 1319], "wish": [182, 284, 321, 390, 391, 717, 718, 810, 826, 887, 924, 992, 1304, 1319], "with_column": [1, 12, 54, 57, 58, 212, 245, 253, 283, 289, 296, 321, 330, 332, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 363, 364, 365, 366, 370, 375, 376, 378, 379, 392, 393, 395, 396, 397, 400, 405, 406, 407, 408, 409, 411, 414, 418, 419, 421, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 459, 460, 462, 464, 465, 467, 474, 475, 480, 485, 487, 489, 495, 496, 497, 500, 501, 503, 504, 505, 506, 507, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 580, 582, 584, 585, 587, 589, 591, 592, 595, 596, 597, 601, 602, 605, 606, 608, 611, 615, 616, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 641, 645, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 699, 700, 701, 703, 704, 705, 707, 710, 711, 716, 719, 726, 728, 730, 733, 737, 738, 739, 740, 741, 746, 747, 749, 750, 752, 753, 757, 767, 771, 774, 776, 779, 790, 794, 796, 798, 800, 806, 810, 831, 832, 842, 850, 852, 868, 869, 873, 880, 895, 924, 930, 1018, 1054, 1193, 1249, 1319, 1347], "with_column_nam": 150, "with_columns_seq": [321, 924], "with_context": 924, "with_field": [560, 810], "with_replac": [257, 321, 539, 642, 810, 1152, 1217, 1319], "with_row_count": [321, 924], "with_row_index": [1, 253, 297, 321, 624, 626, 628, 630, 632, 635, 637, 639, 810, 897, 924, 1218, 1319, 1324], "within": [45, 60, 70, 78, 159, 160, 161, 162, 211, 212, 213, 227, 253, 291, 321, 489, 611, 654, 810, 850, 855, 873, 924, 1100, 1319, 1347], "without": [1, 31, 32, 33, 34, 37, 41, 45, 46, 47, 48, 49, 56, 57, 58, 67, 69, 73, 98, 101, 130, 133, 140, 143, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 163, 164, 166, 167, 168, 169, 170, 171, 226, 228, 268, 278, 279, 283, 289, 290, 321, 324, 325, 410, 411, 445, 491, 560, 608, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 659, 669, 671, 683, 739, 743, 786, 787, 788, 810, 831, 832, 842, 854, 856, 883, 891, 924, 996, 1001, 1017, 1018, 1055, 1102, 1193, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1237, 1247, 1249, 1261, 1298, 1300, 1303, 1319, 1324, 1349], "without_fil": [140, 151, 152], "wod": [692, 1270], "womp": [287, 321, 889, 924], "word": [139, 681, 682, 691, 692, 703, 1281], "work": [40, 67, 69, 73, 137, 156, 260, 296, 321, 333, 335, 371, 395, 396, 399, 400, 470, 479, 523, 552, 559, 560, 584, 585, 587, 589, 591, 592, 601, 672, 676, 677, 685, 696, 720, 810, 876, 895, 924, 930, 937, 938, 974, 997, 998, 1003, 1006, 1092, 1136, 1165, 1250, 1254, 1255, 1263, 1274, 1305, 1319], "workaround": 321, "workbook": [40, 141, 147, 321], "working_with_conditional_format": [40, 321], "working_with_sparklin": [40, 321], "worksheet": [40, 141, 147, 321], "world": [1, 20, 659, 683, 690, 691, 692, 930, 1143, 1237, 1261, 1268, 1269, 1270, 1330, 1333], "wors": [882, 924], "worth": [523, 1136], "worthwhil": [159, 161], "would": [97, 136, 137, 150, 180, 279, 283, 321, 324, 346, 357, 418, 528, 559, 560, 571, 601, 611, 735, 737, 810, 949, 960, 1024, 1141, 1195, 1300, 1319, 1324, 1345], "wrap": [80, 130, 392, 497, 559, 810, 993, 1319], "wrap_numer": [392, 810, 993, 1319], "wrapper": [58, 832, 924], "writabl": [35, 37, 41, 42, 43, 44, 45, 261, 279, 321, 1300, 1319], "write": [35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 47, 48, 49, 135, 137, 142, 175, 186, 321, 400, 575, 578, 810, 858, 880, 924, 930, 1006, 1319], "write_avro": 321, "write_clipboard": [135, 321], "write_csv": [36, 137, 150, 321], "write_databas": 321, "write_delta": 321, "write_excel": 321, "write_ipc": [142, 321], "write_ipc_stream": 321, "write_json": 321, "write_markdown_frame_to_stdout": 175, "write_ndjson": [43, 321], "write_parquet": 321, "write_t": [45, 321], "write_to_dataset": [45, 321], "writeabl": [279, 321, 1300, 1319], "written": [6, 35, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 261, 321, 574, 877, 924], "ww": [1342, 1349], "www": [678, 708, 1256], "x": [27, 51, 59, 82, 100, 124, 130, 136, 137, 139, 141, 147, 150, 163, 164, 166, 179, 198, 216, 219, 221, 226, 246, 255, 256, 285, 288, 289, 321, 324, 330, 332, 334, 353, 358, 379, 405, 412, 464, 465, 480, 485, 487, 489, 511, 518, 530, 556, 558, 559, 560, 580, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 595, 596, 600, 606, 614, 615, 616, 620, 648, 651, 687, 710, 711, 716, 719, 726, 728, 730, 733, 734, 740, 746, 747, 749, 760, 770, 771, 774, 776, 779, 784, 789, 794, 800, 810, 854, 860, 881, 883, 890, 924, 929, 930, 961, 1000, 1012, 1088, 1172, 1199, 1200, 1227, 1230, 1265, 1298, 1302, 1303, 1319, 1324, 1331, 1332, 1335, 1341, 1347, 1349], "x00": [374, 375, 376, 377, 378, 380, 661, 976, 977, 978, 979, 980, 982, 1239], "x01": [378, 980], "x05": [378, 980], "x07": 379, "x1": 379, "x10": [378, 980], "x80": 379, "x83": 379, "x88": 379, "x8e": 379, "x99": 379, "x_": [467, 810, 1080, 1319], "x_0": [289, 321, 466, 467, 468, 469, 810, 1079, 1080, 1081, 1082, 1319], "x_1": [289, 321, 467, 810, 1080, 1319], "x_2": [466, 468, 469, 810, 1079, 1081, 1082, 1319], "x_i": [467, 810, 1080, 1319], "x_invers": [606, 810], "x_pow_8": 1341, "x_round": 1341, "x_round_1": 1341, "x_squar": [606, 810], "x_t": [466, 468, 469, 810, 1079, 1081, 1082, 1319], "x_uniqu": [583, 810], "x_y": [358, 530], "xb": 379, "xb9neq": 379, "xbd": 379, "xc14": 379, "xd3": 379, "xdist": 1350, "xee": 379, "xf4v": 379, "xf9": 379, "xfb": 379, "xff": [374, 375, 376, 377, 380, 661, 976, 977, 978, 979, 982, 1239], "xi": [667, 1245], "xl": 141, "xlog2": [582, 606, 810], "xlsb": 141, "xlsx": [40, 141, 321], "xlsx2csv": [141, 158], "xlsxwriter": [40, 158, 321], "xor": [389, 810, 991, 1319, 1338], "xor_xi": [726, 810], "xx": [10, 52, 54, 170, 190, 268, 321, 836, 924, 930, 1335, 1342, 1349], "xxx": [194, 321, 708, 839, 924], "xy": [52, 54], "xyz": [7, 16, 18, 19, 20, 21, 22, 23, 24, 25, 330, 660, 667, 810, 1238, 1245, 1296, 1319], "y": [27, 51, 59, 82, 100, 124, 130, 163, 164, 166, 179, 198, 219, 221, 226, 246, 255, 256, 285, 288, 289, 321, 324, 330, 332, 334, 353, 358, 379, 447, 450, 464, 465, 485, 487, 511, 518, 530, 558, 560, 583, 585, 587, 589, 591, 592, 595, 596, 600, 614, 615, 616, 620, 695, 697, 698, 710, 719, 726, 728, 730, 733, 734, 749, 756, 770, 774, 776, 779, 789, 794, 810, 854, 881, 883, 890, 924, 929, 930, 961, 1000, 1057, 1060, 1199, 1200, 1273, 1275, 1276, 1319, 1324, 1335, 1342, 1343, 1349], "y_": [466, 467, 468, 469, 810, 1079, 1080, 1081, 1082, 1319], "y_0": [289, 321, 466, 467, 468, 469, 810, 1079, 1080, 1081, 1082, 1319], "y_1": [289, 321], "y_i": [467, 810, 1080, 1319], "y_mul": 710, "y_t": [466, 468, 469, 810, 1079, 1081, 1082, 1319], "y_uniqu": [583, 810], "ya": [685, 1263], "ya29": 152, "year": [212, 227, 253, 268, 291, 321, 418, 430, 431, 440, 441, 443, 445, 458, 459, 621, 624, 626, 628, 630, 632, 635, 637, 639, 737, 750, 751, 752, 753, 754, 755, 797, 798, 810, 850, 855, 873, 924, 930, 1024, 1036, 1037, 1050, 1051, 1053, 1055, 1068, 1069, 1343], "yellow": [321, 325, 374, 375, 376, 377, 380], "yield": [127, 129, 136, 137, 138, 150, 198, 200, 223, 285, 321, 480, 559, 601, 810, 924, 1078, 1085, 1319], "you": [1, 10, 14, 40, 45, 49, 51, 58, 59, 123, 125, 126, 127, 128, 129, 136, 137, 138, 139, 141, 142, 145, 146, 150, 154, 156, 175, 182, 200, 203, 212, 223, 224, 227, 231, 242, 246, 253, 254, 255, 256, 268, 275, 278, 284, 285, 286, 288, 307, 321, 324, 390, 391, 395, 418, 437, 438, 440, 444, 447, 450, 470, 476, 497, 523, 551, 559, 560, 575, 601, 606, 613, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 647, 659, 676, 681, 682, 683, 703, 706, 717, 718, 737, 746, 751, 754, 756, 760, 772, 782, 785, 789, 801, 810, 826, 832, 846, 850, 855, 873, 880, 883, 887, 888, 890, 899, 907, 924, 928, 930, 992, 997, 1024, 1047, 1048, 1054, 1057, 1060, 1085, 1107, 1136, 1172, 1191, 1197, 1237, 1254, 1259, 1260, 1261, 1281, 1298, 1304, 1319, 1324, 1329, 1334, 1350], "your": [38, 40, 50, 51, 91, 136, 137, 138, 139, 141, 156, 175, 224, 226, 231, 255, 256, 259, 275, 295, 300, 307, 321, 324, 423, 467, 482, 560, 668, 695, 697, 698, 705, 772, 810, 854, 860, 875, 894, 900, 907, 924, 1029, 1080, 1172, 1246, 1273, 1275, 1276, 1283, 1319, 1324, 1350], "yy": [10, 52, 54, 170, 190, 268, 321, 836, 924, 930, 1335, 1342, 1349], "yyi": [194, 321, 708, 839, 924], "yyyi": [40, 321], "yz": [52, 54], "z": [40, 59, 82, 130, 164, 198, 219, 221, 226, 255, 256, 285, 288, 289, 321, 330, 332, 334, 489, 518, 560, 585, 587, 589, 591, 592, 600, 614, 615, 616, 659, 667, 669, 671, 683, 695, 698, 728, 730, 749, 774, 776, 779, 785, 789, 794, 810, 854, 881, 883, 890, 924, 929, 930, 1088, 1199, 1200, 1237, 1245, 1247, 1249, 1261, 1273, 1276, 1319, 1331, 1335, 1347, 1349], "z_0": [289, 321], "z_1": [289, 321], "zap": 930, "zero": [28, 40, 123, 124, 134, 136, 137, 142, 144, 148, 165, 168, 179, 202, 212, 224, 254, 268, 273, 279, 280, 321, 475, 551, 556, 643, 651, 705, 719, 810, 829, 845, 850, 924, 1005, 1088, 1164, 1230, 1283, 1294, 1300, 1301, 1319, 1341, 1347], "zero_copy_onli": [1300, 1319], "zfill": [680, 726, 810, 1258], "zip": 1350, "zip_with": [205, 321, 1319], "zone": [66, 166, 167, 170, 419, 423, 444, 467, 698, 753, 754, 755, 810, 930, 1025, 1029, 1054, 1080, 1276, 1319], "zoneinfo": [66, 930], "zoom": [40, 321], "zstd": [41, 42, 45, 47, 49, 321, 924], "zz": [170, 190, 268, 321, 836, 924, 1335, 1342, 1349], "zzz": 708, "\u03bc": [130, 183, 212, 224, 253, 255, 256, 275, 291, 321, 419, 420, 422, 423, 424, 425, 427, 429, 432, 434, 435, 437, 438, 439, 440, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 621, 624, 626, 628, 630, 632, 635, 637, 639, 695, 698, 753, 754, 755, 756, 762, 810, 828, 850, 873, 924, 930, 1025, 1026, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1040, 1041, 1045, 1047, 1048, 1049, 1050, 1054, 1055, 1058, 1059, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1071, 1273, 1276, 1342], "\u0441\u0438\u043d\u0438\u0439": 1342, "\u0967\u096f\u096f\u096f": 930, "\u0968\u0966\u096d\u096d": 930, "\u4eac\u90fd": 930, "\u5927\u962a": 930, "\u6771\u4eac": [395, 396, 676, 677, 930, 997, 998, 1254, 1255], "\u90fd\u5e02": 930, "\uff4b\uff41\uff44\uff4f\uff4b\uff41\uff57\uff41": [678, 1256], "\ud835\udf0b": 1341}, "titles": ["Index", "Extending the API", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.CredentialProvider", "polars.CredentialProviderAWS", "polars.CredentialProviderAzure", "polars.CredentialProviderGCP", "polars.DataFrame.write_avro", "polars.DataFrame.write_clipboard", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.StringCache", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.datatypes.Array", "polars.datatypes.Binary", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Decimal", "polars.datatypes.Duration", "polars.datatypes.Enum", "polars.datatypes.Field", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int128", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.String", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.disable_string_cache", "polars.enable_string_cache", "polars.escape_regex", "polars.exceptions.CategoricalRemappingWarning", "polars.exceptions.ChronoFormatWarning", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.CustomUFuncWarning", "polars.exceptions.DataOrientationWarning", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.MapWithoutReturnDtypeWarning", "polars.exceptions.ModuleUpgradeRequiredError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.OutOfBoundsError", "polars.exceptions.PanicException", "polars.exceptions.ParameterCollisionError", "polars.exceptions.PerformanceWarning", "polars.exceptions.PolarsError", "polars.exceptions.PolarsInefficientMapWarning", "polars.exceptions.PolarsWarning", "polars.exceptions.RowsError", "polars.exceptions.SQLInterfaceError", "polars.exceptions.SQLSyntaxError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StringCacheMismatchError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.exceptions.UnstableWarning", "polars.exceptions.UnsuitableSQLError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.json_normalize", "polars.read_avro", "polars.read_clipboard", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.dtypes", "polars.testing.parametric.lists", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.thread_pool_size", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__array__", "polars.DataFrame.__arrow_c_stream__", "polars.DataFrame.__dataframe__", "polars.DataFrame.__getitem__", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.collect_schema", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.deserialize", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nans", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.join_where", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.serialize", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.sql", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_jax", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.to_torch", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unpivot", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.len", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Style", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.max", "polars.Expr.arr.median", "polars.Expr.arr.min", "polars.Expr.arr.n_unique", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.sort", "polars.Expr.arr.std", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.arr.var", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.reinterpret", "polars.Expr.bin.size", "polars.Expr.bin.starts_with", "polars.Expr.bitwise_and", "polars.Expr.bitwise_count_ones", "polars.Expr.bitwise_count_zeros", "polars.Expr.bitwise_leading_ones", "polars.Expr.bitwise_leading_zeros", "polars.Expr.bitwise_or", "polars.Expr.bitwise_trailing_ones", "polars.Expr.bitwise_trailing_zeros", "polars.Expr.bitwise_xor", "polars.Expr.bottom_k", "polars.Expr.bottom_k_by", "polars.Expr.cast", "polars.Expr.cat.ends_with", "polars.Expr.cat.get_categories", "polars.Expr.cat.len_bytes", "polars.Expr.cat.len_chars", "polars.Expr.cat.starts_with", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.deserialize", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.add_business_days", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.century", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.millennium", "polars.Expr.dt.millisecond", "polars.Expr.dt.minute", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_mean_by", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.has_nulls", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.index_of", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.interpolate_by", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.gather_every", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.median", "polars.Expr.list.min", "polars.Expr.list.n_unique", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.std", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.list.var", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map_batches", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_column", "polars.Expr.meta.is_column_selection", "polars.Expr.meta.is_literal", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.serialize", "polars.Expr.meta.show_graph", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.map_fields", "polars.Expr.name.prefix", "polars.Expr.name.prefix_fields", "polars.Expr.name.suffix", "polars.Expr.name.suffix_fields", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.neg", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.replace_strict", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_max_by", "polars.Expr.rolling_mean", "polars.Expr.rolling_mean_by", "polars.Expr.rolling_median", "polars.Expr.rolling_median_by", "polars.Expr.rolling_min", "polars.Expr.rolling_min_by", "polars.Expr.rolling_quantile", "polars.Expr.rolling_quantile_by", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_std_by", "polars.Expr.rolling_sum", "polars.Expr.rolling_sum_by", "polars.Expr.rolling_var", "polars.Expr.rolling_var_by", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.escape_regex", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.extract_many", "polars.Expr.str.find", "polars.Expr.str.find_many", "polars.Expr.str.head", "polars.Expr.str.join", "polars.Expr.str.json_decode", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.normalize", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.tail", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.struct.unnest", "polars.Expr.struct.with_fields", "polars.Expr.sub", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.top_k_by", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.business_day_count", "polars.coalesce", "polars.concat_arr", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.len", "polars.lit", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.mean_horizontal", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.nth", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "Python API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.collect_schema", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.describe", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nans", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.join_where", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.sql", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.unpivot", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.lazyframe.engine_config.GPUEngine", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.len", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "polars.lazyframe.in_process.InProcessQuery.cancel", "polars.lazyframe.in_process.InProcessQuery.fetch", "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "Attributes", "Descriptive", "GPUEngine", "GroupBy", "InProcessQuery", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Metadata", "Plugins", "Schema", "Selectors", "Aggregation", "polars.Series.__array__", "polars.Series.__arrow_c_stream__", "polars.Series.__getitem__", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.approx_n_unique", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.max", "polars.Series.arr.median", "polars.Series.arr.min", "polars.Series.arr.n_unique", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.sort", "polars.Series.arr.std", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.arr.var", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.reinterpret", "polars.Series.bin.size", "polars.Series.bin.starts_with", "polars.Series.bitwise_and", "polars.Series.bitwise_count_ones", "polars.Series.bitwise_count_zeros", "polars.Series.bitwise_leading_ones", "polars.Series.bitwise_leading_zeros", "polars.Series.bitwise_or", "polars.Series.bitwise_trailing_ones", "polars.Series.bitwise_trailing_zeros", "polars.Series.bitwise_xor", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat.ends_with", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.len_bytes", "polars.Series.cat.len_chars", "polars.Series.cat.starts_with", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.count", "polars.Series.cum_count", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.add_business_days", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.century", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.millennium", "polars.Series.dt.millisecond", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.eq", "polars.Series.eq_missing", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_mean_by", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.first", "polars.Series.flags", "polars.Series.floor", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.ge", "polars.Series.get_chunks", "polars.Series.gt", "polars.Series.has_nulls", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.index_of", "polars.Series.interpolate", "polars.Series.interpolate_by", "polars.Series.is_between", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first_distinct", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_sorted", "polars.Series.is_unique", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.last", "polars.Series.le", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.gather_every", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.median", "polars.Series.list.min", "polars.Series.list.n_unique", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.std", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.list.var", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.lt", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.ne", "polars.Series.ne_missing", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.pow", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.replace", "polars.Series.replace_strict", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.set", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.escape_regex", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.extract_many", "polars.Series.str.find", "polars.Series.str.find_many", "polars.Series.str.head", "polars.Series.str.join", "polars.Series.str.json_decode", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.normalize", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.tail", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_jax", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.to_torch", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Operators", "Plot", "String", "Struct", "Temporal", "polars.SQLContext.execute", "polars.SQLContext.execute_global", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "SQL Clauses", "Aggregate", "Array", "Temporal", "Conditional", "SQL Functions", "Math", "String", "Temporal", "Trigonometry", "Types", "SQL Interface", "Python API", "Set Operations", "Table Operations", "Testing"], "titleterms": {"BY": [1335, 1348], "IF": 1339, "__array__": [177, 932], "__arrow_c_stream__": [178, 933], "__dataframe__": 179, "__getitem__": [180, 934], "__iter__": 299, "ab": [329, 935, 1341], "aco": 1344, "acosd": 1344, "add": 330, "add_business_dai": [418, 1024], "agg": [300, 900], "agg_group": 331, "aggreg": [176, 328, 824, 931, 1336], "alia": [332, 936], "alias": [1336, 1341, 1342], "align_fram": 51, "all": [301, 333, 349, 514, 727, 901, 937, 952, 1127, 1348], "all_horizont": 728, "and_": 334, "ani": [335, 350, 515, 729, 938, 953, 1128], "any_horizont": 730, "api": [1, 52, 53, 54, 55, 822, 1347], "append": [336, 939], "approx_n_uniqu": [181, 337, 731, 825, 940], "arang": 732, "arcco": [338, 941], "arccosh": [339, 942], "arcsin": [340, 943], "arcsinh": [341, 944], "arctan": [342, 945], "arctan2": 733, "arctan2d": 734, "arctanh": [343, 946], "arg_max": [344, 351, 516, 947, 954, 1129], "arg_min": [345, 352, 517, 948, 955, 1130], "arg_sort": [346, 949], "arg_sort_bi": 735, "arg_tru": [347, 950], "arg_uniqu": [348, 951], "arg_wher": 736, "arr": [349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975], "arrai": [60, 802, 1311, 1337], "array_agg": 1337, "array_contain": 1337, "array_get": 1337, "array_length": 1337, "array_low": 1337, "array_mean": 1337, "array_revers": 1337, "array_sum": 1337, "array_to_str": 1337, "array_uniqu": 1337, "array_upp": 1337, "asin": 1344, "asind": 1344, "assert": 1350, "assert_frame_equ": 159, "assert_frame_not_equ": 160, "assert_series_equ": 161, "assert_series_not_equ": 162, "atan": 1344, "atan2": 1344, "atan2d": 1344, "atand": 1344, "attribut": [316, 919, 1312], "avail": 1, "avg": 1336, "avro": 823, "backward_fil": 373, "base_utc_offset": [419, 1025], "batched_read": 132, "batchedcsvread": 132, "bin": [374, 375, 376, 377, 378, 379, 380, 976, 977, 978, 979, 980, 981, 982], "binari": [61, 803, 816, 1313], "bit_and": 1338, "bit_count": 1338, "bit_length": 1342, "bit_or": 1338, "bit_xor": 1338, "bitwise_and": [381, 983], "bitwise_count_on": [382, 984], "bitwise_count_zero": [383, 985], "bitwise_leading_on": [384, 986], "bitwise_leading_zero": [385, 987], "bitwise_or": [386, 988], "bitwise_trailing_on": [387, 989], "bitwise_trailing_zero": [388, 990], "bitwise_xor": [389, 991], "boolean": [62, 804, 1314], "bottom_k": [182, 390, 826, 992], "bottom_k_bi": 391, "build_info": 56, "business_day_count": 737, "cach": 827, "cancel": 916, "cast": [183, 392, 828, 993, 1345], "cast_time_unit": [420, 1026], "cat": [393, 394, 395, 396, 397, 994, 995, 996, 997, 998, 999, 1000, 1001], "categor": 63, "categori": [805, 1315], "categoricalremappingwarn": 93, "cbrt": [398, 1002, 1341], "ceil": [399, 1003, 1341], "centuri": [421, 1027], "chronoformatwarn": 94, "chunk_length": 1004, "claus": 1335, "clear": [184, 829, 1005], "clip": [400, 1006], "clipboard": 823, "clone": [185, 830, 1007], "cloud": 823, "co": [401, 1008, 1344], "coalesc": [738, 1339], "col": 806, "collect": 831, "collect_al": 57, "collect_all_async": 58, "collect_async": 832, "collect_schema": [186, 833], "column": [163, 164, 187, 807, 834], "columnnotfounderror": 95, "combin": [422, 1028], "comparison": [816, 1323], "comput": [317, 808, 1316], "computeerror": 96, "concat": [59, 518, 657, 1131, 1235, 1342], "concat_arr": 739, "concat_list": 740, "concat_str": 741, "concat_w": 1342, "condit": 1339, "config": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 175], "conjunct": 816, "contain": [353, 374, 519, 658, 956, 976, 1132, 1236], "contains_ani": [659, 1237], "context": 175, "convers": 821, "convert_time_zon": [423, 1029], "corr": [188, 742], "cosd": 1344, "cosh": [402, 1009], "cot": [403, 1010, 1344], "cotd": 1344, "count": [189, 302, 404, 743, 835, 902, 1011, 1336], "count_match": [354, 520, 660, 957, 1133, 1238], "cov": 744, "creat": 1349, "create_list_strategi": 165, "credenti": 823, "credentialprovid": 31, "credentialprovideraw": 32, "credentialproviderazur": 33, "credentialprovidergcp": 34, "csv": [132, 823], "cum_count": [405, 745, 1012], "cum_fold": 746, "cum_max": [406, 1013], "cum_min": [407, 1014], "cum_prod": [408, 1015], "cum_reduc": 747, "cum_sum": [409, 748, 1016], "cum_sum_horizont": 749, "cumulative_ev": [410, 1017], "customufuncwarn": 97, "cut": [411, 1018], "dai": [426, 1032], "data": 326, "databas": 823, "datafram": [35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 166, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 321], "dataorientationwarn": 98, "dataset": 823, "datatyp": [60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 326], "date": [65, 424, 750, 1030, 1342], "date_part": 1343, "date_rang": [751, 752], "datetim": [66, 425, 753, 1031], "datetime_rang": [754, 755], "decim": 67, "decod": [375, 661, 977, 1239], "decor": 175, "degre": [412, 1344], "delta": 823, "describ": [190, 836, 1019], "descript": [318, 920, 1317], "deseri": [191, 413, 837], "diff": [414, 521, 1020, 1134], "disable_string_cach": 90, "distinct": 1335, "div": 1341, "document": 1347, "dot": [415, 1021], "drop": [192, 838, 1349], "drop_in_plac": 193, "drop_nan": [194, 416, 839, 1022], "drop_nul": [195, 417, 522, 840, 1023, 1135], "dst_offset": [427, 1033], "dt": [418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072], "dtype": [167, 196, 841, 1073], "duplicateerror": 99, "durat": [68, 756], "element": 757, "enable_string_cach": 91, "encod": [376, 662, 978, 1240], "ends_with": [377, 393, 663, 979, 994, 1241, 1342], "engine_config": 899, "entropi": [463, 1074], "enum": 69, "epoch": [428, 1034], "eq": [464, 564, 1075], "eq_miss": [465, 1076], "equal": [197, 1077], "error": 327, "escape_regex": [92, 664, 1242], "estimated_s": [198, 1078], "eval": [523, 1136], "ewm_mean": [466, 1079], "ewm_mean_bi": [467, 1080], "ewm_std": [468, 1081], "ewm_var": [469, 1082], "exampl": [1, 930, 1350], "excel": 823, "except": [93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 327, 1348], "exclud": [470, 758], "execut": 1328, "execute_glob": 1329, "exp": [471, 1083, 1341], "explain": [842, 1349], "explod": [199, 355, 472, 524, 665, 843, 958, 1084, 1137, 1243], "export": [319, 1318], "expr": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726], "express": [810, 1347], "extend": [1, 200, 1085], "extend_const": [473, 1086], "extract": [666, 1244, 1343], "extract_al": [667, 1245], "extract_group": [668, 1246], "extract_mani": [669, 1247], "feather": 823, "fetch": 917, "fetch_block": 918, "field": [70, 706, 1284, 1285], "fill_nan": [201, 474, 844, 1087], "fill_nul": [202, 475, 845, 1088], "filter": [203, 476, 846, 1089], "find": [670, 1248], "find_mani": [671, 1249], "first": [303, 356, 477, 525, 759, 847, 903, 959, 1090, 1138, 1336], "flag": [204, 1091], "flatten": 478, "float32": 71, "float64": 72, "floor": [479, 1092, 1341], "floordiv": 480, "fold": [205, 760], "format": 761, "forward_fil": 481, "frame": 1347, "from": 1335, "from_arrow": 123, "from_datafram": 124, "from_dict": [125, 126], "from_epoch": 762, "from_json": 482, "from_numpi": 127, "from_panda": 128, "from_record": 129, "from_repr": 130, "function": [1, 809, 821, 930, 1340], "gather": [483, 526, 1093, 1139], "gather_everi": [206, 484, 527, 848, 1094, 1140], "ge": [485, 1095], "get": [357, 486, 528, 960, 1141], "get_categori": [394, 995], "get_chunk": 1096, "get_column": [207, 209], "get_column_index": 208, "get_index_typ": 131, "glimps": 210, "global": 1347, "gpuengin": [899, 921], "greatest": 1339, "group": [763, 1335], "group_bi": [211, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 849, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915], "group_by_dynam": [212, 850], "groupbi": [299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 320, 922], "gt": [487, 1097], "has_multiple_output": 565, "has_nul": [488, 1098], "has_valid": 1099, "hash": [489, 1100], "hash_row": 213, "have": 1335, "head": [214, 304, 490, 529, 672, 764, 851, 904, 1101, 1142, 1250], "height": 215, "helper": 1350, "hist": [491, 1102], "hour": [429, 1035], "hstack": 216, "iceberg": 823, "ifnul": 1339, "implod": [492, 765, 1103], "import": 930, "in_process": [916, 917, 918], "index": 0, "index_of": [493, 1104], "initcap": 1342, "inprocessqueri": [916, 917, 918, 923], "input": 823, "insert_column": 217, "inspect": [494, 852], "instanc": 175, "int128": 73, "int16": 74, "int32": 75, "int64": 76, "int8": 77, "int_rang": [766, 767], "interfac": 1346, "interpol": [218, 495, 853, 1105], "interpolate_bi": [496, 1106], "intersect": 1348, "introduct": 1347, "invalidoperationerror": 100, "io": 132, "ipc": 823, "is_between": [497, 1107], "is_column": 566, "is_column_select": 567, "is_dupl": [219, 498, 1108], "is_empti": [220, 1109], "is_finit": [499, 1110], "is_first_distinct": [500, 1111], "is_in": [501, 1112], "is_infinit": [502, 1113], "is_last_distinct": [503, 1114], "is_leap_year": [430, 1036], "is_liter": 568, "is_loc": 996, "is_nan": [504, 1115], "is_not_nan": [505, 1116], "is_not_nul": [506, 1117], "is_nul": [507, 1118], "is_regex_project": 569, "is_sort": 1119, "is_uniqu": [221, 508, 1120], "iso_year": [431, 1037], "item": [222, 1121], "iter_column": 223, "iter_row": 224, "iter_slic": 225, "join": [226, 358, 530, 673, 854, 961, 1143, 1251, 1335], "join_asof": [227, 855], "join_wher": [228, 856], "json": 823, "json_decod": [674, 1252], "json_encod": [707, 1286], "json_norm": 133, "json_path_match": [675, 1253], "keep": 584, "kurtosi": [509, 1122], "lake": 823, "last": [305, 359, 510, 531, 768, 857, 905, 962, 1123, 1144, 1336], "lazi": [229, 858], "lazyfram": [46, 47, 48, 49, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 924], "lazygroupbi": [900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915], "le": [511, 1124], "least": 1339, "left": 1342, "len": [306, 512, 532, 769, 906, 1125, 1145], "len_byt": [395, 676, 997, 1254], "len_char": [396, 677, 998, 1255], "length": 1342, "limit": [230, 513, 859, 1126, 1335], "list": [78, 168, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 811, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1320], "lit": 770, "ln": 1341, "load": [2, 175], "load_from_fil": 3, "load_profil": 169, "log": [554, 1167, 1341], "log10": [555, 1168, 1341], "log1p": [556, 1169, 1341], "log2": 1341, "lower": 1342, "lower_bound": [557, 1170], "lt": [558, 1171], "ltrim": 1342, "manag": 175, "manipul": [323, 814, 926, 1322], "map": 585, "map_batch": [559, 771, 860], "map_el": [560, 1172], "map_field": 586, "map_group": [307, 772, 907], "map_row": 231, "mapwithoutreturndtypewarn": 101, "math": 1341, "max": [232, 308, 360, 533, 561, 773, 861, 908, 963, 1038, 1146, 1173, 1336], "max_horizont": [233, 774], "mean": [234, 309, 534, 562, 775, 862, 909, 1039, 1147, 1174], "mean_horizont": [235, 776], "median": [236, 310, 361, 535, 563, 777, 863, 910, 964, 1040, 1148, 1175, 1336], "melt": [237, 864], "merge_sort": [238, 865], "meta": [564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 812], "metadata": 927, "method": 1347, "microsecond": [432, 1041], "millennium": [433, 1042], "millisecond": [434, 1043], "min": [239, 311, 362, 536, 579, 778, 866, 911, 965, 1044, 1149, 1176, 1336], "min_horizont": [240, 779], "minut": [435, 1045], "miscellan": [322, 813, 821, 925, 1321], "mod": [580, 1341], "mode": [581, 1177], "moduleupgraderequirederror": 102, "month": [436, 1046], "month_end": [437, 1047], "month_start": [438, 1048], "mul": 582, "multipl": 175, "n_chunk": [241, 1178], "n_uniqu": [242, 312, 363, 537, 583, 780, 912, 966, 1150, 1179], "name": [584, 585, 586, 587, 588, 589, 590, 591, 592, 807, 815, 1180, 1348], "nan_max": [593, 1181], "nan_min": [594, 1182], "nanosecond": [439, 1049], "ne": [570, 595, 1183], "ne_miss": [596, 1184], "neg": 597, "nest": 326, "new": 1, "new_from_index": 1185, "next_batch": 132, "nodataerror": 103, "normal": [678, 1256], "norowsreturnederror": 104, "not_": [598, 1186], "nth": 781, "null": 79, "null_count": [243, 599, 867, 1187], "nullif": 1339, "numer": [326, 816, 1323], "object": 80, "octet_length": 1342, "od": 823, "offset": 1335, "offset_bi": [440, 1050], "ones": 782, "oper": [816, 930, 1323, 1348, 1349], "option": 175, "or_": 600, "order": 1335, "ordinal_dai": [441, 1051], "other": 326, "outofboundserror": 105, "output": 823, "output_nam": 571, "over": 601, "pad_end": [679, 1257], "pad_start": [680, 1258], "panic": 327, "panicexcept": 106, "parallel": 821, "parametercollisionerror": 107, "parametr": [163, 164, 165, 166, 167, 168, 169, 170, 171, 1350], "parquet": 823, "partition_bi": 244, "pct_chang": [602, 1188], "peak_max": [603, 1189], "peak_min": [604, 1190], "performancewarn": 108, "pi": 1341, "pipe": [245, 605, 868], "pivot": 246, "plot": [324, 1324], "plugin": 928, "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 806, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1350], "polarserror": 109, "polarsinefficientmapwarn": 110, "polarswarn": 111, "pop": 572, "pow": [606, 1191, 1341], "prefix": 587, "prefix_field": 588, "product": [247, 607, 1192], "profil": [869, 1350], "provid": 1, "pyarrow": 823, "python": [822, 1347], "qcut": [608, 1193], "quantil": [248, 313, 609, 783, 870, 913, 1194], "quantile_cont": 1336, "quantile_disc": 1336, "quarter": [442, 1052], "queri": 1347, "radian": [610, 1344], "random": 821, "rank": [611, 1195], "read_avro": 134, "read_clipboard": 135, "read_csv": 136, "read_csv_batch": 137, "read_databas": 138, "read_database_uri": 139, "read_delta": 140, "read_excel": 141, "read_ipc": 142, "read_ipc_schema": 143, "read_ipc_stream": 144, "read_json": 145, "read_ndjson": 146, "read_od": 147, "read_parquet": 148, "read_parquet_schema": 149, "rechunk": [249, 612, 1196], "reduc": 784, "refer": 822, "regexp_lik": 1342, "regist": 1330, "register_dataframe_namespac": 52, "register_expr_namespac": 53, "register_glob": 1331, "register_lazyframe_namespac": 54, "register_mani": 1332, "register_series_namespac": 55, "registr": 1, "reinterpret": [378, 613, 980, 1197], "renam": [250, 871, 1198], "rename_field": [708, 1287], "repeat": 785, "repeat_bi": 614, "replac": [443, 615, 681, 1053, 1199, 1259, 1342], "replace_al": [682, 1260], "replace_column": 251, "replace_mani": [683, 1261], "replace_strict": [616, 1200], "replace_time_zon": [444, 1054], "reshap": [617, 1201], "restore_default": 4, "revers": [252, 364, 538, 618, 684, 872, 967, 1151, 1202, 1262, 1342], "right": 1342, "rle": [619, 1203], "rle_id": [620, 1204], "roll": [253, 621, 873], "rolling_corr": 786, "rolling_cov": 787, "rolling_map": [622, 1205], "rolling_max": [623, 1206], "rolling_max_bi": 624, "rolling_mean": [625, 1207], "rolling_mean_bi": 626, "rolling_median": [627, 1208], "rolling_median_bi": 628, "rolling_min": [629, 1209], "rolling_min_bi": 630, "rolling_quantil": [631, 1210], "rolling_quantile_bi": 632, "rolling_skew": [633, 1211], "rolling_std": [634, 1212], "rolling_std_bi": 635, "rolling_sum": [636, 1213], "rolling_sum_bi": 637, "rolling_var": [638, 1214], "rolling_var_bi": 639, "root_nam": 573, "round": [445, 640, 1055, 1215, 1341], "round_sig_fig": [641, 1216], "row": [254, 255], "rows_by_kei": 256, "rowserror": 112, "rtrim": 1342, "sampl": [257, 539, 642, 1152, 1217], "save": [5, 175], "save_to_fil": 6, "scan_csv": 150, "scan_delta": 151, "scan_iceberg": 152, "scan_ipc": 153, "scan_ndjson": 154, "scan_parquet": 155, "scan_pyarrow_dataset": 156, "scatter": 1218, "schema": [258, 874, 929, 1288], "schemaerror": 115, "schemafieldnotfounderror": 116, "search_sort": [643, 1219], "second": [446, 1056], "select": [259, 323, 788, 814, 875, 926, 1322, 1335], "select_seq": [260, 876], "selector": 930, "seri": [170, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1319], "serial": [261, 322, 574, 877, 925], "set": [930, 1220, 1348], "set_ascii_t": 7, "set_auto_structifi": 8, "set_decimal_separ": 9, "set_differ": [540, 1153], "set_float_precis": 10, "set_fmt_float": 11, "set_fmt_str_length": 12, "set_fmt_table_cell_list_len": 13, "set_intersect": [541, 1154], "set_profil": 171, "set_random_se": 157, "set_sort": [262, 644, 878, 1221], "set_streaming_chunk_s": 14, "set_symmetric_differ": [542, 1155], "set_tbl_cell_align": 15, "set_tbl_cell_numeric_align": 16, "set_tbl_col": 17, "set_tbl_column_data_type_inlin": 18, "set_tbl_dataframe_shape_below": 19, "set_tbl_format": 20, "set_tbl_hide_column_data_typ": 21, "set_tbl_hide_column_nam": 22, "set_tbl_hide_dataframe_shap": 23, "set_tbl_hide_dtype_separ": 24, "set_tbl_row": 25, "set_tbl_width_char": 26, "set_thousands_separ": 27, "set_trim_decimal_zero": 28, "set_union": [543, 1156], "set_verbos": 29, "shape": [263, 1222], "shapeerror": 117, "shift": [264, 365, 544, 645, 879, 968, 1157, 1223], "show": 1349, "show_graph": [575, 880], "show_vers": 158, "shrink_dtyp": [646, 1224], "shrink_to_fit": [265, 1225], "shuffl": [647, 1226], "sign": [648, 1227, 1341], "sin": [649, 1228, 1344], "sind": 1344, "sinh": [650, 1229], "sink_csv": 46, "sink_ipc": 47, "sink_ndjson": 48, "sink_parquet": 49, "size": [379, 981], "skew": [651, 1230], "slice": [266, 545, 652, 685, 881, 1158, 1231, 1263], "sort": [267, 366, 546, 653, 882, 969, 1159, 1232], "sort_bi": 654, "split": [686, 1264], "split_exact": [687, 1265], "splitn": [688, 1266], "sql": [268, 789, 883, 1335, 1340, 1346, 1347], "sql_expr": 790, "sqlcontext": [1328, 1329, 1330, 1331, 1332, 1333, 1334, 1347], "sqlinterfaceerror": 113, "sqlsyntaxerror": 114, "sqrt": [655, 1233, 1341], "starts_with": [380, 397, 689, 982, 999, 1267, 1342], "state": [30, 175], "std": [269, 367, 547, 656, 791, 884, 970, 1160, 1234], "stddev": 1336, "str": [657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283], "strategi": 1350, "strftime": [447, 1057, 1343], "string": [81, 326, 817, 1325, 1342], "stringcach": [50, 821], "stringcachemismatcherror": 118, "strip_char": [690, 1268], "strip_chars_end": [691, 1269], "strip_chars_start": [692, 1270], "strip_prefix": [693, 1271], "strip_suffix": [694, 1272], "strpo": 1342, "strptime": [695, 1273, 1342], "struct": [82, 706, 707, 708, 709, 710, 792, 818, 1284, 1285, 1286, 1287, 1288, 1289, 1326], "structfieldnotfounderror": 119, "style": 325, "sub": 711, "substr": 1342, "suffix": 589, "suffix_field": 590, "sum": [270, 314, 368, 548, 712, 793, 885, 914, 971, 1161, 1290, 1336], "sum_horizont": [271, 794], "tabl": [1333, 1349], "tail": [272, 315, 549, 696, 713, 795, 886, 915, 1162, 1274, 1291], "tan": [714, 1292, 1344], "tand": 1344, "tanh": [715, 1293], "tempor": [326, 819, 1327, 1338, 1343], "test": [159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 1350], "thread_pool_s": 172, "threadpool_s": 173, "time": [83, 448, 796, 1058], "time_rang": [797, 798], "timestamp": [449, 1059, 1342], "to_arrai": [550, 1163], "to_arrow": [273, 1294], "to_dat": [697, 1275], "to_datetim": [698, 1276], "to_decim": [699, 1277], "to_dict": [274, 275], "to_dummi": [276, 1295], "to_fram": 1296, "to_init_repr": [277, 1297], "to_integ": [700, 1278], "to_jax": [278, 1298], "to_list": [369, 972, 1299], "to_loc": 1000, "to_lowercas": [591, 701, 1279], "to_numpi": [279, 1300], "to_panda": [280, 1301], "to_phys": [716, 1302], "to_seri": 281, "to_str": [450, 1060], "to_struct": [282, 370, 551, 973, 1164], "to_tim": [702, 1280], "to_titlecas": [703, 1281], "to_torch": [283, 1303], "to_uppercas": [592, 704, 1282], "toomanyrowsreturnederror": 120, "top_k": [284, 717, 887, 1304], "top_k_bi": 718, "total_dai": [451, 1061], "total_hour": [452, 1062], "total_microsecond": [453, 1063], "total_millisecond": [454, 1064], "total_minut": [455, 1065], "total_nanosecond": [456, 1066], "total_second": [457, 1067], "transpos": 285, "tree_format": 576, "trigonometri": 1344, "truediv": 719, "truncat": [458, 1068, 1349], "try_cast": 1345, "type": [326, 1345], "uint16": 84, "uint32": 85, "uint64": 86, "uint8": 87, "undo_alias": 577, "union": 1348, "uniqu": [286, 371, 552, 720, 888, 974, 1165, 1305], "unique_count": [721, 1306], "unknown": 88, "unnest": [287, 709, 889, 1289, 1337, 1349], "unpivot": [288, 890], "unregist": 1334, "unstablewarn": 121, "unstack": 289, "unsuitablesqlerror": 122, "updat": [290, 891], "upper": 1342, "upper_bound": [722, 1307], "upsampl": 291, "us": 175, "uses_lexical_ord": 1001, "using_string_cach": 174, "utf8": 89, "value_count": [723, 1308], "var": [292, 372, 553, 724, 799, 892, 975, 1166, 1309], "varianc": 1336, "vstack": 293, "warn": 327, "week": [459, 1069], "weekdai": [460, 1070], "when": 800, "where": [725, 1335], "width": [294, 893], "window": 820, "with_column": [295, 894], "with_columns_seq": [296, 895], "with_context": 896, "with_field": 710, "with_row_count": [297, 897], "with_row_index": [298, 898], "with_time_unit": [461, 1071], "write_avro": 35, "write_clipboard": 36, "write_csv": 37, "write_databas": 38, "write_delta": 39, "write_excel": 40, "write_ipc": 41, "write_ipc_stream": 42, "write_json": [43, 578], "write_ndjson": 44, "write_parquet": 45, "xor": 726, "year": [462, 1072], "zero": 801, "zfill": [705, 1283], "zip_with": 1310}})